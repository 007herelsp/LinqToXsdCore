//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Xml.Schema.Linq {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Namespaces, Validation?, Transformation?)
    /// </para>
    /// </summary>
    public partial class Configuration : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Configuration(XElement xe) { return XTypedServices.ToXTypedElement<Configuration>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Configuration() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Namespaces", "http://www.microsoft.com/xml/schema/linq")), new NamedContentModelEntity(XName.Get("Validation", "http://www.microsoft.com/xml/schema/linq")), new NamedContentModelEntity(XName.Get("Transformation", "http://www.microsoft.com/xml/schema/linq")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Namespaces, Validation?, Transformation?)
        /// </para>
        /// </summary>
        public Configuration() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Namespaces, Validation?, Transformation?)
        /// </para>
        /// </summary>
        public Namespaces Namespaces {
            get {
                XElement x = this.GetElement(XName.Get("Namespaces", "http://www.microsoft.com/xml/schema/linq"));
                if ((x == null)) {
                    throw new LinqToXsdException("Missing required Element");
                }
                return ((Namespaces)(x));
            }
            set {
                this.SetElement(XName.Get("Namespaces", "http://www.microsoft.com/xml/schema/linq"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Namespaces, Validation?, Transformation?)
        /// </para>
        /// </summary>
        public Validation Validation {
            get {
                XElement x = this.GetElement(XName.Get("Validation", "http://www.microsoft.com/xml/schema/linq"));
                return ((Validation)(x));
            }
            set {
                this.SetElement(XName.Get("Validation", "http://www.microsoft.com/xml/schema/linq"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Namespaces, Validation?, Transformation?)
        /// </para>
        /// </summary>
        public Transformation Transformation {
            get {
                XElement x = this.GetElement(XName.Get("Transformation", "http://www.microsoft.com/xml/schema/linq"));
                return ((Transformation)(x));
            }
            set {
                this.SetElement(XName.Get("Transformation", "http://www.microsoft.com/xml/schema/linq"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Configuration", "http://www.microsoft.com/xml/schema/linq");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Configuration Load(string xmlFile) {
            return XTypedServices.Load<Configuration>(xmlFile);
        }
        
        public static Configuration Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Configuration>(xmlFile);
        }
        
        public static Configuration Parse(string xml) {
            return XTypedServices.Parse<Configuration>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Configuration>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Namespaces", "http://www.microsoft.com/xml/schema/linq"), typeof(Namespaces));
            localElementDictionary.Add(XName.Get("Validation", "http://www.microsoft.com/xml/schema/linq"), typeof(Validation));
            localElementDictionary.Add(XName.Get("Transformation", "http://www.microsoft.com/xml/schema/linq"), typeof(Transformation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (@Namespace)
    /// </para>
    /// </summary>
    public partial class Namespaces : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Namespaces(XElement xe) { return XTypedServices.ToXTypedElement<Namespaces>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Namespaces() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Namespace", "http://www.microsoft.com/xml/schema/linq")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (@Namespace)
        /// </para>
        /// </summary>
        public Namespaces() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (@Namespace)
        /// </para>
        /// </summary>
        public @Namespace @Namespace {
            get {
                XElement x = this.GetElement(XName.Get("Namespace", "http://www.microsoft.com/xml/schema/linq"));
                if ((x == null)) {
                    throw new LinqToXsdException("Missing required Element");
                }
                return ((@Namespace)(x));
            }
            set {
                this.SetElement(XName.Get("Namespace", "http://www.microsoft.com/xml/schema/linq"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Namespaces", "http://www.microsoft.com/xml/schema/linq");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Namespaces Load(string xmlFile) {
            return XTypedServices.Load<Namespaces>(xmlFile);
        }
        
        public static Namespaces Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Namespaces>(xmlFile);
        }
        
        public static Namespaces Parse(string xml) {
            return XTypedServices.Parse<Namespaces>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Namespaces>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Namespace", "http://www.microsoft.com/xml/schema/linq"), typeof(@Namespace));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class @Namespace : XTypedElement, IXMetaData {
        
         public static explicit operator @Namespace(XElement xe) { return XTypedServices.ToXTypedElement<@Namespace>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public @Namespace() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Clr {
            get {
                XAttribute x = this.Attribute(XName.Get("Clr", ""));
                if ((x == null)) {
                    throw new LinqToXsdException("Missing required Attribute");
                }
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Clr", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public System.Uri Schema {
            get {
                XAttribute x = this.Attribute(XName.Get("Schema", ""));
                if ((x == null)) {
                    throw new LinqToXsdException("Missing required Attribute");
                }
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Schema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Namespace", "http://www.microsoft.com/xml/schema/linq");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static @Namespace Load(string xmlFile) {
            return XTypedServices.Load<@Namespace>(xmlFile);
        }
        
        public static @Namespace Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<@Namespace>(xmlFile);
        }
        
        public static @Namespace Parse(string xml) {
            return XTypedServices.Parse<@Namespace>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<@Namespace>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VerifyRequired)
    /// </para>
    /// </summary>
    public partial class Validation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Validation(XElement xe) { return XTypedServices.ToXTypedElement<Validation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Validation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("VerifyRequired", "http://www.microsoft.com/xml/schema/linq")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VerifyRequired)
        /// </para>
        /// </summary>
        public Validation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VerifyRequired)
        /// </para>
        /// </summary>
        public VerifyRequired VerifyRequired {
            get {
                XElement x = this.GetElement(XName.Get("VerifyRequired", "http://www.microsoft.com/xml/schema/linq"));
                if ((x == null)) {
                    throw new LinqToXsdException("Missing required Element");
                }
                return ((VerifyRequired)(x));
            }
            set {
                this.SetElement(XName.Get("VerifyRequired", "http://www.microsoft.com/xml/schema/linq"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Validation", "http://www.microsoft.com/xml/schema/linq");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Validation Load(string xmlFile) {
            return XTypedServices.Load<Validation>(xmlFile);
        }
        
        public static Validation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Validation>(xmlFile);
        }
        
        public static Validation Parse(string xml) {
            return XTypedServices.Parse<Validation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Validation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("VerifyRequired", "http://www.microsoft.com/xml/schema/linq"), typeof(VerifyRequired));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Deanonymize)
    /// </para>
    /// </summary>
    public partial class Transformation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator Transformation(XElement xe) { return XTypedServices.ToXTypedElement<Transformation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Transformation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Deanonymize", "http://www.microsoft.com/xml/schema/linq")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Deanonymize)
        /// </para>
        /// </summary>
        public Transformation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Deanonymize)
        /// </para>
        /// </summary>
        public Deanonymize Deanonymize {
            get {
                XElement x = this.GetElement(XName.Get("Deanonymize", "http://www.microsoft.com/xml/schema/linq"));
                if ((x == null)) {
                    throw new LinqToXsdException("Missing required Element");
                }
                return ((Deanonymize)(x));
            }
            set {
                this.SetElement(XName.Get("Deanonymize", "http://www.microsoft.com/xml/schema/linq"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Transformation", "http://www.microsoft.com/xml/schema/linq");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Transformation Load(string xmlFile) {
            return XTypedServices.Load<Transformation>(xmlFile);
        }
        
        public static Transformation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Transformation>(xmlFile);
        }
        
        public static Transformation Parse(string xml) {
            return XTypedServices.Parse<Transformation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Transformation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Deanonymize", "http://www.microsoft.com/xml/schema/linq"), typeof(Deanonymize));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class Deanonymize : XTypedElement, IXMetaData {
        
         public static explicit operator Deanonymize(XElement xe) { return XTypedServices.ToXTypedElement<Deanonymize>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Deanonymize() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> strict {
            get {
                XAttribute x = this.Attribute(XName.Get("strict", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("strict", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Deanonymize", "http://www.microsoft.com/xml/schema/linq");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Deanonymize Load(string xmlFile) {
            return XTypedServices.Load<Deanonymize>(xmlFile);
        }
        
        public static Deanonymize Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Deanonymize>(xmlFile);
        }
        
        public static Deanonymize Parse(string xml) {
            return XTypedServices.Parse<Deanonymize>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Deanonymize>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class VerifyRequired : XTypedElement, IXMetaData {
        
         public static explicit operator VerifyRequired(XElement xe) { return XTypedServices.ToXTypedElement<VerifyRequired>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public VerifyRequired() {
        }
        
        public VerifyRequired(bool content) {
            this.TypedValue = content;
        }
        
        public bool TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VerifyRequired", "http://www.microsoft.com/xml/schema/linq");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static VerifyRequired Load(string xmlFile) {
            return XTypedServices.Load<VerifyRequired>(xmlFile);
        }
        
        public static VerifyRequired Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<VerifyRequired>(xmlFile);
        }
        
        public static VerifyRequired Parse(string xml) {
            return XTypedServices.Parse<VerifyRequired>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VerifyRequired>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildElementDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return XTypedServices.EmptyDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("Configuration", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.Configuration));
            elementDictionary.Add(XName.Get("Namespaces", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.Namespaces));
            elementDictionary.Add(XName.Get("Namespace", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.@Namespace));
            elementDictionary.Add(XName.Get("Validation", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.Validation));
            elementDictionary.Add(XName.Get("Transformation", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.Transformation));
            elementDictionary.Add(XName.Get("Deanonymize", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.Deanonymize));
            elementDictionary.Add(XName.Get("VerifyRequired", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.VerifyRequired));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("Configuration", "http://www.microsoft.com/xml/schema/linq")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public Configuration Configuration {  get {return rootObject as Configuration; } }

    public Namespaces Namespaces {  get {return rootObject as Namespaces; } }

    public @Namespace @Namespace {  get {return rootObject as @Namespace; } }

    public Validation Validation {  get {return rootObject as Validation; } }

    public Transformation Transformation {  get {return rootObject as Transformation; } }

    public Deanonymize Deanonymize {  get {return rootObject as Deanonymize; } }

    public VerifyRequired VerifyRequired {  get {return rootObject as VerifyRequired; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Configuration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Namespaces root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(@Namespace root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Validation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Transformation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Deanonymize root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(VerifyRequired root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::Xml.Schema.Linq.Configuration Configuration {  get {return rootObject as global::Xml.Schema.Linq.Configuration; } }

    public global::Xml.Schema.Linq.Namespaces Namespaces {  get {return rootObject as global::Xml.Schema.Linq.Namespaces; } }

    public global::Xml.Schema.Linq.@Namespace @Namespace {  get {return rootObject as global::Xml.Schema.Linq.@Namespace; } }

    public global::Xml.Schema.Linq.Validation Validation {  get {return rootObject as global::Xml.Schema.Linq.Validation; } }

    public global::Xml.Schema.Linq.Transformation Transformation {  get {return rootObject as global::Xml.Schema.Linq.Transformation; } }

    public global::Xml.Schema.Linq.Deanonymize Deanonymize {  get {return rootObject as global::Xml.Schema.Linq.Deanonymize; } }

    public global::Xml.Schema.Linq.VerifyRequired VerifyRequired {  get {return rootObject as global::Xml.Schema.Linq.VerifyRequired; } }
        
        private XRoot() {
        }
        
        public XRoot(global::Xml.Schema.Linq.Configuration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Xml.Schema.Linq.Namespaces root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Xml.Schema.Linq.@Namespace root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Xml.Schema.Linq.Validation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Xml.Schema.Linq.Transformation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Xml.Schema.Linq.Deanonymize root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Xml.Schema.Linq.VerifyRequired root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
