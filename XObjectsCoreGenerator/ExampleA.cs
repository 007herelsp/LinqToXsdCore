using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using W3C.XSD;
using Xml.Schema.Linq.Extensions;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Xml.Schema.Code
{
    public class ExampleA
    {
        public static string A(schema xsd)
        {
            var targetNamespace = xsd.targetNamespace.AbsoluteUri
                                     .ConvertUriToClrNamespace();

            var nsComments = TriviaList(new[] {
                Comment("//------------------------------------------------------------------------------"),
                Comment("// <auto-generated>"),
                Comment("//     This code was generated by a tool (LinqToXsdCore)."),
                Comment("//     .NET Core version: 3.0"),
                Comment("//"),
                Comment("//     Changes to this file may cause incorrect behavior and will be lost if"),
                Comment("//     the code is regenerated."),
                Comment("// </auto-generated>"),
                Comment("//------------------------------------------------------------------------------")
            });

            var usingDirectiveSyntaxes = GenerateDefaultUsings();
            var memberDeclarationSyntaxes = new List<MemberDeclarationSyntax>();

            var ns = NamespaceDeclaration(ParseName(targetNamespace))
                     .WithNamespaceKeyword(Token(nsComments, SyntaxKind.NamespaceKeyword, SyntaxTriviaList.Empty))
                     .WithUsings(List(usingDirectiveSyntaxes))
                     .WithMembers(List(memberDeclarationSyntaxes));

            var cu = CompilationUnit().WithMembers(SingletonList<MemberDeclarationSyntax>(ns));
            var _result = cu.NormalizeWhitespace().ToFullString();

            return _result;
        }

        public static SyntaxList<UsingDirectiveSyntax> GenerateDefaultUsings()
        {
            return List(
                new[] {
                    UsingDirective(ParseName("System")),
                    UsingDirective(ParseName("System.Collections")),
                    UsingDirective(ParseName("System.Collections.Generic")),
                    UsingDirective(ParseName("System.IO")),
                    UsingDirective(ParseName("System.Diagnostics")),
                    UsingDirective(ParseName("System.Xml")),
                    UsingDirective(ParseName("System.Xml.Schema")),
                    UsingDirective(ParseName("System.Xml.Linq")),
                    UsingDirective(ParseName("Xml.Schema.Linq"))
                });
        }

        public static List<MemberDeclarationSyntax> GenerateNamespaceMembers() { }

        public static ClassDeclarationSyntax GenerateClassDeclaration<T>()
        {
            var classMembers = new SyntaxList<MemberDeclarationSyntax>();

            var classDec = ClassDeclaration("ElementType")
                           .WithModifiers(TokenList(new[] {
                               Token(SyntaxKind.PartialKeyword)
                           }))
                           .WithBaseList(
                               BaseList(SeparatedList<BaseTypeSyntax>(
                                       new SyntaxNodeOrToken[]{
                                           SimpleBaseType(IdentifierName("XTypedElement")),
                                           Token(SyntaxKind.CommaToken),
                                           SimpleBaseType(IdentifierName("IXMetaData"))})))
                           .WithMembers(classMembers);

            return classDec;
        }

        public static MemberDeclarationSyntax GeneratePrivateField()
        {
            var xTypedListIdentifier = Identifier("XTypedList");
            var identiferForTypedParam = IdentifierName("Table");

            var fieldName = Identifier("TableField");
            var debuggerBrowsableNeverAttribute = GenerateDebuggerBrowsableNeverAttribute();
            var fieldDeclarationSyntax = FieldDeclaration(
                                             VariableDeclaration(
                                                     GenericName(xTypedListIdentifier)
                                                         .WithTypeArgumentList(
                                                             TypeArgumentList(
                                                                 SingletonSeparatedList<TypeSyntax>(identiferForTypedParam))))
                                                 .WithVariables(
                                                     SingletonSeparatedList<VariableDeclaratorSyntax>(
                                                         VariableDeclarator(fieldName))))
                                         .WithAttributeLists(
                                             debuggerBrowsableNeverAttribute)
                                         .WithModifiers(
                                             TokenList(
                                                 Token(SyntaxKind.PrivateKeyword)));
            return fieldDeclarationSyntax;
        }

        public static SyntaxList<AttributeListSyntax> GenerateDebuggerBrowsableNeverAttribute()
        {
            return SingletonList<AttributeListSyntax>(
                AttributeList(
                    SingletonSeparatedList<AttributeSyntax>(
                        Attribute(IdentifierName("DebuggerBrowsable"))
                            .WithArgumentList(
                                AttributeArgumentList(
                                    SingletonSeparatedList<AttributeArgumentSyntax>(
                                        AttributeArgument(
                                            MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                IdentifierName("DebuggerBrowsableState"),
                                                IdentifierName("Never")))))))));
        }
    }
}