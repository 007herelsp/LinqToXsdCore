//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Schemas.SharePoint {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    public sealed class TRUEFALSE {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "TRUE",
                        "FALSE",
                        "True",
                        "False",
                        "true",
                        "false"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TRUEFALSE() {
        }
    }
    
    public sealed class UniqueIdentifier {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private UniqueIdentifier() {
        }
    }
    
    public sealed class RelativeFolderPath {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private RelativeFolderPath() {
        }
    }
    
    public sealed class RelativeFilePath {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private RelativeFilePath() {
        }
    }
    
    public sealed class LocalizableString {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private LocalizableString() {
        }
    }
    
    public sealed class RelativeUrl {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private RelativeUrl() {
        }
    }
    
    public sealed class AssemblyStrongName {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 2, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AssemblyStrongName() {
        }
    }
    
    public sealed class AssemblyClass {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AssemblyClass() {
        }
    }
    
    public sealed class String255Chars {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private String255Chars() {
        }
    }
    
    public sealed class Int0To1024 {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 1024, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Int0To1024() {
        }
    }
    
    public sealed class BasicVersion {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private BasicVersion() {
        }
    }
    
    public sealed class AbsoluteOrRelativeUrl {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private AbsoluteOrRelativeUrl() {
        }
    }
    
    public sealed class AbsoluteUrl {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private AbsoluteUrl() {
        }
    }
    
    public sealed class ContentDirection {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "RTL",
                        "LTR",
                        "none",
                        "0",
                        "2"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ContentDirection() {
        }
    }
    
    public sealed class Sequence {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 65536, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Sequence() {
        }
    }
    
    public sealed class Int0To65536 {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 65536, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Int0To65536() {
        }
    }
    
    public sealed class TrueFalseMixed {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "True",
                        "False"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TrueFalseMixed() {
        }
    }
    
    public sealed class NonEmptyString {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NonEmptyString() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
    /// </para>
    /// </summary>
    public partial class CamlQueryRoot : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator CamlQueryRoot(XElement xe) { return XTypedServices.ToXTypedElement<CamlQueryRoot>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CamlQueryRoot() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public CamlQueryRoot() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public LogicalJoinDefinition Where {
            get {
                XElement x = this.GetElement(XName.Get("Where", "http://schemas.microsoft.com/sharepoint/"));
                return ((LogicalJoinDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Where", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public OrderByDefinition OrderBy {
            get {
                XElement x = this.GetElement(XName.Get("OrderBy", "http://schemas.microsoft.com/sharepoint/"));
                return ((OrderByDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("OrderBy", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public LogicalTestDefinition Eq {
            get {
                XElement x = this.GetElement(XName.Get("Eq", "http://schemas.microsoft.com/sharepoint/"));
                return ((LogicalTestDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Eq", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public SimpleFieldRef Field {
            get {
                XElement x = this.GetElement(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                return ((SimpleFieldRef)(x));
            }
            set {
                this.SetElement(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public ListPropertyDefinition ListProperty {
            get {
                XElement x = this.GetElement(XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"));
                return ((ListPropertyDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public LookupColumnDefinition LookupColumn {
            get {
                XElement x = this.GetElement(XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"));
                return ((LookupColumnDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public QueryColumnDefinition Column {
            get {
                XElement x = this.GetElement(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"));
                return ((QueryColumnDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public QueryGetVarDefinition GetVar {
            get {
                XElement x = this.GetElement(XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"));
                return ((QueryGetVarDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public GroupByDefinition GroupBy {
            get {
                XElement x = this.GetElement(XName.Get("GroupBy", "http://schemas.microsoft.com/sharepoint/"));
                return ((GroupByDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("GroupBy", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public LogicalTestDefinition Contains {
            get {
                XElement x = this.GetElement(XName.Get("Contains", "http://schemas.microsoft.com/sharepoint/"));
                return ((LogicalTestDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Contains", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public LogicalTestDefinition BeginsWith {
            get {
                XElement x = this.GetElement(XName.Get("BeginsWith", "http://schemas.microsoft.com/sharepoint/"));
                return ((LogicalTestDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("BeginsWith", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CamlQueryRoot", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CamlQueryRoot>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Where", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalJoinDefinition));
            localElementDictionary.Add(XName.Get("OrderBy", "http://schemas.microsoft.com/sharepoint/"), typeof(OrderByDefinition));
            localElementDictionary.Add(XName.Get("Eq", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(SimpleFieldRef));
            localElementDictionary.Add(XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ListPropertyDefinition));
            localElementDictionary.Add(XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"), typeof(LookupColumnDefinition));
            localElementDictionary.Add(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryGetVarDefinition));
            localElementDictionary.Add(XName.Get("GroupBy", "http://schemas.microsoft.com/sharepoint/"), typeof(GroupByDefinition));
            localElementDictionary.Add(XName.Get("Contains", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("BeginsWith", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldRef | Value | XML)*)
    /// </para>
    /// </summary>
    public partial class LogicalTestDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldRefDefinition> FieldRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ValueDefinition> ValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> XMLField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator LogicalTestDefinition(XElement xe) { return XTypedServices.ToXTypedElement<LogicalTestDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LogicalTestDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldRef | Value | XML)*)
        /// </para>
        /// </summary>
        public LogicalTestDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Value | XML)*)
        /// </para>
        /// </summary>
        public IList<FieldRefDefinition> FieldRef {
            get {
                if ((this.FieldRefField == null)) {
                    this.FieldRefField = new XTypedList<FieldRefDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldRefField;
            }
            set {
                if ((value == null)) {
                    this.FieldRefField = null;
                }
                else {
                    if ((this.FieldRefField == null)) {
                        this.FieldRefField = XTypedList<FieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FieldRefDefinition>(this.FieldRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Value | XML)*)
        /// </para>
        /// </summary>
        public IList<ValueDefinition> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<ValueDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Value", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<ValueDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Value", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ValueDefinition>(this.ValueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Value | XML)*)
        /// </para>
        /// </summary>
        public IList<string> XML {
            get {
                if ((this.XMLField == null)) {
                    this.XMLField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("XML", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.XMLField;
            }
            set {
                if ((value == null)) {
                    this.XMLField = null;
                }
                else {
                    if ((this.XMLField == null)) {
                        this.XMLField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("XML", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.XMLField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LogicalTestDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LogicalTestDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldRefDefinition));
            localElementDictionary.Add(XName.Get("Value", "http://schemas.microsoft.com/sharepoint/"), typeof(ValueDefinition));
            localElementDictionary.Add(XName.Get("XML", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldRef | Values | XML)*)
    /// </para>
    /// </summary>
    public partial class LogicalMultiTestDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldRefDefinition> FieldRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ValueDefinitions> ValuesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> XMLField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator LogicalMultiTestDefinition(XElement xe) { return XTypedServices.ToXTypedElement<LogicalMultiTestDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LogicalMultiTestDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldRef | Values | XML)*)
        /// </para>
        /// </summary>
        public LogicalMultiTestDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Values | XML)*)
        /// </para>
        /// </summary>
        public IList<FieldRefDefinition> FieldRef {
            get {
                if ((this.FieldRefField == null)) {
                    this.FieldRefField = new XTypedList<FieldRefDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldRefField;
            }
            set {
                if ((value == null)) {
                    this.FieldRefField = null;
                }
                else {
                    if ((this.FieldRefField == null)) {
                        this.FieldRefField = XTypedList<FieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FieldRefDefinition>(this.FieldRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Values | XML)*)
        /// </para>
        /// </summary>
        public IList<ValueDefinitions> Values {
            get {
                if ((this.ValuesField == null)) {
                    this.ValuesField = new XTypedList<ValueDefinitions>(this, LinqToXsdTypeManager.Instance, XName.Get("Values", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ValuesField;
            }
            set {
                if ((value == null)) {
                    this.ValuesField = null;
                }
                else {
                    if ((this.ValuesField == null)) {
                        this.ValuesField = XTypedList<ValueDefinitions>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Values", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ValueDefinitions>(this.ValuesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Values | XML)*)
        /// </para>
        /// </summary>
        public IList<string> XML {
            get {
                if ((this.XMLField == null)) {
                    this.XMLField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("XML", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.XMLField;
            }
            set {
                if ((value == null)) {
                    this.XMLField = null;
                }
                else {
                    if ((this.XMLField == null)) {
                        this.XMLField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("XML", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.XMLField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LogicalMultiTestDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LogicalMultiTestDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldRefDefinition));
            localElementDictionary.Add(XName.Get("Values", "http://schemas.microsoft.com/sharepoint/"), typeof(ValueDefinitions));
            localElementDictionary.Add(XName.Get("XML", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
    /// </para>
    /// </summary>
    public partial class LogicalJoinDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> EqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> GeqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> GtField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> LeqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> LtField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> NeqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExtendedLogicalJoinDefinition> AndField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExtendedLogicalJoinDefinition> OrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MembershipDefinition> MembershipField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> IsNullField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> IsNotNullField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UnlimitedLogicalTestDefinition> DateRangesOverlapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> BeginsWithField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> ContainsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalMultiTestDefinition> @InField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator LogicalJoinDefinition(XElement xe) { return XTypedServices.ToXTypedElement<LogicalJoinDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LogicalJoinDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public LogicalJoinDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> Eq {
            get {
                if ((this.EqField == null)) {
                    this.EqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Eq", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.EqField;
            }
            set {
                if ((value == null)) {
                    this.EqField = null;
                }
                else {
                    if ((this.EqField == null)) {
                        this.EqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Eq", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.EqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> Geq {
            get {
                if ((this.GeqField == null)) {
                    this.GeqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Geq", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.GeqField;
            }
            set {
                if ((value == null)) {
                    this.GeqField = null;
                }
                else {
                    if ((this.GeqField == null)) {
                        this.GeqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Geq", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.GeqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> Gt {
            get {
                if ((this.GtField == null)) {
                    this.GtField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Gt", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.GtField;
            }
            set {
                if ((value == null)) {
                    this.GtField = null;
                }
                else {
                    if ((this.GtField == null)) {
                        this.GtField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Gt", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.GtField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> Leq {
            get {
                if ((this.LeqField == null)) {
                    this.LeqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Leq", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.LeqField;
            }
            set {
                if ((value == null)) {
                    this.LeqField = null;
                }
                else {
                    if ((this.LeqField == null)) {
                        this.LeqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Leq", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.LeqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> Lt {
            get {
                if ((this.LtField == null)) {
                    this.LtField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Lt", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.LtField;
            }
            set {
                if ((value == null)) {
                    this.LtField = null;
                }
                else {
                    if ((this.LtField == null)) {
                        this.LtField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Lt", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.LtField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> Neq {
            get {
                if ((this.NeqField == null)) {
                    this.NeqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Neq", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.NeqField;
            }
            set {
                if ((value == null)) {
                    this.NeqField = null;
                }
                else {
                    if ((this.NeqField == null)) {
                        this.NeqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Neq", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.NeqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<ExtendedLogicalJoinDefinition> And {
            get {
                if ((this.AndField == null)) {
                    this.AndField = new XTypedList<ExtendedLogicalJoinDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("And", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.AndField;
            }
            set {
                if ((value == null)) {
                    this.AndField = null;
                }
                else {
                    if ((this.AndField == null)) {
                        this.AndField = XTypedList<ExtendedLogicalJoinDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("And", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ExtendedLogicalJoinDefinition>(this.AndField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<ExtendedLogicalJoinDefinition> Or {
            get {
                if ((this.OrField == null)) {
                    this.OrField = new XTypedList<ExtendedLogicalJoinDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Or", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.OrField;
            }
            set {
                if ((value == null)) {
                    this.OrField = null;
                }
                else {
                    if ((this.OrField == null)) {
                        this.OrField = XTypedList<ExtendedLogicalJoinDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Or", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ExtendedLogicalJoinDefinition>(this.OrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<MembershipDefinition> Membership {
            get {
                if ((this.MembershipField == null)) {
                    this.MembershipField = new XTypedList<MembershipDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Membership", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MembershipField;
            }
            set {
                if ((value == null)) {
                    this.MembershipField = null;
                }
                else {
                    if ((this.MembershipField == null)) {
                        this.MembershipField = XTypedList<MembershipDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Membership", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<MembershipDefinition>(this.MembershipField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> IsNull {
            get {
                if ((this.IsNullField == null)) {
                    this.IsNullField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("IsNull", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.IsNullField;
            }
            set {
                if ((value == null)) {
                    this.IsNullField = null;
                }
                else {
                    if ((this.IsNullField == null)) {
                        this.IsNullField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IsNull", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.IsNullField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> IsNotNull {
            get {
                if ((this.IsNotNullField == null)) {
                    this.IsNotNullField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("IsNotNull", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.IsNotNullField;
            }
            set {
                if ((value == null)) {
                    this.IsNotNullField = null;
                }
                else {
                    if ((this.IsNotNullField == null)) {
                        this.IsNotNullField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IsNotNull", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.IsNotNullField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<UnlimitedLogicalTestDefinition> DateRangesOverlap {
            get {
                if ((this.DateRangesOverlapField == null)) {
                    this.DateRangesOverlapField = new XTypedList<UnlimitedLogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("DateRangesOverlap", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.DateRangesOverlapField;
            }
            set {
                if ((value == null)) {
                    this.DateRangesOverlapField = null;
                }
                else {
                    if ((this.DateRangesOverlapField == null)) {
                        this.DateRangesOverlapField = XTypedList<UnlimitedLogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DateRangesOverlap", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<UnlimitedLogicalTestDefinition>(this.DateRangesOverlapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> BeginsWith {
            get {
                if ((this.BeginsWithField == null)) {
                    this.BeginsWithField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("BeginsWith", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.BeginsWithField;
            }
            set {
                if ((value == null)) {
                    this.BeginsWithField = null;
                }
                else {
                    if ((this.BeginsWithField == null)) {
                        this.BeginsWithField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("BeginsWith", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.BeginsWithField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> Contains {
            get {
                if ((this.ContainsField == null)) {
                    this.ContainsField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Contains", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ContainsField;
            }
            set {
                if ((value == null)) {
                    this.ContainsField = null;
                }
                else {
                    if ((this.ContainsField == null)) {
                        this.ContainsField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Contains", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.ContainsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalMultiTestDefinition> @In {
            get {
                if ((this.@InField == null)) {
                    this.@InField = new XTypedList<LogicalMultiTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("In", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.@InField;
            }
            set {
                if ((value == null)) {
                    this.@InField = null;
                }
                else {
                    if ((this.@InField == null)) {
                        this.@InField = XTypedList<LogicalMultiTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("In", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalMultiTestDefinition>(this.@InField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LogicalJoinDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LogicalJoinDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Eq", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("Geq", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("Gt", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("Leq", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("Lt", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("Neq", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("And", "http://schemas.microsoft.com/sharepoint/"), typeof(ExtendedLogicalJoinDefinition));
            localElementDictionary.Add(XName.Get("Or", "http://schemas.microsoft.com/sharepoint/"), typeof(ExtendedLogicalJoinDefinition));
            localElementDictionary.Add(XName.Get("Membership", "http://schemas.microsoft.com/sharepoint/"), typeof(MembershipDefinition));
            localElementDictionary.Add(XName.Get("IsNull", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("IsNotNull", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("DateRangesOverlap", "http://schemas.microsoft.com/sharepoint/"), typeof(UnlimitedLogicalTestDefinition));
            localElementDictionary.Add(XName.Get("BeginsWith", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("Contains", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("In", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalMultiTestDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FieldRefDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator FieldRefDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldRefDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FieldRefDefinition() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Alias {
            get {
                XAttribute x = this.Attribute(XName.Get("Alias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Alias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Ascending {
            get {
                XAttribute x = this.Attribute(XName.Get("Ascending", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Ascending", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CreateURL {
            get {
                XAttribute x = this.Attribute(XName.Get("CreateURL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CreateURL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayName {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Explicit {
            get {
                XAttribute x = this.Attribute(XName.Get("Explicit", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Explicit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Key {
            get {
                XAttribute x = this.Attribute(XName.Get("Key", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Key", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RefType {
            get {
                XAttribute x = this.Attribute(XName.Get("RefType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RefType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowField {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowField", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowField", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TextOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("TextOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TextOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Format {
            get {
                XAttribute x = this.Attribute(XName.Get("Format", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Format", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FieldRefDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldRefDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class ReferenceType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AVG",
                        "COUNT",
                        "MAX",
                        "MIN",
                        "SUM",
                        "STDEV",
                        "VAR"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ReferenceType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Value)*)
    /// </para>
    /// </summary>
    public partial class ValueDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ValueDefinition> ValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ValueDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ValueDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ValueDefinitions() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Value)*)
        /// </para>
        /// </summary>
        public ValueDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Value)*)
        /// </para>
        /// </summary>
        public IList<ValueDefinition> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<ValueDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Value", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<ValueDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Value", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ValueDefinition>(this.ValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ValueDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValueDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Value", "http://schemas.microsoft.com/sharepoint/"), typeof(ValueDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
    /// </para>
    /// </summary>
    public partial class ValueDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> TodayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> UserIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<QueryListProperty> ListPropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> NowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MonthField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> XMLField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ValueDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ValueDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ValueDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
        /// </para>
        /// </summary>
        public ValueDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
        /// </para>
        /// </summary>
        public IList<string> Today {
            get {
                if ((this.TodayField == null)) {
                    this.TodayField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Today", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.TodayField;
            }
            set {
                if ((value == null)) {
                    this.TodayField = null;
                }
                else {
                    if ((this.TodayField == null)) {
                        this.TodayField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Today", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.TodayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
        /// </para>
        /// </summary>
        public IList<string> UserID {
            get {
                if ((this.UserIDField == null)) {
                    this.UserIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.UserIDField;
            }
            set {
                if ((value == null)) {
                    this.UserIDField = null;
                }
                else {
                    if ((this.UserIDField == null)) {
                        this.UserIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.UserIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
        /// </para>
        /// </summary>
        public IList<QueryListProperty> ListProperty {
            get {
                if ((this.ListPropertyField == null)) {
                    this.ListPropertyField = new XTypedList<QueryListProperty>(this, LinqToXsdTypeManager.Instance, XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ListPropertyField;
            }
            set {
                if ((value == null)) {
                    this.ListPropertyField = null;
                }
                else {
                    if ((this.ListPropertyField == null)) {
                        this.ListPropertyField = XTypedList<QueryListProperty>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<QueryListProperty>(this.ListPropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
        /// </para>
        /// </summary>
        public IList<string> Now {
            get {
                if ((this.NowField == null)) {
                    this.NowField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Now", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.NowField;
            }
            set {
                if ((value == null)) {
                    this.NowField = null;
                }
                else {
                    if ((this.NowField == null)) {
                        this.NowField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Now", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.NowField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
        /// </para>
        /// </summary>
        public IList<string> Month {
            get {
                if ((this.MonthField == null)) {
                    this.MonthField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("Month", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MonthField;
            }
            set {
                if ((value == null)) {
                    this.MonthField = null;
                }
                else {
                    if ((this.MonthField == null)) {
                        this.MonthField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("Month", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MonthField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
        /// </para>
        /// </summary>
        public IList<string> XML {
            get {
                if ((this.XMLField == null)) {
                    this.XMLField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("XML", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.XMLField;
            }
            set {
                if ((value == null)) {
                    this.XMLField = null;
                }
                else {
                    if ((this.XMLField == null)) {
                        this.XMLField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("XML", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.XMLField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ValueDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValueDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Today", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryListProperty));
            localElementDictionary.Add(XName.Get("Now", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("Month", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("XML", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldRef)
    /// </para>
    /// </summary>
    public partial class LogicalNullDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator LogicalNullDefinition(XElement xe) { return XTypedServices.ToXTypedElement<LogicalNullDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LogicalNullDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldRef)
        /// </para>
        /// </summary>
        public LogicalNullDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FieldRef)
        /// </para>
        /// </summary>
        public FieldRefDefinition FieldRef {
            get {
                XElement x = this.GetElement(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                return ((FieldRefDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LogicalNullDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LogicalNullDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldRefDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
    /// </para>
    /// </summary>
    public partial class ExtendedLogicalJoinDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> EqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> GeqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> GtField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> LeqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> LtField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> NeqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExtendedLogicalJoinDefinition> AndField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExtendedLogicalJoinDefinition> OrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalNullDefinition> IsNullField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalNullDefinition> IsNotNullField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> DateRangesOverlapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> BeginsWithField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> ContainsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MembershipDefinition> MembershipField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalMultiTestDefinition> @InField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ExtendedLogicalJoinDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ExtendedLogicalJoinDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ExtendedLogicalJoinDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public ExtendedLogicalJoinDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> Eq {
            get {
                if ((this.EqField == null)) {
                    this.EqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Eq", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.EqField;
            }
            set {
                if ((value == null)) {
                    this.EqField = null;
                }
                else {
                    if ((this.EqField == null)) {
                        this.EqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Eq", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.EqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> Geq {
            get {
                if ((this.GeqField == null)) {
                    this.GeqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Geq", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.GeqField;
            }
            set {
                if ((value == null)) {
                    this.GeqField = null;
                }
                else {
                    if ((this.GeqField == null)) {
                        this.GeqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Geq", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.GeqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> Gt {
            get {
                if ((this.GtField == null)) {
                    this.GtField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Gt", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.GtField;
            }
            set {
                if ((value == null)) {
                    this.GtField = null;
                }
                else {
                    if ((this.GtField == null)) {
                        this.GtField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Gt", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.GtField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> Leq {
            get {
                if ((this.LeqField == null)) {
                    this.LeqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Leq", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.LeqField;
            }
            set {
                if ((value == null)) {
                    this.LeqField = null;
                }
                else {
                    if ((this.LeqField == null)) {
                        this.LeqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Leq", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.LeqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> Lt {
            get {
                if ((this.LtField == null)) {
                    this.LtField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Lt", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.LtField;
            }
            set {
                if ((value == null)) {
                    this.LtField = null;
                }
                else {
                    if ((this.LtField == null)) {
                        this.LtField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Lt", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.LtField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> Neq {
            get {
                if ((this.NeqField == null)) {
                    this.NeqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Neq", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.NeqField;
            }
            set {
                if ((value == null)) {
                    this.NeqField = null;
                }
                else {
                    if ((this.NeqField == null)) {
                        this.NeqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Neq", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.NeqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<ExtendedLogicalJoinDefinition> And {
            get {
                if ((this.AndField == null)) {
                    this.AndField = new XTypedList<ExtendedLogicalJoinDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("And", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.AndField;
            }
            set {
                if ((value == null)) {
                    this.AndField = null;
                }
                else {
                    if ((this.AndField == null)) {
                        this.AndField = XTypedList<ExtendedLogicalJoinDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("And", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ExtendedLogicalJoinDefinition>(this.AndField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<ExtendedLogicalJoinDefinition> Or {
            get {
                if ((this.OrField == null)) {
                    this.OrField = new XTypedList<ExtendedLogicalJoinDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Or", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.OrField;
            }
            set {
                if ((value == null)) {
                    this.OrField = null;
                }
                else {
                    if ((this.OrField == null)) {
                        this.OrField = XTypedList<ExtendedLogicalJoinDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Or", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ExtendedLogicalJoinDefinition>(this.OrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalNullDefinition> IsNull {
            get {
                if ((this.IsNullField == null)) {
                    this.IsNullField = new XTypedList<LogicalNullDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("IsNull", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.IsNullField;
            }
            set {
                if ((value == null)) {
                    this.IsNullField = null;
                }
                else {
                    if ((this.IsNullField == null)) {
                        this.IsNullField = XTypedList<LogicalNullDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IsNull", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalNullDefinition>(this.IsNullField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalNullDefinition> IsNotNull {
            get {
                if ((this.IsNotNullField == null)) {
                    this.IsNotNullField = new XTypedList<LogicalNullDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("IsNotNull", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.IsNotNullField;
            }
            set {
                if ((value == null)) {
                    this.IsNotNullField = null;
                }
                else {
                    if ((this.IsNotNullField == null)) {
                        this.IsNotNullField = XTypedList<LogicalNullDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IsNotNull", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalNullDefinition>(this.IsNotNullField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> DateRangesOverlap {
            get {
                if ((this.DateRangesOverlapField == null)) {
                    this.DateRangesOverlapField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("DateRangesOverlap", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.DateRangesOverlapField;
            }
            set {
                if ((value == null)) {
                    this.DateRangesOverlapField = null;
                }
                else {
                    if ((this.DateRangesOverlapField == null)) {
                        this.DateRangesOverlapField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DateRangesOverlap", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.DateRangesOverlapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> BeginsWith {
            get {
                if ((this.BeginsWithField == null)) {
                    this.BeginsWithField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("BeginsWith", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.BeginsWithField;
            }
            set {
                if ((value == null)) {
                    this.BeginsWithField = null;
                }
                else {
                    if ((this.BeginsWithField == null)) {
                        this.BeginsWithField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("BeginsWith", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.BeginsWithField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalTestDefinition> Contains {
            get {
                if ((this.ContainsField == null)) {
                    this.ContainsField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Contains", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ContainsField;
            }
            set {
                if ((value == null)) {
                    this.ContainsField = null;
                }
                else {
                    if ((this.ContainsField == null)) {
                        this.ContainsField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Contains", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.ContainsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<MembershipDefinition> Membership {
            get {
                if ((this.MembershipField == null)) {
                    this.MembershipField = new XTypedList<MembershipDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Membership", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MembershipField;
            }
            set {
                if ((value == null)) {
                    this.MembershipField = null;
                }
                else {
                    if ((this.MembershipField == null)) {
                        this.MembershipField = XTypedList<MembershipDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Membership", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<MembershipDefinition>(this.MembershipField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | @In)*)
        /// </para>
        /// </summary>
        public IList<LogicalMultiTestDefinition> @In {
            get {
                if ((this.@InField == null)) {
                    this.@InField = new XTypedList<LogicalMultiTestDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("In", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.@InField;
            }
            set {
                if ((value == null)) {
                    this.@InField = null;
                }
                else {
                    if ((this.@InField == null)) {
                        this.@InField = XTypedList<LogicalMultiTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("In", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LogicalMultiTestDefinition>(this.@InField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ExtendedLogicalJoinDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExtendedLogicalJoinDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Eq", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("Geq", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("Gt", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("Leq", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("Lt", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("Neq", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("And", "http://schemas.microsoft.com/sharepoint/"), typeof(ExtendedLogicalJoinDefinition));
            localElementDictionary.Add(XName.Get("Or", "http://schemas.microsoft.com/sharepoint/"), typeof(ExtendedLogicalJoinDefinition));
            localElementDictionary.Add(XName.Get("IsNull", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalNullDefinition));
            localElementDictionary.Add(XName.Get("IsNotNull", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalNullDefinition));
            localElementDictionary.Add(XName.Get("DateRangesOverlap", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("BeginsWith", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("Contains", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalTestDefinition));
            localElementDictionary.Add(XName.Get("Membership", "http://schemas.microsoft.com/sharepoint/"), typeof(MembershipDefinition));
            localElementDictionary.Add(XName.Get("In", "http://schemas.microsoft.com/sharepoint/"), typeof(LogicalMultiTestDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldRef*)
    /// </para>
    /// </summary>
    public partial class FieldRefDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldRefDefinition> FieldRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FieldRefDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<FieldRefDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FieldRefDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldRef*)
        /// </para>
        /// </summary>
        public FieldRefDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FieldRef*)
        /// </para>
        /// </summary>
        public IList<FieldRefDefinition> FieldRef {
            get {
                if ((this.FieldRefField == null)) {
                    this.FieldRefField = new XTypedList<FieldRefDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldRefField;
            }
            set {
                if ((value == null)) {
                    this.FieldRefField = null;
                }
                else {
                    if ((this.FieldRefField == null)) {
                        this.FieldRefField = XTypedList<FieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FieldRefDefinition>(this.FieldRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FieldRefDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldRefDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldRefDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldRef*)
    /// </para>
    /// </summary>
    public partial class OrderByDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldRefDefinition> FieldRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator OrderByDefinition(XElement xe) { return XTypedServices.ToXTypedElement<OrderByDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrderByDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldRef*)
        /// </para>
        /// </summary>
        public OrderByDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FieldRef*)
        /// </para>
        /// </summary>
        public IList<FieldRefDefinition> FieldRef {
            get {
                if ((this.FieldRefField == null)) {
                    this.FieldRefField = new XTypedList<FieldRefDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldRefField;
            }
            set {
                if ((value == null)) {
                    this.FieldRefField = null;
                }
                else {
                    if ((this.FieldRefField == null)) {
                        this.FieldRefField = XTypedList<FieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FieldRefDefinition>(this.FieldRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UseIndexForOrderBy {
            get {
                XAttribute x = this.Attribute(XName.Get("UseIndexForOrderBy", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UseIndexForOrderBy", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Override {
            get {
                XAttribute x = this.Attribute(XName.Get("Override", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Override", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OrderByDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrderByDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldRefDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Field*)
    /// </para>
    /// </summary>
    public partial class RowDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldDataDefinition> FieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RowDefinition(XElement xe) { return XTypedServices.ToXTypedElement<RowDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RowDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Field*)
        /// </para>
        /// </summary>
        public RowDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Field*)
        /// </para>
        /// </summary>
        public IList<FieldDataDefinition> Field {
            get {
                if ((this.FieldField == null)) {
                    this.FieldField = new XTypedList<FieldDataDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldField;
            }
            set {
                if ((value == null)) {
                    this.FieldField = null;
                }
                else {
                    if ((this.FieldField == null)) {
                        this.FieldField = XTypedList<FieldDataDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FieldDataDefinition>(this.FieldField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RowDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RowDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldDataDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class FieldDataDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator FieldDataDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldDataDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FieldDataDefinition() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FieldDataDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldDataDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Row*)
    /// </para>
    /// </summary>
    public partial class RowDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RowDefinition> RowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RowDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<RowDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RowDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Row", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Row*)
        /// </para>
        /// </summary>
        public RowDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Row*)
        /// </para>
        /// </summary>
        public IList<RowDefinition> Row {
            get {
                if ((this.RowField == null)) {
                    this.RowField = new XTypedList<RowDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Row", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.RowField;
            }
            set {
                if ((value == null)) {
                    this.RowField = null;
                }
                else {
                    if ((this.RowField == null)) {
                        this.RowField = XTypedList<RowDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Row", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<RowDefinition>(this.RowField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RowDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RowDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Row", "http://schemas.microsoft.com/sharepoint/"), typeof(RowDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class EmptyQueryDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator EmptyQueryDefinition(XElement xe) { return XTypedServices.ToXTypedElement<EmptyQueryDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public EmptyQueryDefinition() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("EmptyQueryDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EmptyQueryDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SimpleFieldRef : XTypedElement, IXMetaData {
        
         public static explicit operator SimpleFieldRef(XElement xe) { return XTypedServices.ToXTypedElement<SimpleFieldRef>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SimpleFieldRef() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SimpleFieldRef", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SimpleFieldRef>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class LookupColumnDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator LookupColumnDefinition(XElement xe) { return XTypedServices.ToXTypedElement<LookupColumnDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public LookupColumnDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HTMLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("HTMLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HTMLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string StripWS {
            get {
                XAttribute x = this.Attribute(XName.Get("StripWS", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("StripWS", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowField {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowField", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowField", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncodeAsURL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncodeAsURL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string IncludeVersions {
            get {
                XAttribute x = this.Attribute(XName.Get("IncludeVersions", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IncludeVersions", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LookupColumnDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LookupColumnDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class QueryColumnDefinition : global::Microsoft.Schemas.SharePoint.LookupColumnDefinition, IXMetaData {
        
         public static explicit operator QueryColumnDefinition(XElement xe) { return XTypedServices.ToXTypedElement<QueryColumnDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public QueryColumnDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Default {
            get {
                XAttribute x = this.Attribute(XName.Get("Default", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Default", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public new string URLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Format {
            get {
                XAttribute x = this.Attribute(XName.Get("Format", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Format", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryColumnDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryColumnDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class QueryGetVarDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator QueryGetVarDefinition(XElement xe) { return XTypedServices.ToXTypedElement<QueryGetVarDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public QueryGetVarDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HTMLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("HTMLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HTMLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryGetVarDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryGetVarDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class QueryListProperty : XTypedElement, IXMetaData {
        
         public static explicit operator QueryListProperty(XElement xe) { return XTypedServices.ToXTypedElement<QueryListProperty>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public QueryListProperty() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncodeAsURL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncodeAsURL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Select {
            get {
                XAttribute x = this.Attribute(XName.Get("Select", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Select", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QueryListProperty", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryListProperty>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldRef | Value | XML)*)
    /// </para>
    /// </summary>
    public partial class MembershipDefinition : global::Microsoft.Schemas.SharePoint.LogicalTestDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator MembershipDefinition(XElement xe) { return XTypedServices.ToXTypedElement<MembershipDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MembershipDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldRef | Value | XML)*)
        /// </para>
        /// </summary>
        public MembershipDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MembershipDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MembershipDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldRefDefinition));
            localElementDictionary.Add(XName.Get("Value", "http://schemas.microsoft.com/sharepoint/"), typeof(ValueDefinition));
            localElementDictionary.Add(XName.Get("XML", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldRef | Value | XML)*)
    /// </para>
    /// </summary>
    public partial class GroupByDefinition : global::Microsoft.Schemas.SharePoint.LogicalTestDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator GroupByDefinition(XElement xe) { return XTypedServices.ToXTypedElement<GroupByDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroupByDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldRef | Value | XML)*)
        /// </para>
        /// </summary>
        public GroupByDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Collapse {
            get {
                XAttribute x = this.Attribute(XName.Get("Collapse", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Collapse", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupByDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroupByDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldRefDefinition));
            localElementDictionary.Add(XName.Get("Value", "http://schemas.microsoft.com/sharepoint/"), typeof(ValueDefinition));
            localElementDictionary.Add(XName.Get("XML", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldRef | Value)*)
    /// </para>
    /// </summary>
    public partial class UnlimitedLogicalTestDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldRefDefinition> FieldRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ValueDefinition> ValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator UnlimitedLogicalTestDefinition(XElement xe) { return XTypedServices.ToXTypedElement<UnlimitedLogicalTestDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnlimitedLogicalTestDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldRef | Value)*)
        /// </para>
        /// </summary>
        public UnlimitedLogicalTestDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Value)*)
        /// </para>
        /// </summary>
        public IList<FieldRefDefinition> FieldRef {
            get {
                if ((this.FieldRefField == null)) {
                    this.FieldRefField = new XTypedList<FieldRefDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldRefField;
            }
            set {
                if ((value == null)) {
                    this.FieldRefField = null;
                }
                else {
                    if ((this.FieldRefField == null)) {
                        this.FieldRefField = XTypedList<FieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FieldRefDefinition>(this.FieldRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Value)*)
        /// </para>
        /// </summary>
        public IList<ValueDefinition> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<ValueDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Value", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<ValueDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Value", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ValueDefinition>(this.ValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UnlimitedLogicalTestDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnlimitedLogicalTestDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldRefDefinition));
            localElementDictionary.Add(XName.Get("Value", "http://schemas.microsoft.com/sharepoint/"), typeof(ValueDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class CamlViewRoot : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator CamlViewRoot(XElement xe) { return XTypedServices.ToXTypedElement<CamlViewRoot>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CamlViewRoot() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public CamlViewRoot() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CamlViewRoot", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CamlViewRoot>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Column2", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Counter", "http://schemas.microsoft.com/sharepoint/"), typeof(CounterDefinition));
            localElementDictionary.Add(XName.Get("CurrentRights", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(XName.Get("FieldPrefix", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("FieldProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("FieldSwitch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("FilterLink", "http://schemas.microsoft.com/sharepoint/"), typeof(FilterLinkDefinition));
            localElementDictionary.Add(XName.Get("GetFileExtension", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(GetVarDefinition));
            localElementDictionary.Add(XName.Get("HTML", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlContentDefinition));
            localElementDictionary.Add(XName.Get("HttpHost", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpHostDefinition));
            localElementDictionary.Add(XName.Get("HttpPath", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("HttpVDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpVDirDefinition));
            localElementDictionary.Add(XName.Get("ID", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfEqual", "http://schemas.microsoft.com/sharepoint/"), typeof(IfEqualDefinition));
            localElementDictionary.Add(XName.Get("IfNeg", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNegDefinition));
            localElementDictionary.Add(XName.Get("IfNew", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNewDefinition));
            localElementDictionary.Add(XName.Get("IfSubString", "http://schemas.microsoft.com/sharepoint/"), typeof(IfSubStringDefinition));
            localElementDictionary.Add(XName.Get("Length", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("Limit", "http://schemas.microsoft.com/sharepoint/"), typeof(LimitDefinition));
            localElementDictionary.Add(XName.Get("List", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrlDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ListPropertyDefinition));
            localElementDictionary.Add(XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"), typeof(LookupColumnDefinition));
            localElementDictionary.Add(XName.Get("MapToAll", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToIcon", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("PageUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("ScriptQuote", "http://schemas.microsoft.com/sharepoint/"), typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(XName.Get("SelectionOptions", "http://schemas.microsoft.com/sharepoint/"), typeof(SelectOptionsDefinition));
            localElementDictionary.Add(XName.Get("ServerProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ServerPropertyDefinition));
            localElementDictionary.Add(XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(SetVarDefinition));
            localElementDictionary.Add(XName.Get("Switch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("ThreadStamp", "http://schemas.microsoft.com/sharepoint/"), typeof(ThreadStampDefinition));
            localElementDictionary.Add(XName.Get("URL", "http://schemas.microsoft.com/sharepoint/"), typeof(URLDefinition));
            localElementDictionary.Add(XName.Get("UrlDirName", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("UrlBaseName", "http://schemas.microsoft.com/sharepoint/"), typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(XName.Get("MeetingProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(XName.Get("ProjectProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"), typeof(UserIDDefinition));
            localElementDictionary.Add(XName.Get("FieldSortParams", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("WebQueryInfo", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Identity", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfHasRights", "http://schemas.microsoft.com/sharepoint/"), typeof(IfHasRightsDefinition));
            localElementDictionary.Add(XName.Get("MapToControl", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("ForEach", "http://schemas.microsoft.com/sharepoint/"), typeof(ForEachElement));
            localElementDictionary.Add(XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToContentType", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class HtmlRenderingElement : XTypedElement, IXMetaData {
        
         public static explicit operator HtmlRenderingElement(XElement xe) { return XTypedServices.ToXTypedElement<HtmlRenderingElement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public HtmlRenderingElement() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AutoHyperLink {
            get {
                XAttribute x = this.Attribute(XName.Get("AutoHyperLink", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AutoHyperLink", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HTMLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("HTMLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HTMLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AutoNewLine {
            get {
                XAttribute x = this.Attribute(XName.Get("AutoNewLine", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AutoNewLine", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncodeAsURL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncodeAsURL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Default {
            get {
                XAttribute x = this.Attribute(XName.Get("Default", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Default", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string StripWS {
            get {
                XAttribute x = this.Attribute(XName.Get("StripWS", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("StripWS", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ExpandXML {
            get {
                XAttribute x = this.Attribute(XName.Get("ExpandXML", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ExpandXML", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AutoHyperLinkNoEncoding {
            get {
                XAttribute x = this.Attribute(XName.Get("AutoHyperLinkNoEncoding", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AutoHyperLinkNoEncoding", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HtmlRenderingElement", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HtmlRenderingElement>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class HtmlDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
         public static explicit operator HtmlDefinition(XElement xe) { return XTypedServices.ToXTypedElement<HtmlDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HtmlDefinition() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public HtmlDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HtmlDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HtmlDefinition>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 2)));
            validationStates = new FSM(1, new Set<int>(2), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class HtmlContentDefinition : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator HtmlContentDefinition(XElement xe) { return XTypedServices.ToXTypedElement<HtmlContentDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HtmlContentDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public HtmlContentDefinition() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HtmlContentDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HtmlContentDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Column2", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Counter", "http://schemas.microsoft.com/sharepoint/"), typeof(CounterDefinition));
            localElementDictionary.Add(XName.Get("CurrentRights", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(XName.Get("FieldPrefix", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("FieldProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("FieldSwitch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("FilterLink", "http://schemas.microsoft.com/sharepoint/"), typeof(FilterLinkDefinition));
            localElementDictionary.Add(XName.Get("GetFileExtension", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(GetVarDefinition));
            localElementDictionary.Add(XName.Get("HTML", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlContentDefinition));
            localElementDictionary.Add(XName.Get("HttpHost", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpHostDefinition));
            localElementDictionary.Add(XName.Get("HttpPath", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("HttpVDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpVDirDefinition));
            localElementDictionary.Add(XName.Get("ID", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfEqual", "http://schemas.microsoft.com/sharepoint/"), typeof(IfEqualDefinition));
            localElementDictionary.Add(XName.Get("IfNeg", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNegDefinition));
            localElementDictionary.Add(XName.Get("IfNew", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNewDefinition));
            localElementDictionary.Add(XName.Get("IfSubString", "http://schemas.microsoft.com/sharepoint/"), typeof(IfSubStringDefinition));
            localElementDictionary.Add(XName.Get("Length", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("Limit", "http://schemas.microsoft.com/sharepoint/"), typeof(LimitDefinition));
            localElementDictionary.Add(XName.Get("List", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrlDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ListPropertyDefinition));
            localElementDictionary.Add(XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"), typeof(LookupColumnDefinition));
            localElementDictionary.Add(XName.Get("MapToAll", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToIcon", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("PageUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("ScriptQuote", "http://schemas.microsoft.com/sharepoint/"), typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(XName.Get("SelectionOptions", "http://schemas.microsoft.com/sharepoint/"), typeof(SelectOptionsDefinition));
            localElementDictionary.Add(XName.Get("ServerProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ServerPropertyDefinition));
            localElementDictionary.Add(XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(SetVarDefinition));
            localElementDictionary.Add(XName.Get("Switch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("ThreadStamp", "http://schemas.microsoft.com/sharepoint/"), typeof(ThreadStampDefinition));
            localElementDictionary.Add(XName.Get("URL", "http://schemas.microsoft.com/sharepoint/"), typeof(URLDefinition));
            localElementDictionary.Add(XName.Get("UrlDirName", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("UrlBaseName", "http://schemas.microsoft.com/sharepoint/"), typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(XName.Get("MeetingProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(XName.Get("ProjectProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"), typeof(UserIDDefinition));
            localElementDictionary.Add(XName.Get("FieldSortParams", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("WebQueryInfo", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Identity", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfHasRights", "http://schemas.microsoft.com/sharepoint/"), typeof(IfHasRightsDefinition));
            localElementDictionary.Add(XName.Get("MapToControl", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("ForEach", "http://schemas.microsoft.com/sharepoint/"), typeof(ForEachElement));
            localElementDictionary.Add(XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToContentType", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FieldRefViewDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator FieldRefViewDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldRefViewDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FieldRefViewDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Ascending {
            get {
                XAttribute x = this.Attribute(XName.Get("Ascending", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Ascending", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TextOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("TextOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TextOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CreateURL {
            get {
                XAttribute x = this.Attribute(XName.Get("CreateURL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CreateURL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayName {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Explicit {
            get {
                XAttribute x = this.Attribute(XName.Get("Explicit", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Explicit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Key {
            get {
                XAttribute x = this.Attribute(XName.Get("Key", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Key", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FieldRefViewDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldRefViewDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Method)
    /// </para>
    /// </summary>
    public partial class BatchDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator BatchDefinition(XElement xe) { return XTypedServices.ToXTypedElement<BatchDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BatchDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Method", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Method)
        /// </para>
        /// </summary>
        public BatchDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Method)
        /// </para>
        /// </summary>
        public MethodDefinition Method {
            get {
                XElement x = this.GetElement(XName.Get("Method", "http://schemas.microsoft.com/sharepoint/"));
                return ((MethodDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Method", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OnError {
            get {
                XAttribute x = this.Attribute(XName.Get("OnError", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OnError", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> ListVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("ListVersion", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ListVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ViewName {
            get {
                XAttribute x = this.Attribute(XName.Get("ViewName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ViewName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("BatchDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BatchDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Method", "http://schemas.microsoft.com/sharepoint/"), typeof(MethodDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class ErrorHandling {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Return",
                        "Continue"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ErrorHandling() {
        }
    }
    
    public sealed class UpdateMethod {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Delete",
                        "New",
                        "Update"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private UpdateMethod() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SetVar?, SetList?)
    /// </para>
    /// </summary>
    public partial class MethodDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator MethodDefinition(XElement xe) { return XTypedServices.ToXTypedElement<MethodDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MethodDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SetVar?, SetList?)
        /// </para>
        /// </summary>
        public MethodDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SetVar?, SetList?)
        /// </para>
        /// </summary>
        public SetVarDefinition SetVar {
            get {
                XElement x = this.GetElement(XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"));
                return ((SetVarDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SetVar?, SetList?)
        /// </para>
        /// </summary>
        public SetListDefinition SetList {
            get {
                XElement x = this.GetElement(XName.Get("SetList", "http://schemas.microsoft.com/sharepoint/"));
                return ((SetListDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("SetList", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Cmd {
            get {
                XAttribute x = this.Attribute(XName.Get("Cmd", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Cmd", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MethodDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MethodDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(SetVarDefinition));
            localElementDictionary.Add(XName.Get("SetList", "http://schemas.microsoft.com/sharepoint/"), typeof(SetListDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class SetListDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
         public static explicit operator SetListDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SetListDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SetListDefinition() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public SetListDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Scope {
            get {
                XAttribute x = this.Attribute(XName.Get("Scope", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Scope", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PreserveContext {
            get {
                XAttribute x = this.Attribute(XName.Get("PreserveContext", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PreserveContext", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SetListDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SetListDefinition>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 2)));
            validationStates = new FSM(1, new Set<int>(2), transitions);
        }
    }
    
    public sealed class RequestParameter {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Request"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RequestParameter() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class SetVarDefinition : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SetVarDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SetVarDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SetVarDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public SetVarDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ID1 {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Scope {
            get {
                XAttribute x = this.Attribute(XName.Get("Scope", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Scope", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Value {
            get {
                XAttribute x = this.Attribute(XName.Get("Value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SetVarDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SetVarDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Column2", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Counter", "http://schemas.microsoft.com/sharepoint/"), typeof(CounterDefinition));
            localElementDictionary.Add(XName.Get("CurrentRights", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(XName.Get("FieldPrefix", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("FieldProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("FieldSwitch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("FilterLink", "http://schemas.microsoft.com/sharepoint/"), typeof(FilterLinkDefinition));
            localElementDictionary.Add(XName.Get("GetFileExtension", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(GetVarDefinition));
            localElementDictionary.Add(XName.Get("HTML", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlContentDefinition));
            localElementDictionary.Add(XName.Get("HttpHost", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpHostDefinition));
            localElementDictionary.Add(XName.Get("HttpPath", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("HttpVDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpVDirDefinition));
            localElementDictionary.Add(XName.Get("ID", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfEqual", "http://schemas.microsoft.com/sharepoint/"), typeof(IfEqualDefinition));
            localElementDictionary.Add(XName.Get("IfNeg", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNegDefinition));
            localElementDictionary.Add(XName.Get("IfNew", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNewDefinition));
            localElementDictionary.Add(XName.Get("IfSubString", "http://schemas.microsoft.com/sharepoint/"), typeof(IfSubStringDefinition));
            localElementDictionary.Add(XName.Get("Length", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("Limit", "http://schemas.microsoft.com/sharepoint/"), typeof(LimitDefinition));
            localElementDictionary.Add(XName.Get("List", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrlDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ListPropertyDefinition));
            localElementDictionary.Add(XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"), typeof(LookupColumnDefinition));
            localElementDictionary.Add(XName.Get("MapToAll", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToIcon", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("PageUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("ScriptQuote", "http://schemas.microsoft.com/sharepoint/"), typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(XName.Get("SelectionOptions", "http://schemas.microsoft.com/sharepoint/"), typeof(SelectOptionsDefinition));
            localElementDictionary.Add(XName.Get("ServerProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ServerPropertyDefinition));
            localElementDictionary.Add(XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(SetVarDefinition));
            localElementDictionary.Add(XName.Get("Switch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("ThreadStamp", "http://schemas.microsoft.com/sharepoint/"), typeof(ThreadStampDefinition));
            localElementDictionary.Add(XName.Get("URL", "http://schemas.microsoft.com/sharepoint/"), typeof(URLDefinition));
            localElementDictionary.Add(XName.Get("UrlDirName", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("UrlBaseName", "http://schemas.microsoft.com/sharepoint/"), typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(XName.Get("MeetingProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(XName.Get("ProjectProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"), typeof(UserIDDefinition));
            localElementDictionary.Add(XName.Get("FieldSortParams", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("WebQueryInfo", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Identity", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfHasRights", "http://schemas.microsoft.com/sharepoint/"), typeof(IfHasRightsDefinition));
            localElementDictionary.Add(XName.Get("MapToControl", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("ForEach", "http://schemas.microsoft.com/sharepoint/"), typeof(ForEachElement));
            localElementDictionary.Add(XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToContentType", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class CamlViewElement : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<QueryColumnDefinition> ColumnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<QueryColumnDefinition> Column2Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CounterDefinition> CounterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmptyElement> CurrentRightsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldViewReferenceDefinition> FieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmptyElement> FieldPrefixField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldPropertyDefinition> FieldPropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CamlViewElement> FieldsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SwitchDefinition> FieldSwitchField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FilterLinkDefinition> FilterLinkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<XTypedElement> GetFileExtensionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GetVarDefinition> GetVarField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HtmlContentDefinition> HTMLField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HttpHostDefinition> HttpHostField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HttpPathDefinition> HttpPathField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HttpVDirDefinition> HttpVDirField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmptyElement> IDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IfEqualDefinition> IfEqualField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IfNegDefinition> IfNegField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IfNewDefinition> IfNewField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IfSubStringDefinition> IfSubStringField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<XTypedElement> LengthField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LimitDefinition> LimitField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmptyElement> ListField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmptyElement> ListUrlField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HttpPathDefinition> ListUrlDirField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ListPropertyDefinition> ListPropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LookupColumnDefinition> LookupColumnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CamlViewElement> MapToAllField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CamlViewElement> MapToIconField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HtmlRenderingElement> PageUrlField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldPropertyDefinition> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ScriptQuoteDefinition> ScriptQuoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SelectOptionsDefinition> SelectionOptionsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ServerPropertyDefinition> ServerPropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SetVarDefinition> SetVarField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SwitchDefinition> @SwitchField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ThreadStampDefinition> ThreadStampField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<URLDefinition> URLField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<XTypedElement> UrlDirNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UrlBaseNameDefinition> UrlBaseNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MeetingPropertyDefinition> MeetingPropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProjectPropertyDefinition> ProjectPropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserIDDefinition> UserIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HtmlRenderingElement> FieldSortParamsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmptyElement> WebQueryInfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmptyElement> IdentityField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IfHasRightsDefinition> IfHasRightsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CamlViewElement> MapToControlField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ForEachElement> @ForEachField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CamlViewElement> ContentTypesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CamlViewElement> MapToContentTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator CamlViewElement(XElement xe) { return XTypedServices.ToXTypedElement<CamlViewElement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CamlViewElement() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public CamlViewElement() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<QueryColumnDefinition> Column {
            get {
                if ((this.ColumnField == null)) {
                    this.ColumnField = new XTypedList<QueryColumnDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ColumnField;
            }
            set {
                if ((value == null)) {
                    this.ColumnField = null;
                }
                else {
                    if ((this.ColumnField == null)) {
                        this.ColumnField = XTypedList<QueryColumnDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<QueryColumnDefinition>(this.ColumnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<QueryColumnDefinition> Column2 {
            get {
                if ((this.Column2Field == null)) {
                    this.Column2Field = new XTypedList<QueryColumnDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Column2", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.Column2Field;
            }
            set {
                if ((value == null)) {
                    this.Column2Field = null;
                }
                else {
                    if ((this.Column2Field == null)) {
                        this.Column2Field = XTypedList<QueryColumnDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Column2", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<QueryColumnDefinition>(this.Column2Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<CounterDefinition> Counter {
            get {
                if ((this.CounterField == null)) {
                    this.CounterField = new XTypedList<CounterDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Counter", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.CounterField;
            }
            set {
                if ((value == null)) {
                    this.CounterField = null;
                }
                else {
                    if ((this.CounterField == null)) {
                        this.CounterField = XTypedList<CounterDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Counter", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CounterDefinition>(this.CounterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<EmptyElement> CurrentRights {
            get {
                if ((this.CurrentRightsField == null)) {
                    this.CurrentRightsField = new XTypedList<EmptyElement>(this, LinqToXsdTypeManager.Instance, XName.Get("CurrentRights", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.CurrentRightsField;
            }
            set {
                if ((value == null)) {
                    this.CurrentRightsField = null;
                }
                else {
                    if ((this.CurrentRightsField == null)) {
                        this.CurrentRightsField = XTypedList<EmptyElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CurrentRights", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<EmptyElement>(this.CurrentRightsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<FieldViewReferenceDefinition> Field {
            get {
                if ((this.FieldField == null)) {
                    this.FieldField = new XTypedList<FieldViewReferenceDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldField;
            }
            set {
                if ((value == null)) {
                    this.FieldField = null;
                }
                else {
                    if ((this.FieldField == null)) {
                        this.FieldField = XTypedList<FieldViewReferenceDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FieldViewReferenceDefinition>(this.FieldField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<EmptyElement> FieldPrefix {
            get {
                if ((this.FieldPrefixField == null)) {
                    this.FieldPrefixField = new XTypedList<EmptyElement>(this, LinqToXsdTypeManager.Instance, XName.Get("FieldPrefix", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldPrefixField;
            }
            set {
                if ((value == null)) {
                    this.FieldPrefixField = null;
                }
                else {
                    if ((this.FieldPrefixField == null)) {
                        this.FieldPrefixField = XTypedList<EmptyElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FieldPrefix", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<EmptyElement>(this.FieldPrefixField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<FieldPropertyDefinition> FieldProperty {
            get {
                if ((this.FieldPropertyField == null)) {
                    this.FieldPropertyField = new XTypedList<FieldPropertyDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("FieldProperty", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldPropertyField;
            }
            set {
                if ((value == null)) {
                    this.FieldPropertyField = null;
                }
                else {
                    if ((this.FieldPropertyField == null)) {
                        this.FieldPropertyField = XTypedList<FieldPropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FieldProperty", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FieldPropertyDefinition>(this.FieldPropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<CamlViewElement> Fields {
            get {
                if ((this.FieldsField == null)) {
                    this.FieldsField = new XTypedList<CamlViewElement>(this, LinqToXsdTypeManager.Instance, XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldsField;
            }
            set {
                if ((value == null)) {
                    this.FieldsField = null;
                }
                else {
                    if ((this.FieldsField == null)) {
                        this.FieldsField = XTypedList<CamlViewElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CamlViewElement>(this.FieldsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<SwitchDefinition> FieldSwitch {
            get {
                if ((this.FieldSwitchField == null)) {
                    this.FieldSwitchField = new XTypedList<SwitchDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("FieldSwitch", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldSwitchField;
            }
            set {
                if ((value == null)) {
                    this.FieldSwitchField = null;
                }
                else {
                    if ((this.FieldSwitchField == null)) {
                        this.FieldSwitchField = XTypedList<SwitchDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FieldSwitch", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<SwitchDefinition>(this.FieldSwitchField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<FilterLinkDefinition> FilterLink {
            get {
                if ((this.FilterLinkField == null)) {
                    this.FilterLinkField = new XTypedList<FilterLinkDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("FilterLink", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FilterLinkField;
            }
            set {
                if ((value == null)) {
                    this.FilterLinkField = null;
                }
                else {
                    if ((this.FilterLinkField == null)) {
                        this.FilterLinkField = XTypedList<FilterLinkDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FilterLink", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FilterLinkDefinition>(this.FilterLinkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<XTypedElement> GetFileExtension {
            get {
                if ((this.GetFileExtensionField == null)) {
                    this.GetFileExtensionField = new XTypedList<XTypedElement>(this, LinqToXsdTypeManager.Instance, XName.Get("GetFileExtension", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.GetFileExtensionField;
            }
            set {
                if ((value == null)) {
                    this.GetFileExtensionField = null;
                }
                else {
                    if ((this.GetFileExtensionField == null)) {
                        this.GetFileExtensionField = XTypedList<XTypedElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("GetFileExtension", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<XTypedElement>(this.GetFileExtensionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<GetVarDefinition> GetVar {
            get {
                if ((this.GetVarField == null)) {
                    this.GetVarField = new XTypedList<GetVarDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.GetVarField;
            }
            set {
                if ((value == null)) {
                    this.GetVarField = null;
                }
                else {
                    if ((this.GetVarField == null)) {
                        this.GetVarField = XTypedList<GetVarDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<GetVarDefinition>(this.GetVarField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<HtmlContentDefinition> HTML {
            get {
                if ((this.HTMLField == null)) {
                    this.HTMLField = new XTypedList<HtmlContentDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("HTML", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.HTMLField;
            }
            set {
                if ((value == null)) {
                    this.HTMLField = null;
                }
                else {
                    if ((this.HTMLField == null)) {
                        this.HTMLField = XTypedList<HtmlContentDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HTML", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<HtmlContentDefinition>(this.HTMLField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<HttpHostDefinition> HttpHost {
            get {
                if ((this.HttpHostField == null)) {
                    this.HttpHostField = new XTypedList<HttpHostDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("HttpHost", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.HttpHostField;
            }
            set {
                if ((value == null)) {
                    this.HttpHostField = null;
                }
                else {
                    if ((this.HttpHostField == null)) {
                        this.HttpHostField = XTypedList<HttpHostDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HttpHost", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<HttpHostDefinition>(this.HttpHostField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<HttpPathDefinition> HttpPath {
            get {
                if ((this.HttpPathField == null)) {
                    this.HttpPathField = new XTypedList<HttpPathDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("HttpPath", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.HttpPathField;
            }
            set {
                if ((value == null)) {
                    this.HttpPathField = null;
                }
                else {
                    if ((this.HttpPathField == null)) {
                        this.HttpPathField = XTypedList<HttpPathDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HttpPath", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<HttpPathDefinition>(this.HttpPathField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<HttpVDirDefinition> HttpVDir {
            get {
                if ((this.HttpVDirField == null)) {
                    this.HttpVDirField = new XTypedList<HttpVDirDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("HttpVDir", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.HttpVDirField;
            }
            set {
                if ((value == null)) {
                    this.HttpVDirField = null;
                }
                else {
                    if ((this.HttpVDirField == null)) {
                        this.HttpVDirField = XTypedList<HttpVDirDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HttpVDir", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<HttpVDirDefinition>(this.HttpVDirField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<EmptyElement> ID {
            get {
                if ((this.IDField == null)) {
                    this.IDField = new XTypedList<EmptyElement>(this, LinqToXsdTypeManager.Instance, XName.Get("ID", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.IDField;
            }
            set {
                if ((value == null)) {
                    this.IDField = null;
                }
                else {
                    if ((this.IDField == null)) {
                        this.IDField = XTypedList<EmptyElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ID", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<EmptyElement>(this.IDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<IfEqualDefinition> IfEqual {
            get {
                if ((this.IfEqualField == null)) {
                    this.IfEqualField = new XTypedList<IfEqualDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("IfEqual", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.IfEqualField;
            }
            set {
                if ((value == null)) {
                    this.IfEqualField = null;
                }
                else {
                    if ((this.IfEqualField == null)) {
                        this.IfEqualField = XTypedList<IfEqualDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IfEqual", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<IfEqualDefinition>(this.IfEqualField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<IfNegDefinition> IfNeg {
            get {
                if ((this.IfNegField == null)) {
                    this.IfNegField = new XTypedList<IfNegDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("IfNeg", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.IfNegField;
            }
            set {
                if ((value == null)) {
                    this.IfNegField = null;
                }
                else {
                    if ((this.IfNegField == null)) {
                        this.IfNegField = XTypedList<IfNegDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IfNeg", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<IfNegDefinition>(this.IfNegField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<IfNewDefinition> IfNew {
            get {
                if ((this.IfNewField == null)) {
                    this.IfNewField = new XTypedList<IfNewDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("IfNew", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.IfNewField;
            }
            set {
                if ((value == null)) {
                    this.IfNewField = null;
                }
                else {
                    if ((this.IfNewField == null)) {
                        this.IfNewField = XTypedList<IfNewDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IfNew", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<IfNewDefinition>(this.IfNewField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<IfSubStringDefinition> IfSubString {
            get {
                if ((this.IfSubStringField == null)) {
                    this.IfSubStringField = new XTypedList<IfSubStringDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("IfSubString", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.IfSubStringField;
            }
            set {
                if ((value == null)) {
                    this.IfSubStringField = null;
                }
                else {
                    if ((this.IfSubStringField == null)) {
                        this.IfSubStringField = XTypedList<IfSubStringDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IfSubString", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<IfSubStringDefinition>(this.IfSubStringField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<XTypedElement> Length {
            get {
                if ((this.LengthField == null)) {
                    this.LengthField = new XTypedList<XTypedElement>(this, LinqToXsdTypeManager.Instance, XName.Get("Length", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.LengthField;
            }
            set {
                if ((value == null)) {
                    this.LengthField = null;
                }
                else {
                    if ((this.LengthField == null)) {
                        this.LengthField = XTypedList<XTypedElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Length", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<XTypedElement>(this.LengthField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<LimitDefinition> Limit {
            get {
                if ((this.LimitField == null)) {
                    this.LimitField = new XTypedList<LimitDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Limit", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.LimitField;
            }
            set {
                if ((value == null)) {
                    this.LimitField = null;
                }
                else {
                    if ((this.LimitField == null)) {
                        this.LimitField = XTypedList<LimitDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Limit", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LimitDefinition>(this.LimitField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<EmptyElement> List {
            get {
                if ((this.ListField == null)) {
                    this.ListField = new XTypedList<EmptyElement>(this, LinqToXsdTypeManager.Instance, XName.Get("List", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ListField;
            }
            set {
                if ((value == null)) {
                    this.ListField = null;
                }
                else {
                    if ((this.ListField == null)) {
                        this.ListField = XTypedList<EmptyElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("List", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<EmptyElement>(this.ListField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<EmptyElement> ListUrl {
            get {
                if ((this.ListUrlField == null)) {
                    this.ListUrlField = new XTypedList<EmptyElement>(this, LinqToXsdTypeManager.Instance, XName.Get("ListUrl", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ListUrlField;
            }
            set {
                if ((value == null)) {
                    this.ListUrlField = null;
                }
                else {
                    if ((this.ListUrlField == null)) {
                        this.ListUrlField = XTypedList<EmptyElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ListUrl", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<EmptyElement>(this.ListUrlField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<HttpPathDefinition> ListUrlDir {
            get {
                if ((this.ListUrlDirField == null)) {
                    this.ListUrlDirField = new XTypedList<HttpPathDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ListUrlDir", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ListUrlDirField;
            }
            set {
                if ((value == null)) {
                    this.ListUrlDirField = null;
                }
                else {
                    if ((this.ListUrlDirField == null)) {
                        this.ListUrlDirField = XTypedList<HttpPathDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ListUrlDir", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<HttpPathDefinition>(this.ListUrlDirField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<ListPropertyDefinition> ListProperty {
            get {
                if ((this.ListPropertyField == null)) {
                    this.ListPropertyField = new XTypedList<ListPropertyDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ListPropertyField;
            }
            set {
                if ((value == null)) {
                    this.ListPropertyField = null;
                }
                else {
                    if ((this.ListPropertyField == null)) {
                        this.ListPropertyField = XTypedList<ListPropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ListPropertyDefinition>(this.ListPropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<LookupColumnDefinition> LookupColumn {
            get {
                if ((this.LookupColumnField == null)) {
                    this.LookupColumnField = new XTypedList<LookupColumnDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.LookupColumnField;
            }
            set {
                if ((value == null)) {
                    this.LookupColumnField = null;
                }
                else {
                    if ((this.LookupColumnField == null)) {
                        this.LookupColumnField = XTypedList<LookupColumnDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LookupColumnDefinition>(this.LookupColumnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<CamlViewElement> MapToAll {
            get {
                if ((this.MapToAllField == null)) {
                    this.MapToAllField = new XTypedList<CamlViewElement>(this, LinqToXsdTypeManager.Instance, XName.Get("MapToAll", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MapToAllField;
            }
            set {
                if ((value == null)) {
                    this.MapToAllField = null;
                }
                else {
                    if ((this.MapToAllField == null)) {
                        this.MapToAllField = XTypedList<CamlViewElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MapToAll", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CamlViewElement>(this.MapToAllField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<CamlViewElement> MapToIcon {
            get {
                if ((this.MapToIconField == null)) {
                    this.MapToIconField = new XTypedList<CamlViewElement>(this, LinqToXsdTypeManager.Instance, XName.Get("MapToIcon", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MapToIconField;
            }
            set {
                if ((value == null)) {
                    this.MapToIconField = null;
                }
                else {
                    if ((this.MapToIconField == null)) {
                        this.MapToIconField = XTypedList<CamlViewElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MapToIcon", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CamlViewElement>(this.MapToIconField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<HtmlRenderingElement> PageUrl {
            get {
                if ((this.PageUrlField == null)) {
                    this.PageUrlField = new XTypedList<HtmlRenderingElement>(this, LinqToXsdTypeManager.Instance, XName.Get("PageUrl", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.PageUrlField;
            }
            set {
                if ((value == null)) {
                    this.PageUrlField = null;
                }
                else {
                    if ((this.PageUrlField == null)) {
                        this.PageUrlField = XTypedList<HtmlRenderingElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PageUrl", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<HtmlRenderingElement>(this.PageUrlField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<FieldPropertyDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<FieldPropertyDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<FieldPropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FieldPropertyDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<ScriptQuoteDefinition> ScriptQuote {
            get {
                if ((this.ScriptQuoteField == null)) {
                    this.ScriptQuoteField = new XTypedList<ScriptQuoteDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ScriptQuote", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ScriptQuoteField;
            }
            set {
                if ((value == null)) {
                    this.ScriptQuoteField = null;
                }
                else {
                    if ((this.ScriptQuoteField == null)) {
                        this.ScriptQuoteField = XTypedList<ScriptQuoteDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ScriptQuote", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ScriptQuoteDefinition>(this.ScriptQuoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<SelectOptionsDefinition> SelectionOptions {
            get {
                if ((this.SelectionOptionsField == null)) {
                    this.SelectionOptionsField = new XTypedList<SelectOptionsDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("SelectionOptions", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.SelectionOptionsField;
            }
            set {
                if ((value == null)) {
                    this.SelectionOptionsField = null;
                }
                else {
                    if ((this.SelectionOptionsField == null)) {
                        this.SelectionOptionsField = XTypedList<SelectOptionsDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SelectionOptions", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<SelectOptionsDefinition>(this.SelectionOptionsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<ServerPropertyDefinition> ServerProperty {
            get {
                if ((this.ServerPropertyField == null)) {
                    this.ServerPropertyField = new XTypedList<ServerPropertyDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ServerProperty", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ServerPropertyField;
            }
            set {
                if ((value == null)) {
                    this.ServerPropertyField = null;
                }
                else {
                    if ((this.ServerPropertyField == null)) {
                        this.ServerPropertyField = XTypedList<ServerPropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ServerProperty", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ServerPropertyDefinition>(this.ServerPropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<SetVarDefinition> SetVar {
            get {
                if ((this.SetVarField == null)) {
                    this.SetVarField = new XTypedList<SetVarDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.SetVarField;
            }
            set {
                if ((value == null)) {
                    this.SetVarField = null;
                }
                else {
                    if ((this.SetVarField == null)) {
                        this.SetVarField = XTypedList<SetVarDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<SetVarDefinition>(this.SetVarField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<SwitchDefinition> @Switch {
            get {
                if ((this.@SwitchField == null)) {
                    this.@SwitchField = new XTypedList<SwitchDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Switch", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.@SwitchField;
            }
            set {
                if ((value == null)) {
                    this.@SwitchField = null;
                }
                else {
                    if ((this.@SwitchField == null)) {
                        this.@SwitchField = XTypedList<SwitchDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Switch", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<SwitchDefinition>(this.@SwitchField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<ThreadStampDefinition> ThreadStamp {
            get {
                if ((this.ThreadStampField == null)) {
                    this.ThreadStampField = new XTypedList<ThreadStampDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ThreadStamp", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ThreadStampField;
            }
            set {
                if ((value == null)) {
                    this.ThreadStampField = null;
                }
                else {
                    if ((this.ThreadStampField == null)) {
                        this.ThreadStampField = XTypedList<ThreadStampDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ThreadStamp", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ThreadStampDefinition>(this.ThreadStampField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<URLDefinition> URL {
            get {
                if ((this.URLField == null)) {
                    this.URLField = new XTypedList<URLDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("URL", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.URLField;
            }
            set {
                if ((value == null)) {
                    this.URLField = null;
                }
                else {
                    if ((this.URLField == null)) {
                        this.URLField = XTypedList<URLDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("URL", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<URLDefinition>(this.URLField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<XTypedElement> UrlDirName {
            get {
                if ((this.UrlDirNameField == null)) {
                    this.UrlDirNameField = new XTypedList<XTypedElement>(this, LinqToXsdTypeManager.Instance, XName.Get("UrlDirName", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.UrlDirNameField;
            }
            set {
                if ((value == null)) {
                    this.UrlDirNameField = null;
                }
                else {
                    if ((this.UrlDirNameField == null)) {
                        this.UrlDirNameField = XTypedList<XTypedElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UrlDirName", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<XTypedElement>(this.UrlDirNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<UrlBaseNameDefinition> UrlBaseName {
            get {
                if ((this.UrlBaseNameField == null)) {
                    this.UrlBaseNameField = new XTypedList<UrlBaseNameDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("UrlBaseName", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.UrlBaseNameField;
            }
            set {
                if ((value == null)) {
                    this.UrlBaseNameField = null;
                }
                else {
                    if ((this.UrlBaseNameField == null)) {
                        this.UrlBaseNameField = XTypedList<UrlBaseNameDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UrlBaseName", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<UrlBaseNameDefinition>(this.UrlBaseNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<MeetingPropertyDefinition> MeetingProperty {
            get {
                if ((this.MeetingPropertyField == null)) {
                    this.MeetingPropertyField = new XTypedList<MeetingPropertyDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("MeetingProperty", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MeetingPropertyField;
            }
            set {
                if ((value == null)) {
                    this.MeetingPropertyField = null;
                }
                else {
                    if ((this.MeetingPropertyField == null)) {
                        this.MeetingPropertyField = XTypedList<MeetingPropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MeetingProperty", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<MeetingPropertyDefinition>(this.MeetingPropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<ProjectPropertyDefinition> ProjectProperty {
            get {
                if ((this.ProjectPropertyField == null)) {
                    this.ProjectPropertyField = new XTypedList<ProjectPropertyDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ProjectProperty", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ProjectPropertyField;
            }
            set {
                if ((value == null)) {
                    this.ProjectPropertyField = null;
                }
                else {
                    if ((this.ProjectPropertyField == null)) {
                        this.ProjectPropertyField = XTypedList<ProjectPropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ProjectProperty", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ProjectPropertyDefinition>(this.ProjectPropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<UserIDDefinition> UserID {
            get {
                if ((this.UserIDField == null)) {
                    this.UserIDField = new XTypedList<UserIDDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.UserIDField;
            }
            set {
                if ((value == null)) {
                    this.UserIDField = null;
                }
                else {
                    if ((this.UserIDField == null)) {
                        this.UserIDField = XTypedList<UserIDDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<UserIDDefinition>(this.UserIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<HtmlRenderingElement> FieldSortParams {
            get {
                if ((this.FieldSortParamsField == null)) {
                    this.FieldSortParamsField = new XTypedList<HtmlRenderingElement>(this, LinqToXsdTypeManager.Instance, XName.Get("FieldSortParams", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldSortParamsField;
            }
            set {
                if ((value == null)) {
                    this.FieldSortParamsField = null;
                }
                else {
                    if ((this.FieldSortParamsField == null)) {
                        this.FieldSortParamsField = XTypedList<HtmlRenderingElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FieldSortParams", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<HtmlRenderingElement>(this.FieldSortParamsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<EmptyElement> WebQueryInfo {
            get {
                if ((this.WebQueryInfoField == null)) {
                    this.WebQueryInfoField = new XTypedList<EmptyElement>(this, LinqToXsdTypeManager.Instance, XName.Get("WebQueryInfo", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.WebQueryInfoField;
            }
            set {
                if ((value == null)) {
                    this.WebQueryInfoField = null;
                }
                else {
                    if ((this.WebQueryInfoField == null)) {
                        this.WebQueryInfoField = XTypedList<EmptyElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("WebQueryInfo", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<EmptyElement>(this.WebQueryInfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<EmptyElement> Identity {
            get {
                if ((this.IdentityField == null)) {
                    this.IdentityField = new XTypedList<EmptyElement>(this, LinqToXsdTypeManager.Instance, XName.Get("Identity", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.IdentityField;
            }
            set {
                if ((value == null)) {
                    this.IdentityField = null;
                }
                else {
                    if ((this.IdentityField == null)) {
                        this.IdentityField = XTypedList<EmptyElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Identity", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<EmptyElement>(this.IdentityField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<IfHasRightsDefinition> IfHasRights {
            get {
                if ((this.IfHasRightsField == null)) {
                    this.IfHasRightsField = new XTypedList<IfHasRightsDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("IfHasRights", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.IfHasRightsField;
            }
            set {
                if ((value == null)) {
                    this.IfHasRightsField = null;
                }
                else {
                    if ((this.IfHasRightsField == null)) {
                        this.IfHasRightsField = XTypedList<IfHasRightsDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IfHasRights", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<IfHasRightsDefinition>(this.IfHasRightsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<CamlViewElement> MapToControl {
            get {
                if ((this.MapToControlField == null)) {
                    this.MapToControlField = new XTypedList<CamlViewElement>(this, LinqToXsdTypeManager.Instance, XName.Get("MapToControl", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MapToControlField;
            }
            set {
                if ((value == null)) {
                    this.MapToControlField = null;
                }
                else {
                    if ((this.MapToControlField == null)) {
                        this.MapToControlField = XTypedList<CamlViewElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MapToControl", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CamlViewElement>(this.MapToControlField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<ForEachElement> @ForEach {
            get {
                if ((this.@ForEachField == null)) {
                    this.@ForEachField = new XTypedList<ForEachElement>(this, LinqToXsdTypeManager.Instance, XName.Get("ForEach", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.@ForEachField;
            }
            set {
                if ((value == null)) {
                    this.@ForEachField = null;
                }
                else {
                    if ((this.@ForEachField == null)) {
                        this.@ForEachField = XTypedList<ForEachElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ForEach", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ForEachElement>(this.@ForEachField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<CamlViewElement> ContentTypes {
            get {
                if ((this.ContentTypesField == null)) {
                    this.ContentTypesField = new XTypedList<CamlViewElement>(this, LinqToXsdTypeManager.Instance, XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ContentTypesField;
            }
            set {
                if ((value == null)) {
                    this.ContentTypesField = null;
                }
                else {
                    if ((this.ContentTypesField == null)) {
                        this.ContentTypesField = XTypedList<CamlViewElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CamlViewElement>(this.ContentTypesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IList<CamlViewElement> MapToContentType {
            get {
                if ((this.MapToContentTypeField == null)) {
                    this.MapToContentTypeField = new XTypedList<CamlViewElement>(this, LinqToXsdTypeManager.Instance, XName.Get("MapToContentType", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MapToContentTypeField;
            }
            set {
                if ((value == null)) {
                    this.MapToContentTypeField = null;
                }
                else {
                    if ((this.MapToContentTypeField == null)) {
                        this.MapToContentTypeField = XTypedList<CamlViewElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MapToContentType", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CamlViewElement>(this.MapToContentTypeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CamlViewElement", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CamlViewElement>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Column2", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Counter", "http://schemas.microsoft.com/sharepoint/"), typeof(CounterDefinition));
            localElementDictionary.Add(XName.Get("CurrentRights", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(XName.Get("FieldPrefix", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("FieldProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("FieldSwitch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("FilterLink", "http://schemas.microsoft.com/sharepoint/"), typeof(FilterLinkDefinition));
            localElementDictionary.Add(XName.Get("GetFileExtension", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(GetVarDefinition));
            localElementDictionary.Add(XName.Get("HTML", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlContentDefinition));
            localElementDictionary.Add(XName.Get("HttpHost", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpHostDefinition));
            localElementDictionary.Add(XName.Get("HttpPath", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("HttpVDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpVDirDefinition));
            localElementDictionary.Add(XName.Get("ID", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfEqual", "http://schemas.microsoft.com/sharepoint/"), typeof(IfEqualDefinition));
            localElementDictionary.Add(XName.Get("IfNeg", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNegDefinition));
            localElementDictionary.Add(XName.Get("IfNew", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNewDefinition));
            localElementDictionary.Add(XName.Get("IfSubString", "http://schemas.microsoft.com/sharepoint/"), typeof(IfSubStringDefinition));
            localElementDictionary.Add(XName.Get("Length", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("Limit", "http://schemas.microsoft.com/sharepoint/"), typeof(LimitDefinition));
            localElementDictionary.Add(XName.Get("List", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrlDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ListPropertyDefinition));
            localElementDictionary.Add(XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"), typeof(LookupColumnDefinition));
            localElementDictionary.Add(XName.Get("MapToAll", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToIcon", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("PageUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("ScriptQuote", "http://schemas.microsoft.com/sharepoint/"), typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(XName.Get("SelectionOptions", "http://schemas.microsoft.com/sharepoint/"), typeof(SelectOptionsDefinition));
            localElementDictionary.Add(XName.Get("ServerProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ServerPropertyDefinition));
            localElementDictionary.Add(XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(SetVarDefinition));
            localElementDictionary.Add(XName.Get("Switch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("ThreadStamp", "http://schemas.microsoft.com/sharepoint/"), typeof(ThreadStampDefinition));
            localElementDictionary.Add(XName.Get("URL", "http://schemas.microsoft.com/sharepoint/"), typeof(URLDefinition));
            localElementDictionary.Add(XName.Get("UrlDirName", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("UrlBaseName", "http://schemas.microsoft.com/sharepoint/"), typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(XName.Get("MeetingProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(XName.Get("ProjectProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"), typeof(UserIDDefinition));
            localElementDictionary.Add(XName.Get("FieldSortParams", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("WebQueryInfo", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Identity", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfHasRights", "http://schemas.microsoft.com/sharepoint/"), typeof(IfHasRightsDefinition));
            localElementDictionary.Add(XName.Get("MapToControl", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("ForEach", "http://schemas.microsoft.com/sharepoint/"), typeof(ForEachElement));
            localElementDictionary.Add(XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToContentType", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class GetVarDefinition : global::Microsoft.Schemas.SharePoint.HtmlRenderingElement, IXMetaData {
        
         public static explicit operator GetVarDefinition(XElement xe) { return XTypedServices.ToXTypedElement<GetVarDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GetVarDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GetVarDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GetVarDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Expr? | @Case* | @Default*)*)
    /// </para>
    /// </summary>
    public partial class SwitchDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExprDefinition> ExprField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CaseDefinition> @CaseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DefaultDefinition> @DefaultField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SwitchDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SwitchDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SwitchDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Expr? | @Case* | @Default*)*)
        /// </para>
        /// </summary>
        public SwitchDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Expr? | @Case* | @Default*)*)
        /// </para>
        /// </summary>
        public IList<ExprDefinition> Expr {
            get {
                if ((this.ExprField == null)) {
                    this.ExprField = new XTypedList<ExprDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Expr", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ExprField;
            }
            set {
                if ((value == null)) {
                    this.ExprField = null;
                }
                else {
                    if ((this.ExprField == null)) {
                        this.ExprField = XTypedList<ExprDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Expr", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ExprDefinition>(this.ExprField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Expr? | @Case* | @Default*)*)
        /// </para>
        /// </summary>
        public IList<CaseDefinition> @Case {
            get {
                if ((this.@CaseField == null)) {
                    this.@CaseField = new XTypedList<CaseDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Case", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.@CaseField;
            }
            set {
                if ((value == null)) {
                    this.@CaseField = null;
                }
                else {
                    if ((this.@CaseField == null)) {
                        this.@CaseField = XTypedList<CaseDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Case", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CaseDefinition>(this.@CaseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Expr? | @Case* | @Default*)*)
        /// </para>
        /// </summary>
        public IList<DefaultDefinition> @Default {
            get {
                if ((this.@DefaultField == null)) {
                    this.@DefaultField = new XTypedList<DefaultDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Default", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.@DefaultField;
            }
            set {
                if ((value == null)) {
                    this.@DefaultField = null;
                }
                else {
                    if ((this.@DefaultField == null)) {
                        this.@DefaultField = XTypedList<DefaultDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Default", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<DefaultDefinition>(this.@DefaultField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string StripWS {
            get {
                XAttribute x = this.Attribute(XName.Get("StripWS", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("StripWS", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SwitchDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SwitchDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Expr", "http://schemas.microsoft.com/sharepoint/"), typeof(ExprDefinition));
            localElementDictionary.Add(XName.Get("Case", "http://schemas.microsoft.com/sharepoint/"), typeof(CaseDefinition));
            localElementDictionary.Add(XName.Get("Default", "http://schemas.microsoft.com/sharepoint/"), typeof(DefaultDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class ExprDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
         public static explicit operator ExprDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ExprDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ExprDefinition() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public ExprDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ExprDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExprDefinition>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", ""), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class CaseDefinition : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator CaseDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CaseDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CaseDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public CaseDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Value {
            get {
                XAttribute x = this.Attribute(XName.Get("Value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CaseDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CaseDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Column2", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Counter", "http://schemas.microsoft.com/sharepoint/"), typeof(CounterDefinition));
            localElementDictionary.Add(XName.Get("CurrentRights", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(XName.Get("FieldPrefix", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("FieldProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("FieldSwitch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("FilterLink", "http://schemas.microsoft.com/sharepoint/"), typeof(FilterLinkDefinition));
            localElementDictionary.Add(XName.Get("GetFileExtension", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(GetVarDefinition));
            localElementDictionary.Add(XName.Get("HTML", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlContentDefinition));
            localElementDictionary.Add(XName.Get("HttpHost", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpHostDefinition));
            localElementDictionary.Add(XName.Get("HttpPath", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("HttpVDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpVDirDefinition));
            localElementDictionary.Add(XName.Get("ID", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfEqual", "http://schemas.microsoft.com/sharepoint/"), typeof(IfEqualDefinition));
            localElementDictionary.Add(XName.Get("IfNeg", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNegDefinition));
            localElementDictionary.Add(XName.Get("IfNew", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNewDefinition));
            localElementDictionary.Add(XName.Get("IfSubString", "http://schemas.microsoft.com/sharepoint/"), typeof(IfSubStringDefinition));
            localElementDictionary.Add(XName.Get("Length", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("Limit", "http://schemas.microsoft.com/sharepoint/"), typeof(LimitDefinition));
            localElementDictionary.Add(XName.Get("List", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrlDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ListPropertyDefinition));
            localElementDictionary.Add(XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"), typeof(LookupColumnDefinition));
            localElementDictionary.Add(XName.Get("MapToAll", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToIcon", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("PageUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("ScriptQuote", "http://schemas.microsoft.com/sharepoint/"), typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(XName.Get("SelectionOptions", "http://schemas.microsoft.com/sharepoint/"), typeof(SelectOptionsDefinition));
            localElementDictionary.Add(XName.Get("ServerProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ServerPropertyDefinition));
            localElementDictionary.Add(XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(SetVarDefinition));
            localElementDictionary.Add(XName.Get("Switch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("ThreadStamp", "http://schemas.microsoft.com/sharepoint/"), typeof(ThreadStampDefinition));
            localElementDictionary.Add(XName.Get("URL", "http://schemas.microsoft.com/sharepoint/"), typeof(URLDefinition));
            localElementDictionary.Add(XName.Get("UrlDirName", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("UrlBaseName", "http://schemas.microsoft.com/sharepoint/"), typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(XName.Get("MeetingProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(XName.Get("ProjectProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"), typeof(UserIDDefinition));
            localElementDictionary.Add(XName.Get("FieldSortParams", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("WebQueryInfo", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Identity", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfHasRights", "http://schemas.microsoft.com/sharepoint/"), typeof(IfHasRightsDefinition));
            localElementDictionary.Add(XName.Get("MapToControl", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("ForEach", "http://schemas.microsoft.com/sharepoint/"), typeof(ForEachElement));
            localElementDictionary.Add(XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToContentType", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class DefaultDefinition : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator DefaultDefinition(XElement xe) { return XTypedServices.ToXTypedElement<DefaultDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DefaultDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public DefaultDefinition() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DefaultDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DefaultDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Column2", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Counter", "http://schemas.microsoft.com/sharepoint/"), typeof(CounterDefinition));
            localElementDictionary.Add(XName.Get("CurrentRights", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(XName.Get("FieldPrefix", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("FieldProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("FieldSwitch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("FilterLink", "http://schemas.microsoft.com/sharepoint/"), typeof(FilterLinkDefinition));
            localElementDictionary.Add(XName.Get("GetFileExtension", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(GetVarDefinition));
            localElementDictionary.Add(XName.Get("HTML", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlContentDefinition));
            localElementDictionary.Add(XName.Get("HttpHost", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpHostDefinition));
            localElementDictionary.Add(XName.Get("HttpPath", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("HttpVDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpVDirDefinition));
            localElementDictionary.Add(XName.Get("ID", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfEqual", "http://schemas.microsoft.com/sharepoint/"), typeof(IfEqualDefinition));
            localElementDictionary.Add(XName.Get("IfNeg", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNegDefinition));
            localElementDictionary.Add(XName.Get("IfNew", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNewDefinition));
            localElementDictionary.Add(XName.Get("IfSubString", "http://schemas.microsoft.com/sharepoint/"), typeof(IfSubStringDefinition));
            localElementDictionary.Add(XName.Get("Length", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("Limit", "http://schemas.microsoft.com/sharepoint/"), typeof(LimitDefinition));
            localElementDictionary.Add(XName.Get("List", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrlDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ListPropertyDefinition));
            localElementDictionary.Add(XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"), typeof(LookupColumnDefinition));
            localElementDictionary.Add(XName.Get("MapToAll", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToIcon", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("PageUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("ScriptQuote", "http://schemas.microsoft.com/sharepoint/"), typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(XName.Get("SelectionOptions", "http://schemas.microsoft.com/sharepoint/"), typeof(SelectOptionsDefinition));
            localElementDictionary.Add(XName.Get("ServerProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ServerPropertyDefinition));
            localElementDictionary.Add(XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(SetVarDefinition));
            localElementDictionary.Add(XName.Get("Switch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("ThreadStamp", "http://schemas.microsoft.com/sharepoint/"), typeof(ThreadStampDefinition));
            localElementDictionary.Add(XName.Get("URL", "http://schemas.microsoft.com/sharepoint/"), typeof(URLDefinition));
            localElementDictionary.Add(XName.Get("UrlDirName", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("UrlBaseName", "http://schemas.microsoft.com/sharepoint/"), typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(XName.Get("MeetingProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(XName.Get("ProjectProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"), typeof(UserIDDefinition));
            localElementDictionary.Add(XName.Get("FieldSortParams", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("WebQueryInfo", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Identity", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfHasRights", "http://schemas.microsoft.com/sharepoint/"), typeof(IfHasRightsDefinition));
            localElementDictionary.Add(XName.Get("MapToControl", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("ForEach", "http://schemas.microsoft.com/sharepoint/"), typeof(ForEachElement));
            localElementDictionary.Add(XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToContentType", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ListPropertyDefinition : global::Microsoft.Schemas.SharePoint.HtmlRenderingElement, IXMetaData {
        
         public static explicit operator ListPropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ListPropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ListPropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Select {
            get {
                XAttribute x = this.Attribute(XName.Get("Select", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Select", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ForInstance {
            get {
                XAttribute x = this.Attribute(XName.Get("ForInstance", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ForInstance", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ListPropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListPropertyDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FieldPropertyDefinition : global::Microsoft.Schemas.SharePoint.HtmlRenderingElement, IXMetaData {
        
         public static explicit operator FieldPropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldPropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FieldPropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Select {
            get {
                XAttribute x = this.Attribute(XName.Get("Select", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Select", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public new string HTMLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("HTMLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HTMLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FieldPropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldPropertyDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FieldViewReferenceDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator FieldViewReferenceDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldViewReferenceDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FieldViewReferenceDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AutoHyperLink {
            get {
                XAttribute x = this.Attribute(XName.Get("AutoHyperLink", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AutoHyperLink", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AutoHyperLinkNoEncoding {
            get {
                XAttribute x = this.Attribute(XName.Get("AutoHyperLinkNoEncoding", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AutoHyperLinkNoEncoding", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AutoNewLine {
            get {
                XAttribute x = this.Attribute(XName.Get("AutoNewLine", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AutoNewLine", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string StripWS {
            get {
                XAttribute x = this.Attribute(XName.Get("StripWS", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("StripWS", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncodeAsURL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncodeAsURL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HTMLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("HTMLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HTMLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FieldViewReferenceDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldViewReferenceDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class EmptyElement : XTypedElement, IXMetaData {
        
         public static explicit operator EmptyElement(XElement xe) { return XTypedServices.ToXTypedElement<EmptyElement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public EmptyElement() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("EmptyElement", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EmptyElement>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class ScriptQuoteDefinition : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ScriptQuoteDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ScriptQuoteDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ScriptQuoteDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public ScriptQuoteDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NotAddingQuote {
            get {
                XAttribute x = this.Attribute(XName.Get("NotAddingQuote", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NotAddingQuote", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ScriptQuoteDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ScriptQuoteDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Column2", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Counter", "http://schemas.microsoft.com/sharepoint/"), typeof(CounterDefinition));
            localElementDictionary.Add(XName.Get("CurrentRights", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(XName.Get("FieldPrefix", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("FieldProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("FieldSwitch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("FilterLink", "http://schemas.microsoft.com/sharepoint/"), typeof(FilterLinkDefinition));
            localElementDictionary.Add(XName.Get("GetFileExtension", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(GetVarDefinition));
            localElementDictionary.Add(XName.Get("HTML", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlContentDefinition));
            localElementDictionary.Add(XName.Get("HttpHost", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpHostDefinition));
            localElementDictionary.Add(XName.Get("HttpPath", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("HttpVDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpVDirDefinition));
            localElementDictionary.Add(XName.Get("ID", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfEqual", "http://schemas.microsoft.com/sharepoint/"), typeof(IfEqualDefinition));
            localElementDictionary.Add(XName.Get("IfNeg", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNegDefinition));
            localElementDictionary.Add(XName.Get("IfNew", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNewDefinition));
            localElementDictionary.Add(XName.Get("IfSubString", "http://schemas.microsoft.com/sharepoint/"), typeof(IfSubStringDefinition));
            localElementDictionary.Add(XName.Get("Length", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("Limit", "http://schemas.microsoft.com/sharepoint/"), typeof(LimitDefinition));
            localElementDictionary.Add(XName.Get("List", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrlDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ListPropertyDefinition));
            localElementDictionary.Add(XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"), typeof(LookupColumnDefinition));
            localElementDictionary.Add(XName.Get("MapToAll", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToIcon", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("PageUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("ScriptQuote", "http://schemas.microsoft.com/sharepoint/"), typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(XName.Get("SelectionOptions", "http://schemas.microsoft.com/sharepoint/"), typeof(SelectOptionsDefinition));
            localElementDictionary.Add(XName.Get("ServerProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ServerPropertyDefinition));
            localElementDictionary.Add(XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(SetVarDefinition));
            localElementDictionary.Add(XName.Get("Switch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("ThreadStamp", "http://schemas.microsoft.com/sharepoint/"), typeof(ThreadStampDefinition));
            localElementDictionary.Add(XName.Get("URL", "http://schemas.microsoft.com/sharepoint/"), typeof(URLDefinition));
            localElementDictionary.Add(XName.Get("UrlDirName", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("UrlBaseName", "http://schemas.microsoft.com/sharepoint/"), typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(XName.Get("MeetingProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(XName.Get("ProjectProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"), typeof(UserIDDefinition));
            localElementDictionary.Add(XName.Get("FieldSortParams", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("WebQueryInfo", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Identity", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfHasRights", "http://schemas.microsoft.com/sharepoint/"), typeof(IfHasRightsDefinition));
            localElementDictionary.Add(XName.Get("MapToControl", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("ForEach", "http://schemas.microsoft.com/sharepoint/"), typeof(ForEachElement));
            localElementDictionary.Add(XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToContentType", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ThreadStampDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ThreadStampDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ThreadStampDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ThreadStampDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string StripWS {
            get {
                XAttribute x = this.Attribute(XName.Get("StripWS", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("StripWS", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ThreadStampDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ThreadStampDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SelectOptionsDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator SelectOptionsDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SelectOptionsDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SelectOptionsDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Len {
            get {
                XAttribute x = this.Attribute(XName.Get("Len", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Len", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string BlankPattern {
            get {
                XAttribute x = this.Attribute(XName.Get("BlankPattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BlankPattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MoreText {
            get {
                XAttribute x = this.Attribute(XName.Get("MoreText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MoreText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SelectOptionsDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SelectOptionsDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class CounterType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "View"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CounterType() {
        }
    }
    
    public partial class CounterDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator CounterDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CounterDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CounterDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CounterDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CounterDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Expr1?, Expr2?, Then?, @Else?)
    /// </para>
    /// </summary>
    public partial class IfEqualDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator IfEqualDefinition(XElement xe) { return XTypedServices.ToXTypedElement<IfEqualDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IfEqualDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, @Else?)
        /// </para>
        /// </summary>
        public IfEqualDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, @Else?)
        /// </para>
        /// </summary>
        public CamlQueryRoot Expr1 {
            get {
                XElement x = this.GetElement(XName.Get("Expr1", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlQueryRoot)(x));
            }
            set {
                this.SetElement(XName.Get("Expr1", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, @Else?)
        /// </para>
        /// </summary>
        public CamlQueryRoot Expr2 {
            get {
                XElement x = this.GetElement(XName.Get("Expr2", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlQueryRoot)(x));
            }
            set {
                this.SetElement(XName.Get("Expr2", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, @Else?)
        /// </para>
        /// </summary>
        public CamlViewRoot Then {
            get {
                XElement x = this.GetElement(XName.Get("Then", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("Then", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, @Else?)
        /// </para>
        /// </summary>
        public CamlViewRoot @Else {
            get {
                XElement x = this.GetElement(XName.Get("Else", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("Else", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("IfEqualDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IfEqualDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Expr1", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlQueryRoot));
            localElementDictionary.Add(XName.Get("Expr2", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlQueryRoot));
            localElementDictionary.Add(XName.Get("Then", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("Else", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Expr1?, Expr2?)
    /// </para>
    /// </summary>
    public partial class IfNegDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator IfNegDefinition(XElement xe) { return XTypedServices.ToXTypedElement<IfNegDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IfNegDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?)
        /// </para>
        /// </summary>
        public IfNegDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?)
        /// </para>
        /// </summary>
        public CamlQueryRoot Expr1 {
            get {
                XElement x = this.GetElement(XName.Get("Expr1", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlQueryRoot)(x));
            }
            set {
                this.SetElement(XName.Get("Expr1", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?)
        /// </para>
        /// </summary>
        public CamlQueryRoot Expr2 {
            get {
                XElement x = this.GetElement(XName.Get("Expr2", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlQueryRoot)(x));
            }
            set {
                this.SetElement(XName.Get("Expr2", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("IfNegDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IfNegDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Expr1", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlQueryRoot));
            localElementDictionary.Add(XName.Get("Expr2", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlQueryRoot));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Expr1?, Expr2?, Then?, @Else?)
    /// </para>
    /// </summary>
    public partial class IfSubStringDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator IfSubStringDefinition(XElement xe) { return XTypedServices.ToXTypedElement<IfSubStringDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IfSubStringDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, @Else?)
        /// </para>
        /// </summary>
        public IfSubStringDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, @Else?)
        /// </para>
        /// </summary>
        public CamlQueryRoot Expr1 {
            get {
                XElement x = this.GetElement(XName.Get("Expr1", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlQueryRoot)(x));
            }
            set {
                this.SetElement(XName.Get("Expr1", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, @Else?)
        /// </para>
        /// </summary>
        public CamlQueryRoot Expr2 {
            get {
                XElement x = this.GetElement(XName.Get("Expr2", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlQueryRoot)(x));
            }
            set {
                this.SetElement(XName.Get("Expr2", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, @Else?)
        /// </para>
        /// </summary>
        public CamlViewRoot Then {
            get {
                XElement x = this.GetElement(XName.Get("Then", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("Then", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, @Else?)
        /// </para>
        /// </summary>
        public CamlViewRoot @Else {
            get {
                XElement x = this.GetElement(XName.Get("Else", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("Else", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("IfSubStringDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IfSubStringDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Expr1", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlQueryRoot));
            localElementDictionary.Add(XName.Get("Expr2", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlQueryRoot));
            localElementDictionary.Add(XName.Get("Then", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("Else", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Text?, More?, Column?)
    /// </para>
    /// </summary>
    public partial class LimitDefinition : global::Microsoft.Schemas.SharePoint.HtmlRenderingElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator LimitDefinition(XElement xe) { return XTypedServices.ToXTypedElement<LimitDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LimitDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Text?, More?, Column?)
        /// </para>
        /// </summary>
        public LimitDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Text?, More?, Column?)
        /// </para>
        /// </summary>
        public XTypedElement Text {
            get {
                XElement x = this.GetElement(XName.Get("Text", "http://schemas.microsoft.com/sharepoint/"));
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(XName.Get("Text", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Text?, More?, Column?)
        /// </para>
        /// </summary>
        public XTypedElement More {
            get {
                XElement x = this.GetElement(XName.Get("More", "http://schemas.microsoft.com/sharepoint/"));
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(XName.Get("More", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Text?, More?, Column?)
        /// </para>
        /// </summary>
        public ColumnDefinition Column {
            get {
                XElement x = this.GetElement(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"));
                return ((ColumnDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string IgnoreTags {
            get {
                XAttribute x = this.Attribute(XName.Get("IgnoreTags", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IgnoreTags", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Len {
            get {
                XAttribute x = this.Attribute(XName.Get("Len", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Len", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MoreText {
            get {
                XAttribute x = this.Attribute(XName.Get("MoreText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MoreText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LimitDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LimitDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Text", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("More", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), typeof(ColumnDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ColumnDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ColumnDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ColumnDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ColumnDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ColumnDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ColumnDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class URLDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator URLDefinition(XElement xe) { return XTypedServices.ToXTypedElement<URLDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public URLDefinition() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Cmd {
            get {
                XAttribute x = this.Attribute(XName.Get("Cmd", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Cmd", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NoID {
            get {
                XAttribute x = this.Attribute(XName.Get("NoID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NoID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("URLDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<URLDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Field? | LookupColumn?)*)
    /// </para>
    /// </summary>
    public partial class UrlBaseNameDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<XTypedElement> FieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LookupColumnDefinition> LookupColumnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator UrlBaseNameDefinition(XElement xe) { return XTypedServices.ToXTypedElement<UrlBaseNameDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UrlBaseNameDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Field? | LookupColumn?)*)
        /// </para>
        /// </summary>
        public UrlBaseNameDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Field? | LookupColumn?)*)
        /// </para>
        /// </summary>
        public IList<XTypedElement> Field {
            get {
                if ((this.FieldField == null)) {
                    this.FieldField = new XTypedList<XTypedElement>(this, LinqToXsdTypeManager.Instance, XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldField;
            }
            set {
                if ((value == null)) {
                    this.FieldField = null;
                }
                else {
                    if ((this.FieldField == null)) {
                        this.FieldField = XTypedList<XTypedElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<XTypedElement>(this.FieldField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Field? | LookupColumn?)*)
        /// </para>
        /// </summary>
        public IList<LookupColumnDefinition> LookupColumn {
            get {
                if ((this.LookupColumnField == null)) {
                    this.LookupColumnField = new XTypedList<LookupColumnDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.LookupColumnField;
            }
            set {
                if ((value == null)) {
                    this.LookupColumnField = null;
                }
                else {
                    if ((this.LookupColumnField == null)) {
                        this.LookupColumnField = XTypedList<LookupColumnDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LookupColumnDefinition>(this.LookupColumnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HTMLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("HTMLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HTMLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UrlBaseNameDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UrlBaseNameDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"), typeof(LookupColumnDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class HttpHostDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator HttpHostDefinition(XElement xe) { return XTypedServices.ToXTypedElement<HttpHostDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public HttpHostDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncodeAsURL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncodeAsURL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HttpHostDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HttpHostDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Column*)
    /// </para>
    /// </summary>
    public partial class ServerPropertyDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<QueryColumnDefinition> ColumnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ServerPropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ServerPropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ServerPropertyDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Column*)
        /// </para>
        /// </summary>
        public ServerPropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Column*)
        /// </para>
        /// </summary>
        public IList<QueryColumnDefinition> Column {
            get {
                if ((this.ColumnField == null)) {
                    this.ColumnField = new XTypedList<QueryColumnDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ColumnField;
            }
            set {
                if ((value == null)) {
                    this.ColumnField = null;
                }
                else {
                    if ((this.ColumnField == null)) {
                        this.ColumnField = XTypedList<QueryColumnDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<QueryColumnDefinition>(this.ColumnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Select {
            get {
                XAttribute x = this.Attribute(XName.Get("Select", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Select", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ServerPropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ServerPropertyDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Filter*)
    /// </para>
    /// </summary>
    public partial class CamlBdcMethod : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CamlBdcFilter> FilterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CamlBdcMethod(XElement xe) { return XTypedServices.ToXTypedElement<CamlBdcMethod>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CamlBdcMethod() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Filter", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Filter*)
        /// </para>
        /// </summary>
        public CamlBdcMethod() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Filter*)
        /// </para>
        /// </summary>
        public IList<CamlBdcFilter> Filter {
            get {
                if ((this.FilterField == null)) {
                    this.FilterField = new XTypedList<CamlBdcFilter>(this, LinqToXsdTypeManager.Instance, XName.Get("Filter", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FilterField;
            }
            set {
                if ((value == null)) {
                    this.FilterField = null;
                }
                else {
                    if ((this.FilterField == null)) {
                        this.FilterField = XTypedList<CamlBdcFilter>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Filter", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CamlBdcFilter>(this.FilterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CamlBdcMethod", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CamlBdcMethod>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Filter", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlBdcFilter));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class CamlBdcFilter : XTypedElement, IXMetaData {
        
         public static explicit operator CamlBdcFilter(XElement xe) { return XTypedServices.ToXTypedElement<CamlBdcFilter>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CamlBdcFilter() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Value {
            get {
                XAttribute x = this.Attribute(XName.Get("Value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CamlBdcFilter", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CamlBdcFilter>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FilterLinkDefinition : global::Microsoft.Schemas.SharePoint.HtmlRenderingElement, IXMetaData {
        
         public static explicit operator FilterLinkDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FilterLinkDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FilterLinkDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public new string @Default {
            get {
                XAttribute x = this.Attribute(XName.Get("Default", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Default", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Paged {
            get {
                XAttribute x = this.Attribute(XName.Get("Paged", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Paged", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FilterLinkDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FilterLinkDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class IfNewDefinition : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator IfNewDefinition(XElement xe) { return XTypedServices.ToXTypedElement<IfNewDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IfNewDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IfNewDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("IfNewDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IfNewDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Column2", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Counter", "http://schemas.microsoft.com/sharepoint/"), typeof(CounterDefinition));
            localElementDictionary.Add(XName.Get("CurrentRights", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(XName.Get("FieldPrefix", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("FieldProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("FieldSwitch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("FilterLink", "http://schemas.microsoft.com/sharepoint/"), typeof(FilterLinkDefinition));
            localElementDictionary.Add(XName.Get("GetFileExtension", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(GetVarDefinition));
            localElementDictionary.Add(XName.Get("HTML", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlContentDefinition));
            localElementDictionary.Add(XName.Get("HttpHost", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpHostDefinition));
            localElementDictionary.Add(XName.Get("HttpPath", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("HttpVDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpVDirDefinition));
            localElementDictionary.Add(XName.Get("ID", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfEqual", "http://schemas.microsoft.com/sharepoint/"), typeof(IfEqualDefinition));
            localElementDictionary.Add(XName.Get("IfNeg", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNegDefinition));
            localElementDictionary.Add(XName.Get("IfNew", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNewDefinition));
            localElementDictionary.Add(XName.Get("IfSubString", "http://schemas.microsoft.com/sharepoint/"), typeof(IfSubStringDefinition));
            localElementDictionary.Add(XName.Get("Length", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("Limit", "http://schemas.microsoft.com/sharepoint/"), typeof(LimitDefinition));
            localElementDictionary.Add(XName.Get("List", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrlDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ListPropertyDefinition));
            localElementDictionary.Add(XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"), typeof(LookupColumnDefinition));
            localElementDictionary.Add(XName.Get("MapToAll", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToIcon", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("PageUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("ScriptQuote", "http://schemas.microsoft.com/sharepoint/"), typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(XName.Get("SelectionOptions", "http://schemas.microsoft.com/sharepoint/"), typeof(SelectOptionsDefinition));
            localElementDictionary.Add(XName.Get("ServerProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ServerPropertyDefinition));
            localElementDictionary.Add(XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(SetVarDefinition));
            localElementDictionary.Add(XName.Get("Switch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("ThreadStamp", "http://schemas.microsoft.com/sharepoint/"), typeof(ThreadStampDefinition));
            localElementDictionary.Add(XName.Get("URL", "http://schemas.microsoft.com/sharepoint/"), typeof(URLDefinition));
            localElementDictionary.Add(XName.Get("UrlDirName", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("UrlBaseName", "http://schemas.microsoft.com/sharepoint/"), typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(XName.Get("MeetingProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(XName.Get("ProjectProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"), typeof(UserIDDefinition));
            localElementDictionary.Add(XName.Get("FieldSortParams", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("WebQueryInfo", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Identity", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfHasRights", "http://schemas.microsoft.com/sharepoint/"), typeof(IfHasRightsDefinition));
            localElementDictionary.Add(XName.Get("MapToControl", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("ForEach", "http://schemas.microsoft.com/sharepoint/"), typeof(ForEachElement));
            localElementDictionary.Add(XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToContentType", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class MeetingPropertyDefinition : global::Microsoft.Schemas.SharePoint.HtmlRenderingElement, IXMetaData {
        
         public static explicit operator MeetingPropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<MeetingPropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public MeetingPropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Select {
            get {
                XAttribute x = this.Attribute(XName.Get("Select", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Select", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MeetingPropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MeetingPropertyDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ProjectPropertyDefinition : global::Microsoft.Schemas.SharePoint.HtmlRenderingElement, IXMetaData {
        
         public static explicit operator ProjectPropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ProjectPropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ProjectPropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Select {
            get {
                XAttribute x = this.Attribute(XName.Get("Select", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Select", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ProjectPropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProjectPropertyDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UserIDDefinition : global::Microsoft.Schemas.SharePoint.EmptyElement, IXMetaData {
        
         public static explicit operator UserIDDefinition(XElement xe) { return XTypedServices.ToXTypedElement<UserIDDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UserIDDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AllowAnonymous {
            get {
                XAttribute x = this.Attribute(XName.Get("AllowAnonymous", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AllowAnonymous", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UserIDDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserIDDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class HttpPathDefinition : global::Microsoft.Schemas.SharePoint.EmptyElement, IXMetaData {
        
         public static explicit operator HttpPathDefinition(XElement xe) { return XTypedServices.ToXTypedElement<HttpPathDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public HttpPathDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ServerRel {
            get {
                XAttribute x = this.Attribute(XName.Get("ServerRel", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ServerRel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncodeAsURL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncodeAsURL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HTMLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("HTMLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HTMLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ForInstance {
            get {
                XAttribute x = this.Attribute(XName.Get("ForInstance", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ForInstance", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HttpPathDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HttpPathDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class HttpVDirDefinition : global::Microsoft.Schemas.SharePoint.EmptyElement, IXMetaData {
        
         public static explicit operator HttpVDirDefinition(XElement xe) { return XTypedServices.ToXTypedElement<HttpVDirDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public HttpVDirDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CurrentWeb {
            get {
                XAttribute x = this.Attribute(XName.Get("CurrentWeb", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CurrentWeb", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncodeAsURL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncodeAsURL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HttpVDirDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HttpVDirDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RightsChoices, Then, @Else?)
    /// </para>
    /// </summary>
    public partial class IfHasRightsDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator IfHasRightsDefinition(XElement xe) { return XTypedServices.ToXTypedElement<IfHasRightsDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IfHasRightsDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RightsChoices", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Then", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Else", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RightsChoices, Then, @Else?)
        /// </para>
        /// </summary>
        public IfHasRightsDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RightsChoices, Then, @Else?)
        /// </para>
        /// </summary>
        public RightsChoiceDefinitions RightsChoices {
            get {
                XElement x = this.GetElement(XName.Get("RightsChoices", "http://schemas.microsoft.com/sharepoint/"));
                return ((RightsChoiceDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("RightsChoices", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RightsChoices, Then, @Else?)
        /// </para>
        /// </summary>
        public CamlViewElement Then {
            get {
                XElement x = this.GetElement(XName.Get("Then", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewElement)(x));
            }
            set {
                this.SetElement(XName.Get("Then", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RightsChoices, Then, @Else?)
        /// </para>
        /// </summary>
        public CamlViewElement @Else {
            get {
                XElement x = this.GetElement(XName.Get("Else", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewElement)(x));
            }
            set {
                this.SetElement(XName.Get("Else", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("IfHasRightsDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IfHasRightsDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("RightsChoices", "http://schemas.microsoft.com/sharepoint/"), typeof(RightsChoiceDefinitions));
            localElementDictionary.Add(XName.Get("Then", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("Else", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RightsGroup*)
    /// </para>
    /// </summary>
    public partial class RightsChoiceDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RightsGroupDefinition> RightsGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RightsChoiceDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<RightsChoiceDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RightsChoiceDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RightsGroup", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RightsGroup*)
        /// </para>
        /// </summary>
        public RightsChoiceDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RightsGroup*)
        /// </para>
        /// </summary>
        public IList<RightsGroupDefinition> RightsGroup {
            get {
                if ((this.RightsGroupField == null)) {
                    this.RightsGroupField = new XTypedList<RightsGroupDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("RightsGroup", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.RightsGroupField;
            }
            set {
                if ((value == null)) {
                    this.RightsGroupField = null;
                }
                else {
                    if ((this.RightsGroupField == null)) {
                        this.RightsGroupField = XTypedList<RightsGroupDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RightsGroup", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<RightsGroupDefinition>(this.RightsGroupField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RightsChoiceDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RightsChoiceDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("RightsGroup", "http://schemas.microsoft.com/sharepoint/"), typeof(RightsGroupDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class RightsGroupDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator RightsGroupDefinition(XElement xe) { return XTypedServices.ToXTypedElement<RightsGroupDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RightsGroupDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PermAddListItems {
            get {
                XAttribute x = this.Attribute(XName.Get("PermAddListItems", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PermAddListItems", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PermEditListItems {
            get {
                XAttribute x = this.Attribute(XName.Get("PermEditListItems", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PermEditListItems", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RightsGroupDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RightsGroupDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class PermissionState {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "required"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PermissionState() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class ForEachElement : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ForEachElement(XElement xe) { return XTypedServices.ToXTypedElement<ForEachElement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ForEachElement() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public ForEachElement() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Select {
            get {
                XAttribute x = this.Attribute(XName.Get("Select", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Select", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ForEachElement", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ForEachElement>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Column2", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Counter", "http://schemas.microsoft.com/sharepoint/"), typeof(CounterDefinition));
            localElementDictionary.Add(XName.Get("CurrentRights", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(XName.Get("FieldPrefix", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("FieldProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("FieldSwitch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("FilterLink", "http://schemas.microsoft.com/sharepoint/"), typeof(FilterLinkDefinition));
            localElementDictionary.Add(XName.Get("GetFileExtension", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(GetVarDefinition));
            localElementDictionary.Add(XName.Get("HTML", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlContentDefinition));
            localElementDictionary.Add(XName.Get("HttpHost", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpHostDefinition));
            localElementDictionary.Add(XName.Get("HttpPath", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("HttpVDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpVDirDefinition));
            localElementDictionary.Add(XName.Get("ID", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfEqual", "http://schemas.microsoft.com/sharepoint/"), typeof(IfEqualDefinition));
            localElementDictionary.Add(XName.Get("IfNeg", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNegDefinition));
            localElementDictionary.Add(XName.Get("IfNew", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNewDefinition));
            localElementDictionary.Add(XName.Get("IfSubString", "http://schemas.microsoft.com/sharepoint/"), typeof(IfSubStringDefinition));
            localElementDictionary.Add(XName.Get("Length", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("Limit", "http://schemas.microsoft.com/sharepoint/"), typeof(LimitDefinition));
            localElementDictionary.Add(XName.Get("List", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrlDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ListPropertyDefinition));
            localElementDictionary.Add(XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"), typeof(LookupColumnDefinition));
            localElementDictionary.Add(XName.Get("MapToAll", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToIcon", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("PageUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("ScriptQuote", "http://schemas.microsoft.com/sharepoint/"), typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(XName.Get("SelectionOptions", "http://schemas.microsoft.com/sharepoint/"), typeof(SelectOptionsDefinition));
            localElementDictionary.Add(XName.Get("ServerProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ServerPropertyDefinition));
            localElementDictionary.Add(XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(SetVarDefinition));
            localElementDictionary.Add(XName.Get("Switch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("ThreadStamp", "http://schemas.microsoft.com/sharepoint/"), typeof(ThreadStampDefinition));
            localElementDictionary.Add(XName.Get("URL", "http://schemas.microsoft.com/sharepoint/"), typeof(URLDefinition));
            localElementDictionary.Add(XName.Get("UrlDirName", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("UrlBaseName", "http://schemas.microsoft.com/sharepoint/"), typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(XName.Get("MeetingProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(XName.Get("ProjectProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"), typeof(UserIDDefinition));
            localElementDictionary.Add(XName.Get("FieldSortParams", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("WebQueryInfo", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Identity", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfHasRights", "http://schemas.microsoft.com/sharepoint/"), typeof(IfHasRightsDefinition));
            localElementDictionary.Add(XName.Get("MapToControl", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("ForEach", "http://schemas.microsoft.com/sharepoint/"), typeof(ForEachElement));
            localElementDictionary.Add(XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToContentType", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class AltType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private AltType() {
        }
    }
    
    public sealed class ClassNameType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private ClassNameType() {
        }
    }
    
    public sealed class ContextualColorType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "None",
                        "DarkBlue",
                        "LightBlue",
                        "Teal",
                        "Orange",
                        "Green",
                        "Magenta",
                        "Yellow",
                        "Purple"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ContextualColorType() {
        }
    }
    
    public sealed class CommandType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private CommandType() {
        }
    }
    
    public sealed class CommandTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "General",
                        "OptionSelection",
                        "IgnoredByMenu"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CommandTypeType() {
        }
    }
    
    public sealed class DescriptionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private DescriptionType() {
        }
    }
    
    public sealed class DisplayModeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Default",
                        "Small",
                        "Medium",
                        "Large",
                        "Text",
                        "Menu",
                        "Menu16",
                        "Menu32",
                        "Thin"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DisplayModeType() {
        }
    }
    
    public sealed class ElementDimensionsType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Size16by16",
                        "Size32by32",
                        "Size48by48",
                        "Size64by48",
                        "Size72by96",
                        "Size96by72",
                        "Size96by96",
                        "Size128by128",
                        "Size190by30",
                        "Size190by40",
                        "Size190by50",
                        "Size190by60"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ElementDimensionsType() {
        }
    }
    
    public sealed class HTMLType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private HTMLType() {
        }
    }
    
    public sealed class IdType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private IdType() {
        }
    }
    
    public sealed class ImageClassType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private ImageClassType() {
        }
    }
    
    public sealed class ImagePositionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger), null);
        
        private ImagePositionType() {
        }
    }
    
    public sealed class ImageUrlType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private ImageUrlType() {
        }
    }
    
    public sealed class LabelCssType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private LabelCssType() {
        }
    }
    
    public sealed class LabelTextType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private LabelTextType() {
        }
    }
    
    public sealed class MenuItemIdType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private MenuItemIdType() {
        }
    }
    
    public sealed class PixelLengthType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private PixelLengthType() {
        }
    }
    
    public sealed class SectionTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Divider",
                        "OneRow",
                        "TwoRow",
                        "ThreeRow"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SectionTypeType() {
        }
    }
    
    public sealed class SectionAlignmentType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Top",
                        "Middle"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SectionAlignmentType() {
        }
    }
    
    public sealed class SequenceType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), null);
        
        private SequenceType() {
        }
    }
    
    public sealed class SizeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private SizeType() {
        }
    }
    
    public sealed class TemplateType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private TemplateType() {
        }
    }
    
    public sealed class TemplateAliasType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private TemplateAliasType() {
        }
    }
    
    public sealed class TextDirectionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private TextDirectionType() {
        }
    }
    
    public sealed class TitleType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private TitleType() {
        }
    }
    
    public sealed class UnitNameType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private UnitNameType() {
        }
    }
    
    public sealed class ValueType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), null);
        
        private ValueType() {
        }
    }
    
    public partial class ButtonType : XTypedElement, IXMetaData {
        
         public static explicit operator ButtonType(XElement xe) { return XTypedServices.ToXTypedElement<ButtonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ButtonType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Alt {
            get {
                XAttribute x = this.Attribute(XName.Get("Alt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Alt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandType {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandValueId {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandValueId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandValueId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image16by16 {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image16by16Class {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image16by16Left {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image16by16Top {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LabelCss {
            get {
                XAttribute x = this.Attribute(XName.Get("LabelCss", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LabelCss", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LabelText {
            get {
                XAttribute x = this.Attribute(XName.Get("LabelText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LabelText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MenuItemId {
            get {
                XAttribute x = this.Attribute(XName.Get("MenuItemId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MenuItemId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipHelpKeyWord", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipHelpKeyWord", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipShortcutKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipShortcutKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ButtonType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ButtonType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class CheckBoxType : XTypedElement, IXMetaData {
        
         public static explicit operator CheckBoxType(XElement xe) { return XTypedServices.ToXTypedElement<CheckBoxType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CheckBoxType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Alt {
            get {
                XAttribute x = this.Attribute(XName.Get("Alt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Alt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LabelText {
            get {
                XAttribute x = this.Attribute(XName.Get("LabelText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LabelText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("QueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MenuItemId {
            get {
                XAttribute x = this.Attribute(XName.Get("MenuItemId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MenuItemId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipHelpKeyWord", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipHelpKeyWord", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipShortcutKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipShortcutKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CheckBoxType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CheckBoxType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Colors?)
    /// </para>
    /// </summary>
    public partial class ColorPickerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ColorPickerType(XElement xe) { return XTypedServices.ToXTypedElement<ColorPickerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ColorPickerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Colors", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Colors?)
        /// </para>
        /// </summary>
        public ColorPickerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Colors?)
        /// </para>
        /// </summary>
        public ColorStylesType Colors {
            get {
                XElement x = this.GetElement(XName.Get("Colors", "http://schemas.microsoft.com/sharepoint/"));
                return ((ColorStylesType)(x));
            }
            set {
                this.SetElement(XName.Get("Colors", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandPreview {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandPreview", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandRevert {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandRevert", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandRevert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("QueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ColorPickerType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ColorPickerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Colors", "http://schemas.microsoft.com/sharepoint/"), typeof(ColorStylesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Color*)
    /// </para>
    /// </summary>
    public partial class ColorStylesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ColorStyleType> ColorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ColorStylesType(XElement xe) { return XTypedServices.ToXTypedElement<ColorStylesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ColorStylesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Color", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Color*)
        /// </para>
        /// </summary>
        public ColorStylesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Color*)
        /// </para>
        /// </summary>
        public IList<ColorStyleType> Color {
            get {
                if ((this.ColorField == null)) {
                    this.ColorField = new XTypedList<ColorStyleType>(this, LinqToXsdTypeManager.Instance, XName.Get("Color", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ColorField;
            }
            set {
                if ((value == null)) {
                    this.ColorField = null;
                }
                else {
                    if ((this.ColorField == null)) {
                        this.ColorField = XTypedList<ColorStyleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Color", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ColorStyleType>(this.ColorField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ColorStylesType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ColorStylesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Color", "http://schemas.microsoft.com/sharepoint/"), typeof(ColorStyleType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ColorStyleType : XTypedElement, IXMetaData {
        
         public static explicit operator ColorStyleType(XElement xe) { return XTypedServices.ToXTypedElement<ColorStyleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ColorStyleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Style {
            get {
                XAttribute x = this.Attribute(XName.Get("Style", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Style", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Color {
            get {
                XAttribute x = this.Attribute(XName.Get("Color", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Color", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayColor {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayColor", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayColor", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ColorStyleType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ColorStyleType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Menu?)
    /// </para>
    /// </summary>
    public partial class ComboBoxType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool AllowFreeFormDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool AutoCompleteDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static decimal AutoCompleteDelayDefaultValue = System.Xml.XmlConvert.ToDecimal("100");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CacheMenuVersionsDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateDynamicallyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateOnlyOnceDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ComboBoxType(XElement xe) { return XTypedServices.ToXTypedElement<ComboBoxType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ComboBoxType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public ComboBoxType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public MenuType Menu {
            get {
                XElement x = this.GetElement(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"));
                return ((MenuType)(x));
            }
            set {
                this.SetElement(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool AllowFreeForm {
            get {
                XAttribute x = this.Attribute(XName.Get("AllowFreeForm", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, AllowFreeFormDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("AllowFreeForm", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AltArrow {
            get {
                XAttribute x = this.Attribute(XName.Get("AltArrow", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AltArrow", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Alt {
            get {
                XAttribute x = this.Attribute(XName.Get("Alt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Alt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool AutoComplete {
            get {
                XAttribute x = this.Attribute(XName.Get("AutoComplete", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, AutoCompleteDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("AutoComplete", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public decimal AutoCompleteDelay {
            get {
                XAttribute x = this.Attribute(XName.Get("AutoCompleteDelay", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype, AutoCompleteDelayDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("AutoCompleteDelay", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool CacheMenuVersions {
            get {
                XAttribute x = this.Attribute(XName.Get("CacheMenuVersions", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CacheMenuVersionsDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("CacheMenuVersions", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandMenuOpen {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandMenuOpen", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandMenuOpen", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandMenuClose {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandMenuClose", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandMenuClose", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandPreview {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandPreview", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandPreviewRevert {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandPreviewRevert", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandPreviewRevert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> ImeEnabled {
            get {
                XAttribute x = this.Attribute(XName.Get("ImeEnabled", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImeEnabled", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string InitialItem {
            get {
                XAttribute x = this.Attribute(XName.Get("InitialItem", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("InitialItem", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("QueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool PopulateDynamically {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateDynamically", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateDynamicallyDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("PopulateDynamically", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PopulateQueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateQueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PopulateQueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool PopulateOnlyOnce {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateOnlyOnce", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateOnlyOnceDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("PopulateOnlyOnce", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipHelpKeyWord", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipHelpKeyWord", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipSelectedItemTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipSelectedItemTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipSelectedItemTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipShortcutKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipShortcutKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Width {
            get {
                XAttribute x = this.Attribute(XName.Get("Width", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Width", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ComboBoxType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ComboBoxType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"), typeof(MenuType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
    /// </para>
    /// </summary>
    public partial class CommandUIType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RibbonType> RibbonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<QATType> QATField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<JewelType> JewelField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TemplatesType> TemplatesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator CommandUIType(XElement xe) { return XTypedServices.ToXTypedElement<CommandUIType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CommandUIType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public CommandUIType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public IList<RibbonType> Ribbon {
            get {
                if ((this.RibbonField == null)) {
                    this.RibbonField = new XTypedList<RibbonType>(this, LinqToXsdTypeManager.Instance, XName.Get("Ribbon", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.RibbonField;
            }
            set {
                if ((value == null)) {
                    this.RibbonField = null;
                }
                else {
                    if ((this.RibbonField == null)) {
                        this.RibbonField = XTypedList<RibbonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Ribbon", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<RibbonType>(this.RibbonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public IList<QATType> QAT {
            get {
                if ((this.QATField == null)) {
                    this.QATField = new XTypedList<QATType>(this, LinqToXsdTypeManager.Instance, XName.Get("QAT", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.QATField;
            }
            set {
                if ((value == null)) {
                    this.QATField = null;
                }
                else {
                    if ((this.QATField == null)) {
                        this.QATField = XTypedList<QATType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("QAT", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<QATType>(this.QATField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public IList<JewelType> Jewel {
            get {
                if ((this.JewelField == null)) {
                    this.JewelField = new XTypedList<JewelType>(this, LinqToXsdTypeManager.Instance, XName.Get("Jewel", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.JewelField;
            }
            set {
                if ((value == null)) {
                    this.JewelField = null;
                }
                else {
                    if ((this.JewelField == null)) {
                        this.JewelField = XTypedList<JewelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Jewel", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<JewelType>(this.JewelField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public IList<TemplatesType> Templates {
            get {
                if ((this.TemplatesField == null)) {
                    this.TemplatesField = new XTypedList<TemplatesType>(this, LinqToXsdTypeManager.Instance, XName.Get("Templates", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.TemplatesField;
            }
            set {
                if ((value == null)) {
                    this.TemplatesField = null;
                }
                else {
                    if ((this.TemplatesField == null)) {
                        this.TemplatesField = XTypedList<TemplatesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Templates", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<TemplatesType>(this.TemplatesField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CommandUIType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommandUIType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Ribbon", "http://schemas.microsoft.com/sharepoint/"), typeof(RibbonType));
            localElementDictionary.Add(XName.Get("QAT", "http://schemas.microsoft.com/sharepoint/"), typeof(QATType));
            localElementDictionary.Add(XName.Get("Jewel", "http://schemas.microsoft.com/sharepoint/"), typeof(JewelType));
            localElementDictionary.Add(XName.Get("Templates", "http://schemas.microsoft.com/sharepoint/"), typeof(TemplatesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Tab*)
    /// </para>
    /// </summary>
    public partial class ContextualGroupType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TabType> TabField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ContextualGroupType(XElement xe) { return XTypedServices.ToXTypedElement<ContextualGroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContextualGroupType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Tab*)
        /// </para>
        /// </summary>
        public ContextualGroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Tab*)
        /// </para>
        /// </summary>
        public IList<TabType> Tab {
            get {
                if ((this.TabField == null)) {
                    this.TabField = new XTypedList<TabType>(this, LinqToXsdTypeManager.Instance, XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.TabField;
            }
            set {
                if ((value == null)) {
                    this.TabField = null;
                }
                else {
                    if ((this.TabField == null)) {
                        this.TabField = XTypedList<TabType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<TabType>(this.TabField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Color {
            get {
                XAttribute x = this.Attribute(XName.Get("Color", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Color", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ContextualGroupId {
            get {
                XAttribute x = this.Attribute(XName.Get("ContextualGroupId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ContextualGroupId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContextualGroupType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContextualGroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/"), typeof(TabType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ContextualGroup*)
    /// </para>
    /// </summary>
    public partial class ContextualTabsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContextualGroupType> ContextualGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ContextualTabsType(XElement xe) { return XTypedServices.ToXTypedElement<ContextualTabsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContextualTabsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ContextualGroup", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ContextualGroup*)
        /// </para>
        /// </summary>
        public ContextualTabsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContextualGroup*)
        /// </para>
        /// </summary>
        public IList<ContextualGroupType> ContextualGroup {
            get {
                if ((this.ContextualGroupField == null)) {
                    this.ContextualGroupField = new XTypedList<ContextualGroupType>(this, LinqToXsdTypeManager.Instance, XName.Get("ContextualGroup", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ContextualGroupField;
            }
            set {
                if ((value == null)) {
                    this.ContextualGroupField = null;
                }
                else {
                    if ((this.ContextualGroupField == null)) {
                        this.ContextualGroupField = XTypedList<ContextualGroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ContextualGroup", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ContextualGroupType>(this.ContextualGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContextualTabsType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContextualTabsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ContextualGroup", "http://schemas.microsoft.com/sharepoint/"), typeof(ContextualGroupType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ControlRefType : XTypedElement, IXMetaData {
        
         public static explicit operator ControlRefType(XElement xe) { return XTypedServices.ToXTypedElement<ControlRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ControlRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayMode {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayMode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayMode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ControlRefType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ControlRefType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
    /// </para>
    /// </summary>
    public partial class ControlsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ButtonType> ButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CheckBoxType> CheckBoxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ComboBoxType> ComboBoxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DropDownType> DropDownField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FlyoutAnchorType> FlyoutAnchorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GalleryButtonType> GalleryButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LabelType> LabelField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MRUSplitButtonType> MRUSplitButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpinnerType> SpinnerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SplitButtonType> SplitButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TextBoxType> TextBoxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ToggleButtonType> ToggleButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ControlsType(XElement xe) { return XTypedServices.ToXTypedElement<ControlsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ControlsType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public ControlsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public IList<ButtonType> Button {
            get {
                if ((this.ButtonField == null)) {
                    this.ButtonField = new XTypedList<ButtonType>(this, LinqToXsdTypeManager.Instance, XName.Get("Button", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ButtonField;
            }
            set {
                if ((value == null)) {
                    this.ButtonField = null;
                }
                else {
                    if ((this.ButtonField == null)) {
                        this.ButtonField = XTypedList<ButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Button", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ButtonType>(this.ButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public IList<CheckBoxType> CheckBox {
            get {
                if ((this.CheckBoxField == null)) {
                    this.CheckBoxField = new XTypedList<CheckBoxType>(this, LinqToXsdTypeManager.Instance, XName.Get("CheckBox", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.CheckBoxField;
            }
            set {
                if ((value == null)) {
                    this.CheckBoxField = null;
                }
                else {
                    if ((this.CheckBoxField == null)) {
                        this.CheckBoxField = XTypedList<CheckBoxType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CheckBox", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CheckBoxType>(this.CheckBoxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public IList<ComboBoxType> ComboBox {
            get {
                if ((this.ComboBoxField == null)) {
                    this.ComboBoxField = new XTypedList<ComboBoxType>(this, LinqToXsdTypeManager.Instance, XName.Get("ComboBox", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ComboBoxField;
            }
            set {
                if ((value == null)) {
                    this.ComboBoxField = null;
                }
                else {
                    if ((this.ComboBoxField == null)) {
                        this.ComboBoxField = XTypedList<ComboBoxType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ComboBox", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ComboBoxType>(this.ComboBoxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public IList<DropDownType> DropDown {
            get {
                if ((this.DropDownField == null)) {
                    this.DropDownField = new XTypedList<DropDownType>(this, LinqToXsdTypeManager.Instance, XName.Get("DropDown", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.DropDownField;
            }
            set {
                if ((value == null)) {
                    this.DropDownField = null;
                }
                else {
                    if ((this.DropDownField == null)) {
                        this.DropDownField = XTypedList<DropDownType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DropDown", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<DropDownType>(this.DropDownField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public IList<FlyoutAnchorType> FlyoutAnchor {
            get {
                if ((this.FlyoutAnchorField == null)) {
                    this.FlyoutAnchorField = new XTypedList<FlyoutAnchorType>(this, LinqToXsdTypeManager.Instance, XName.Get("FlyoutAnchor", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FlyoutAnchorField;
            }
            set {
                if ((value == null)) {
                    this.FlyoutAnchorField = null;
                }
                else {
                    if ((this.FlyoutAnchorField == null)) {
                        this.FlyoutAnchorField = XTypedList<FlyoutAnchorType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FlyoutAnchor", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FlyoutAnchorType>(this.FlyoutAnchorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public IList<GalleryButtonType> GalleryButton {
            get {
                if ((this.GalleryButtonField == null)) {
                    this.GalleryButtonField = new XTypedList<GalleryButtonType>(this, LinqToXsdTypeManager.Instance, XName.Get("GalleryButton", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.GalleryButtonField;
            }
            set {
                if ((value == null)) {
                    this.GalleryButtonField = null;
                }
                else {
                    if ((this.GalleryButtonField == null)) {
                        this.GalleryButtonField = XTypedList<GalleryButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("GalleryButton", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<GalleryButtonType>(this.GalleryButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public IList<LabelType> Label {
            get {
                if ((this.LabelField == null)) {
                    this.LabelField = new XTypedList<LabelType>(this, LinqToXsdTypeManager.Instance, XName.Get("Label", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.LabelField;
            }
            set {
                if ((value == null)) {
                    this.LabelField = null;
                }
                else {
                    if ((this.LabelField == null)) {
                        this.LabelField = XTypedList<LabelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Label", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LabelType>(this.LabelField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public IList<MRUSplitButtonType> MRUSplitButton {
            get {
                if ((this.MRUSplitButtonField == null)) {
                    this.MRUSplitButtonField = new XTypedList<MRUSplitButtonType>(this, LinqToXsdTypeManager.Instance, XName.Get("MRUSplitButton", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MRUSplitButtonField;
            }
            set {
                if ((value == null)) {
                    this.MRUSplitButtonField = null;
                }
                else {
                    if ((this.MRUSplitButtonField == null)) {
                        this.MRUSplitButtonField = XTypedList<MRUSplitButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MRUSplitButton", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<MRUSplitButtonType>(this.MRUSplitButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public IList<SpinnerType> Spinner {
            get {
                if ((this.SpinnerField == null)) {
                    this.SpinnerField = new XTypedList<SpinnerType>(this, LinqToXsdTypeManager.Instance, XName.Get("Spinner", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.SpinnerField;
            }
            set {
                if ((value == null)) {
                    this.SpinnerField = null;
                }
                else {
                    if ((this.SpinnerField == null)) {
                        this.SpinnerField = XTypedList<SpinnerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Spinner", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<SpinnerType>(this.SpinnerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public IList<SplitButtonType> SplitButton {
            get {
                if ((this.SplitButtonField == null)) {
                    this.SplitButtonField = new XTypedList<SplitButtonType>(this, LinqToXsdTypeManager.Instance, XName.Get("SplitButton", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.SplitButtonField;
            }
            set {
                if ((value == null)) {
                    this.SplitButtonField = null;
                }
                else {
                    if ((this.SplitButtonField == null)) {
                        this.SplitButtonField = XTypedList<SplitButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SplitButton", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<SplitButtonType>(this.SplitButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public IList<TextBoxType> TextBox {
            get {
                if ((this.TextBoxField == null)) {
                    this.TextBoxField = new XTypedList<TextBoxType>(this, LinqToXsdTypeManager.Instance, XName.Get("TextBox", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.TextBoxField;
            }
            set {
                if ((value == null)) {
                    this.TextBoxField = null;
                }
                else {
                    if ((this.TextBoxField == null)) {
                        this.TextBoxField = XTypedList<TextBoxType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TextBox", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<TextBoxType>(this.TextBoxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public IList<ToggleButtonType> ToggleButton {
            get {
                if ((this.ToggleButtonField == null)) {
                    this.ToggleButtonField = new XTypedList<ToggleButtonType>(this, LinqToXsdTypeManager.Instance, XName.Get("ToggleButton", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ToggleButtonField;
            }
            set {
                if ((value == null)) {
                    this.ToggleButtonField = null;
                }
                else {
                    if ((this.ToggleButtonField == null)) {
                        this.ToggleButtonField = XTypedList<ToggleButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ToggleButton", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ToggleButtonType>(this.ToggleButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipHelpKeyWord", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipHelpKeyWord", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipShortcutKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipShortcutKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipSelectedItemTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipSelectedItemTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipSelectedItemTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ControlsType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ControlsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Button", "http://schemas.microsoft.com/sharepoint/"), typeof(ButtonType));
            localElementDictionary.Add(XName.Get("CheckBox", "http://schemas.microsoft.com/sharepoint/"), typeof(CheckBoxType));
            localElementDictionary.Add(XName.Get("ComboBox", "http://schemas.microsoft.com/sharepoint/"), typeof(ComboBoxType));
            localElementDictionary.Add(XName.Get("DropDown", "http://schemas.microsoft.com/sharepoint/"), typeof(DropDownType));
            localElementDictionary.Add(XName.Get("FlyoutAnchor", "http://schemas.microsoft.com/sharepoint/"), typeof(FlyoutAnchorType));
            localElementDictionary.Add(XName.Get("GalleryButton", "http://schemas.microsoft.com/sharepoint/"), typeof(GalleryButtonType));
            localElementDictionary.Add(XName.Get("Label", "http://schemas.microsoft.com/sharepoint/"), typeof(LabelType));
            localElementDictionary.Add(XName.Get("MRUSplitButton", "http://schemas.microsoft.com/sharepoint/"), typeof(MRUSplitButtonType));
            localElementDictionary.Add(XName.Get("Spinner", "http://schemas.microsoft.com/sharepoint/"), typeof(SpinnerType));
            localElementDictionary.Add(XName.Get("SplitButton", "http://schemas.microsoft.com/sharepoint/"), typeof(SplitButtonType));
            localElementDictionary.Add(XName.Get("TextBox", "http://schemas.microsoft.com/sharepoint/"), typeof(TextBoxType));
            localElementDictionary.Add(XName.Get("ToggleButton", "http://schemas.microsoft.com/sharepoint/"), typeof(ToggleButtonType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Menu?)
    /// </para>
    /// </summary>
    public partial class DropDownType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CacheMenuVersionsDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateDynamicallyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateOnlyOnceDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DropDownType(XElement xe) { return XTypedServices.ToXTypedElement<DropDownType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DropDownType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public DropDownType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public MenuType Menu {
            get {
                XElement x = this.GetElement(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"));
                return ((MenuType)(x));
            }
            set {
                this.SetElement(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AltArrow {
            get {
                XAttribute x = this.Attribute(XName.Get("AltArrow", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AltArrow", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Alt {
            get {
                XAttribute x = this.Attribute(XName.Get("Alt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Alt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool CacheMenuVersions {
            get {
                XAttribute x = this.Attribute(XName.Get("CacheMenuVersions", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CacheMenuVersionsDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("CacheMenuVersions", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandMenuOpen {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandMenuOpen", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandMenuOpen", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandMenuClose {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandMenuClose", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandMenuClose", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandPreview {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandPreview", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandPreviewRevert {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandPreviewRevert", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandPreviewRevert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string InitialItem {
            get {
                XAttribute x = this.Attribute(XName.Get("InitialItem", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("InitialItem", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool PopulateDynamically {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateDynamically", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateDynamicallyDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("PopulateDynamically", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PopulateQueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateQueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PopulateQueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool PopulateOnlyOnce {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateOnlyOnce", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateOnlyOnceDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("PopulateOnlyOnce", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("QueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipHelpKeyWord", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipHelpKeyWord", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipShortcutKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipShortcutKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipSelectedItemTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipSelectedItemTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipSelectedItemTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Width {
            get {
                XAttribute x = this.Attribute(XName.Get("Width", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Width", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SelectedItemDisplayMode {
            get {
                XAttribute x = this.Attribute(XName.Get("SelectedItemDisplayMode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SelectedItemDisplayMode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DropDownType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DropDownType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"), typeof(MenuType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Menu?)
    /// </para>
    /// </summary>
    public partial class FlyoutAnchorType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CacheMenuVersionsDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateDynamicallyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateOnlyOnceDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FlyoutAnchorType(XElement xe) { return XTypedServices.ToXTypedElement<FlyoutAnchorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlyoutAnchorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public FlyoutAnchorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public MenuType Menu {
            get {
                XElement x = this.GetElement(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"));
                return ((MenuType)(x));
            }
            set {
                this.SetElement(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Alt {
            get {
                XAttribute x = this.Attribute(XName.Get("Alt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Alt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool CacheMenuVersions {
            get {
                XAttribute x = this.Attribute(XName.Get("CacheMenuVersions", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CacheMenuVersionsDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("CacheMenuVersions", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandType {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandMenuClose {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandMenuClose", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandMenuClose", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image16by16 {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image16by16Class {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image16by16Left {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image16by16Top {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LabelText {
            get {
                XAttribute x = this.Attribute(XName.Get("LabelText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LabelText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool PopulateDynamically {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateDynamically", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateDynamicallyDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("PopulateDynamically", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PopulateQueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateQueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PopulateQueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool PopulateOnlyOnce {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateOnlyOnce", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateOnlyOnceDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("PopulateOnlyOnce", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipHelpKeyWord", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipHelpKeyWord", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipSelectedItemTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipSelectedItemTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipSelectedItemTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipShortcutKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipShortcutKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FlyoutAnchorType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlyoutAnchorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"), typeof(MenuType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GalleryButton+)
    /// </para>
    /// </summary>
    public partial class GalleryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GalleryButtonType> GalleryButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator GalleryType(XElement xe) { return XTypedServices.ToXTypedElement<GalleryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GalleryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("GalleryButton", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GalleryButton+)
        /// </para>
        /// </summary>
        public GalleryType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GalleryButton+)
        /// </para>
        /// </summary>
        public IList<GalleryButtonType> GalleryButton {
            get {
                if ((this.GalleryButtonField == null)) {
                    this.GalleryButtonField = new XTypedList<GalleryButtonType>(this, LinqToXsdTypeManager.Instance, XName.Get("GalleryButton", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.GalleryButtonField;
            }
            set {
                if ((value == null)) {
                    this.GalleryButtonField = null;
                }
                else {
                    if ((this.GalleryButtonField == null)) {
                        this.GalleryButtonField = XTypedList<GalleryButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("GalleryButton", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<GalleryButtonType>(this.GalleryButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandPreview {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandPreview", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandRevert {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandRevert", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandRevert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ElementDimensions {
            get {
                XAttribute x = this.Attribute(XName.Get("ElementDimensions", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ElementDimensions", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("QueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public decimal Width {
            get {
                XAttribute x = this.Attribute(XName.Get("Width", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Width", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GalleryType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GalleryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("GalleryButton", "http://schemas.microsoft.com/sharepoint/"), typeof(GalleryButtonType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class GalleryButtonType : XTypedElement, IXMetaData {
        
         public static explicit operator GalleryButtonType(XElement xe) { return XTypedServices.ToXTypedElement<GalleryButtonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GalleryButtonType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Alt {
            get {
                XAttribute x = this.Attribute(XName.Get("Alt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Alt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandPreview {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandPreview", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandRevert {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandRevert", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandRevert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandType {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandValueId {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandValueId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandValueId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ElementDimensions {
            get {
                XAttribute x = this.Attribute(XName.Get("ElementDimensions", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ElementDimensions", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image {
            get {
                XAttribute x = this.Attribute(XName.Get("Image", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string InnerHTML {
            get {
                XAttribute x = this.Attribute(XName.Get("InnerHTML", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("InnerHTML", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MenuItemId {
            get {
                XAttribute x = this.Attribute(XName.Get("MenuItemId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MenuItemId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("QueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipHelpKeyWord", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipHelpKeyWord", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipShortcutKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipShortcutKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GalleryButtonType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GalleryButtonType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Layout*)
    /// </para>
    /// </summary>
    public partial class GroupTemplateType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LayoutType> LayoutField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator GroupTemplateType(XElement xe) { return XTypedServices.ToXTypedElement<GroupTemplateType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroupTemplateType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Layout", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Layout*)
        /// </para>
        /// </summary>
        public GroupTemplateType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Layout*)
        /// </para>
        /// </summary>
        public IList<LayoutType> Layout {
            get {
                if ((this.LayoutField == null)) {
                    this.LayoutField = new XTypedList<LayoutType>(this, LinqToXsdTypeManager.Instance, XName.Get("Layout", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.LayoutField;
            }
            set {
                if ((value == null)) {
                    this.LayoutField = null;
                }
                else {
                    if ((this.LayoutField == null)) {
                        this.LayoutField = XTypedList<LayoutType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Layout", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LayoutType>(this.LayoutField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ClassName {
            get {
                XAttribute x = this.Attribute(XName.Get("ClassName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ClassName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupTemplateType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroupTemplateType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Layout", "http://schemas.microsoft.com/sharepoint/"), typeof(LayoutType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Group*)
    /// </para>
    /// </summary>
    public partial class GroupsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GroupType> GroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator GroupsType(XElement xe) { return XTypedServices.ToXTypedElement<GroupsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroupsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Group", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Group*)
        /// </para>
        /// </summary>
        public GroupsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Group*)
        /// </para>
        /// </summary>
        public IList<GroupType> Group {
            get {
                if ((this.GroupField == null)) {
                    this.GroupField = new XTypedList<GroupType>(this, LinqToXsdTypeManager.Instance, XName.Get("Group", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.GroupField;
            }
            set {
                if ((value == null)) {
                    this.GroupField = null;
                }
                else {
                    if ((this.GroupField == null)) {
                        this.GroupField = XTypedList<GroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Group", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<GroupType>(this.GroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupsType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroupsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Group", "http://schemas.microsoft.com/sharepoint/"), typeof(GroupType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Controls)
    /// </para>
    /// </summary>
    public partial class GroupType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator GroupType(XElement xe) { return XTypedServices.ToXTypedElement<GroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroupType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Controls)
        /// </para>
        /// </summary>
        public GroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Controls)
        /// </para>
        /// </summary>
        public ControlsType Controls {
            get {
                XElement x = this.GetElement(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/"));
                return ((ControlsType)(x));
            }
            set {
                this.SetElement(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image32by32Popup {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32Popup", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32Popup", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image32by32PopupClass {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32PopupClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32PopupClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image32by32PopupLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32PopupLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32PopupLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image32by32PopupTop {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32PopupTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32PopupTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PopupWidth {
            get {
                XAttribute x = this.Attribute(XName.Get("PopupWidth", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PopupWidth", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Template {
            get {
                XAttribute x = this.Attribute(XName.Get("Template", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Template", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/"), typeof(ControlsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class InsertTableType : XTypedElement, IXMetaData {
        
         public static explicit operator InsertTableType(XElement xe) { return XTypedServices.ToXTypedElement<InsertTableType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public InsertTableType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Alt {
            get {
                XAttribute x = this.Attribute(XName.Get("Alt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Alt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandType {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandPreview {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandPreview", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandRevert {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandRevert", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandRevert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MenuSectionInitialTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("MenuSectionInitialTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MenuSectionInitialTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MenuSectionTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("MenuSectionTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MenuSectionTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("InsertTableType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InsertTableType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Menu?)
    /// </para>
    /// </summary>
    public partial class JewelType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CacheMenuVersionsDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateDynamicallyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateOnlyOnceDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator JewelType(XElement xe) { return XTypedServices.ToXTypedElement<JewelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static JewelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public JewelType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public MenuType Menu {
            get {
                XElement x = this.GetElement(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"));
                return ((MenuType)(x));
            }
            set {
                this.SetElement(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Alt {
            get {
                XAttribute x = this.Attribute(XName.Get("Alt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Alt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool CacheMenuVersions {
            get {
                XAttribute x = this.Attribute(XName.Get("CacheMenuVersions", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CacheMenuVersionsDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("CacheMenuVersions", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandMenuClose {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandMenuClose", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandMenuClose", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandMenuOpen {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandMenuOpen", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandMenuOpen", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Height {
            get {
                XAttribute x = this.Attribute(XName.Get("Height", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Height", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageDownArrow {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownArrow", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownArrow", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageDownArrowClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownArrowClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownArrowClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageDownArrowLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownArrowLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownArrowLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageDownArrowTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownArrowTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownArrowTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageSideArrow {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageSideArrow", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageSideArrow", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageSideArrowClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageSideArrowClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageSideArrowClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageSideArrowLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageSideArrowLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageSideArrowLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageSideArrowTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageSideArrowTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageSideArrowTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUpArrow {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUpArrow", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUpArrow", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUpArrowClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUpArrowClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUpArrowClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageUpArrowLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUpArrowLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUpArrowLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageUpArrowTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUpArrowTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUpArrowTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image {
            get {
                XAttribute x = this.Attribute(XName.Get("Image", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageHover {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageHover", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageHover", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageHoverClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageHoverClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageHoverClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageHoverLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageHoverLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageHoverLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageHoverTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageHoverTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageHoverTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageDown {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDown", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDown", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageDownClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageDownLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageDownTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageLeftSide {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeftSide", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeftSide", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageLeftSideClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeftSideClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeftSideClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageLeftSideLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeftSideLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeftSideLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageLeftSideTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeftSideTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeftSideTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageLeftSideWidth {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeftSideWidth", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeftSideWidth", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageLeftSideHover {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeftSideHover", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeftSideHover", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageLeftSideHoverClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeftSideHoverClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeftSideHoverClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageLeftSideHoverLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeftSideHoverLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeftSideHoverLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageLeftSideHoverTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeftSideHoverTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeftSideHoverTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageLeftSideDown {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeftSideDown", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeftSideDown", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageLeftSideDownClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeftSideDownClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeftSideDownClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageLeftSideDownLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeftSideDownLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeftSideDownLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageLeftSideDownTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageLeftSideDownTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageLeftSideDownTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageRightSide {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageRightSide", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageRightSide", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageRightSideClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageRightSideClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageRightSideClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageRightSideLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageRightSideLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageRightSideLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageRightSideTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageRightSideTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageRightSideTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageRightSideWidth {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageRightSideWidth", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageRightSideWidth", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageRightSideHover {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageRightSideHover", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageRightSideHover", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageRightSideHoverClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageRightSideHoverClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageRightSideHoverClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageRightSideHoverLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageRightSideHoverLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageRightSideHoverLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageRightSideHoverTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageRightSideHoverTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageRightSideHoverTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageRightSideDown {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageRightSideDown", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageRightSideDown", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageRightSideDownClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageRightSideDownClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageRightSideDownClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageRightSideDownLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageRightSideDownLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageRightSideDownLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageRightSideDownTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageRightSideDownTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageRightSideDownTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LabelCss {
            get {
                XAttribute x = this.Attribute(XName.Get("LabelCss", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LabelCss", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LabelText {
            get {
                XAttribute x = this.Attribute(XName.Get("LabelText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LabelText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool PopulateDynamically {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateDynamically", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateDynamicallyDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("PopulateDynamically", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PopulateQueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateQueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PopulateQueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool PopulateOnlyOnce {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateOnlyOnce", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateOnlyOnceDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("PopulateOnlyOnce", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("JewelType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<JewelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"), typeof(MenuType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class LabelType : XTypedElement, IXMetaData {
        
         public static explicit operator LabelType(XElement xe) { return XTypedServices.ToXTypedElement<LabelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public LabelType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ForId {
            get {
                XAttribute x = this.Attribute(XName.Get("ForId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ForId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LabelText {
            get {
                XAttribute x = this.Attribute(XName.Get("LabelText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LabelText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image16by16 {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image16by16Class {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image16by16Left {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image16by16Top {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("QueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LabelType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LabelType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Section* | OverflowSection*)*)
    /// </para>
    /// </summary>
    public partial class LayoutType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SectionType> SectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OverflowSectionType> OverflowSectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator LayoutType(XElement xe) { return XTypedServices.ToXTypedElement<LayoutType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LayoutType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Section* | OverflowSection*)*)
        /// </para>
        /// </summary>
        public LayoutType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Section* | OverflowSection*)*)
        /// </para>
        /// </summary>
        public IList<SectionType> Section {
            get {
                if ((this.SectionField == null)) {
                    this.SectionField = new XTypedList<SectionType>(this, LinqToXsdTypeManager.Instance, XName.Get("Section", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.SectionField;
            }
            set {
                if ((value == null)) {
                    this.SectionField = null;
                }
                else {
                    if ((this.SectionField == null)) {
                        this.SectionField = XTypedList<SectionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Section", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<SectionType>(this.SectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Section* | OverflowSection*)*)
        /// </para>
        /// </summary>
        public IList<OverflowSectionType> OverflowSection {
            get {
                if ((this.OverflowSectionField == null)) {
                    this.OverflowSectionField = new XTypedList<OverflowSectionType>(this, LinqToXsdTypeManager.Instance, XName.Get("OverflowSection", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.OverflowSectionField;
            }
            set {
                if ((value == null)) {
                    this.OverflowSectionField = null;
                }
                else {
                    if ((this.OverflowSectionField == null)) {
                        this.OverflowSectionField = XTypedList<OverflowSectionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OverflowSection", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<OverflowSectionType>(this.OverflowSectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LayoutTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("LayoutTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LayoutTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LayoutType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LayoutType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Section", "http://schemas.microsoft.com/sharepoint/"), typeof(SectionType));
            localElementDictionary.Add(XName.Get("OverflowSection", "http://schemas.microsoft.com/sharepoint/"), typeof(OverflowSectionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class MaxSizeType : XTypedElement, IXMetaData {
        
         public static explicit operator MaxSizeType(XElement xe) { return XTypedServices.ToXTypedElement<MaxSizeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public MaxSizeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string GroupId {
            get {
                XAttribute x = this.Attribute(XName.Get("GroupId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("GroupId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Size {
            get {
                XAttribute x = this.Attribute(XName.Get("Size", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MaxSizeType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MaxSizeType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MenuSection+)
    /// </para>
    /// </summary>
    public partial class MenuType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MenuSectionType> MenuSectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MenuType(XElement xe) { return XTypedServices.ToXTypedElement<MenuType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MenuType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MenuSection", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MenuSection+)
        /// </para>
        /// </summary>
        public MenuType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MenuSection+)
        /// </para>
        /// </summary>
        public IList<MenuSectionType> MenuSection {
            get {
                if ((this.MenuSectionField == null)) {
                    this.MenuSectionField = new XTypedList<MenuSectionType>(this, LinqToXsdTypeManager.Instance, XName.Get("MenuSection", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MenuSectionField;
            }
            set {
                if ((value == null)) {
                    this.MenuSectionField = null;
                }
                else {
                    if ((this.MenuSectionField == null)) {
                        this.MenuSectionField = XTypedList<MenuSectionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MenuSection", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<MenuSectionType>(this.MenuSectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MaxWidth {
            get {
                XAttribute x = this.Attribute(XName.Get("MaxWidth", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MaxWidth", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MenuType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MenuType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MenuSection", "http://schemas.microsoft.com/sharepoint/"), typeof(MenuSectionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Controls | Gallery)
    /// </para>
    /// </summary>
    public partial class MenuSectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool ScrollableDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string DisplayModeDefaultValue = "Menu";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MenuSectionType(XElement xe) { return XTypedServices.ToXTypedElement<MenuSectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MenuSectionType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Gallery", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Controls | Gallery)
        /// </para>
        /// </summary>
        public MenuSectionType() {
        }
        
        public MenuSectionType(MenuSectionControlsType Controls) {
            this.Controls = Controls;
        }
        
        public MenuSectionType(GalleryType Gallery) {
            this.Gallery = Gallery;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Controls | Gallery)
        /// </para>
        /// </summary>
        public MenuSectionControlsType Controls {
            get {
                XElement x = this.GetElement(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/"));
                return ((MenuSectionControlsType)(x));
            }
            set {
                this.SetElement(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Controls | Gallery)
        /// </para>
        /// </summary>
        public GalleryType Gallery {
            get {
                XElement x = this.GetElement(XName.Get("Gallery", "http://schemas.microsoft.com/sharepoint/"));
                return ((GalleryType)(x));
            }
            set {
                this.SetElement(XName.Get("Gallery", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool Scrollable {
            get {
                XAttribute x = this.Attribute(XName.Get("Scrollable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, ScrollableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("Scrollable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MaxHeight {
            get {
                XAttribute x = this.Attribute(XName.Get("MaxHeight", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MaxHeight", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayMode {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayMode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, DisplayModeDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("DisplayMode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MenuSectionType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MenuSectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/"), typeof(MenuSectionControlsType));
            localElementDictionary.Add(XName.Get("Gallery", "http://schemas.microsoft.com/sharepoint/"), typeof(GalleryType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ToggleButton* | Button* | ColorPicker* | FlyoutAnchor* | InsertTable*)*)
    /// </para>
    /// </summary>
    public partial class MenuSectionControlsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ToggleButtonType> ToggleButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ButtonType> ButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ColorPickerType> ColorPickerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FlyoutAnchorType> FlyoutAnchorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InsertTableType> InsertTableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator MenuSectionControlsType(XElement xe) { return XTypedServices.ToXTypedElement<MenuSectionControlsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MenuSectionControlsType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ToggleButton* | Button* | ColorPicker* | FlyoutAnchor* | InsertTable*)*)
        /// </para>
        /// </summary>
        public MenuSectionControlsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ToggleButton* | Button* | ColorPicker* | FlyoutAnchor* | InsertTable*)*)
        /// </para>
        /// </summary>
        public IList<ToggleButtonType> ToggleButton {
            get {
                if ((this.ToggleButtonField == null)) {
                    this.ToggleButtonField = new XTypedList<ToggleButtonType>(this, LinqToXsdTypeManager.Instance, XName.Get("ToggleButton", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ToggleButtonField;
            }
            set {
                if ((value == null)) {
                    this.ToggleButtonField = null;
                }
                else {
                    if ((this.ToggleButtonField == null)) {
                        this.ToggleButtonField = XTypedList<ToggleButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ToggleButton", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ToggleButtonType>(this.ToggleButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ToggleButton* | Button* | ColorPicker* | FlyoutAnchor* | InsertTable*)*)
        /// </para>
        /// </summary>
        public IList<ButtonType> Button {
            get {
                if ((this.ButtonField == null)) {
                    this.ButtonField = new XTypedList<ButtonType>(this, LinqToXsdTypeManager.Instance, XName.Get("Button", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ButtonField;
            }
            set {
                if ((value == null)) {
                    this.ButtonField = null;
                }
                else {
                    if ((this.ButtonField == null)) {
                        this.ButtonField = XTypedList<ButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Button", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ButtonType>(this.ButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ToggleButton* | Button* | ColorPicker* | FlyoutAnchor* | InsertTable*)*)
        /// </para>
        /// </summary>
        public IList<ColorPickerType> ColorPicker {
            get {
                if ((this.ColorPickerField == null)) {
                    this.ColorPickerField = new XTypedList<ColorPickerType>(this, LinqToXsdTypeManager.Instance, XName.Get("ColorPicker", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ColorPickerField;
            }
            set {
                if ((value == null)) {
                    this.ColorPickerField = null;
                }
                else {
                    if ((this.ColorPickerField == null)) {
                        this.ColorPickerField = XTypedList<ColorPickerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ColorPicker", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ColorPickerType>(this.ColorPickerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ToggleButton* | Button* | ColorPicker* | FlyoutAnchor* | InsertTable*)*)
        /// </para>
        /// </summary>
        public IList<FlyoutAnchorType> FlyoutAnchor {
            get {
                if ((this.FlyoutAnchorField == null)) {
                    this.FlyoutAnchorField = new XTypedList<FlyoutAnchorType>(this, LinqToXsdTypeManager.Instance, XName.Get("FlyoutAnchor", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FlyoutAnchorField;
            }
            set {
                if ((value == null)) {
                    this.FlyoutAnchorField = null;
                }
                else {
                    if ((this.FlyoutAnchorField == null)) {
                        this.FlyoutAnchorField = XTypedList<FlyoutAnchorType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FlyoutAnchor", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FlyoutAnchorType>(this.FlyoutAnchorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ToggleButton* | Button* | ColorPicker* | FlyoutAnchor* | InsertTable*)*)
        /// </para>
        /// </summary>
        public IList<InsertTableType> InsertTable {
            get {
                if ((this.InsertTableField == null)) {
                    this.InsertTableField = new XTypedList<InsertTableType>(this, LinqToXsdTypeManager.Instance, XName.Get("InsertTable", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.InsertTableField;
            }
            set {
                if ((value == null)) {
                    this.InsertTableField = null;
                }
                else {
                    if ((this.InsertTableField == null)) {
                        this.InsertTableField = XTypedList<InsertTableType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("InsertTable", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<InsertTableType>(this.InsertTableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MenuSectionControlsType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MenuSectionControlsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ToggleButton", "http://schemas.microsoft.com/sharepoint/"), typeof(ToggleButtonType));
            localElementDictionary.Add(XName.Get("Button", "http://schemas.microsoft.com/sharepoint/"), typeof(ButtonType));
            localElementDictionary.Add(XName.Get("ColorPicker", "http://schemas.microsoft.com/sharepoint/"), typeof(ColorPickerType));
            localElementDictionary.Add(XName.Get("FlyoutAnchor", "http://schemas.microsoft.com/sharepoint/"), typeof(FlyoutAnchorType));
            localElementDictionary.Add(XName.Get("InsertTable", "http://schemas.microsoft.com/sharepoint/"), typeof(InsertTableType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Menu?)
    /// </para>
    /// </summary>
    public partial class MRUSplitButtonType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CacheMenuVersionsDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateDynamicallyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateOnlyOnceDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MRUSplitButtonType(XElement xe) { return XTypedServices.ToXTypedElement<MRUSplitButtonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MRUSplitButtonType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public MRUSplitButtonType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public MenuType Menu {
            get {
                XElement x = this.GetElement(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"));
                return ((MenuType)(x));
            }
            set {
                this.SetElement(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Alt {
            get {
                XAttribute x = this.Attribute(XName.Get("Alt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Alt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool CacheMenuVersions {
            get {
                XAttribute x = this.Attribute(XName.Get("CacheMenuVersions", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CacheMenuVersionsDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("CacheMenuVersions", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandMenuOpen {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandMenuOpen", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandMenuOpen", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandMenuClose {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandMenuClose", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandMenuClose", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandPreview {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandPreview", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandPreview", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandPreviewRevert {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandPreviewRevert", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandPreviewRevert", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string InitialItem {
            get {
                XAttribute x = this.Attribute(XName.Get("InitialItem", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("InitialItem", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MenuAlt {
            get {
                XAttribute x = this.Attribute(XName.Get("MenuAlt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MenuAlt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MenuCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("MenuCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MenuCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool PopulateDynamically {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateDynamically", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateDynamicallyDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("PopulateDynamically", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PopulateQueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateQueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PopulateQueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool PopulateOnlyOnce {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateOnlyOnce", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateOnlyOnceDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("PopulateOnlyOnce", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("QueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipHelpKeyWord", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipHelpKeyWord", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipSelectedItemTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipSelectedItemTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipSelectedItemTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipShortcutKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipShortcutKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MRUSplitButtonType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MRUSplitButtonType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"), typeof(MenuType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class LowScaleWarningType : XTypedElement, IXMetaData {
        
         public static explicit operator LowScaleWarningType(XElement xe) { return XTypedServices.ToXTypedElement<LowScaleWarningType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public LowScaleWarningType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Message {
            get {
                XAttribute x = this.Attribute(XName.Get("Message", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Message", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("LowScaleWarningType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LowScaleWarningType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class OverflowAreaType : XTypedElement, IXMetaData {
        
         public static explicit operator OverflowAreaType(XElement xe) { return XTypedServices.ToXTypedElement<OverflowAreaType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public OverflowAreaType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayMode {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayMode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayMode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OverflowAreaType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OverflowAreaType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class OverflowSectionType : XTypedElement, IXMetaData {
        
         public static explicit operator OverflowSectionType(XElement xe) { return XTypedServices.ToXTypedElement<OverflowSectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public OverflowSectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayMode {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayMode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayMode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> DividerAfter {
            get {
                XAttribute x = this.Attribute(XName.Get("DividerAfter", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DividerAfter", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> DividerBefore {
            get {
                XAttribute x = this.Attribute(XName.Get("DividerBefore", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DividerBefore", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("OverflowSectionType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OverflowSectionType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Controls)
    /// </para>
    /// </summary>
    public partial class QATType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator QATType(XElement xe) { return XTypedServices.ToXTypedElement<QATType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QATType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Controls)
        /// </para>
        /// </summary>
        public QATType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Controls)
        /// </para>
        /// </summary>
        public ControlsType Controls {
            get {
                XElement x = this.GetElement(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/"));
                return ((ControlsType)(x));
            }
            set {
                this.SetElement(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageDownArrow {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownArrow", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownArrow", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageDownArrowClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownArrowClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownArrowClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageDownArrowLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownArrowLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownArrowLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageDownArrowTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownArrowTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownArrowTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageSideArrow {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageSideArrow", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageSideArrow", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageSideArrowClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageSideArrowClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageSideArrowClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageSideArrowLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageSideArrowLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageSideArrowLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageSideArrowTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageSideArrowTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageSideArrowTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUpArrow {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUpArrow", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUpArrow", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUpArrowClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUpArrowClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUpArrowClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageUpArrowLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUpArrowLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUpArrowLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageUpArrowTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUpArrowTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUpArrowTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("QATType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QATType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/"), typeof(ControlsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GroupTemplate*)
    /// </para>
    /// </summary>
    public partial class RibbonTemplatesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GroupTemplateType> GroupTemplateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RibbonTemplatesType(XElement xe) { return XTypedServices.ToXTypedElement<RibbonTemplatesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RibbonTemplatesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("GroupTemplate", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GroupTemplate*)
        /// </para>
        /// </summary>
        public RibbonTemplatesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GroupTemplate*)
        /// </para>
        /// </summary>
        public IList<GroupTemplateType> GroupTemplate {
            get {
                if ((this.GroupTemplateField == null)) {
                    this.GroupTemplateField = new XTypedList<GroupTemplateType>(this, LinqToXsdTypeManager.Instance, XName.Get("GroupTemplate", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.GroupTemplateField;
            }
            set {
                if ((value == null)) {
                    this.GroupTemplateField = null;
                }
                else {
                    if ((this.GroupTemplateField == null)) {
                        this.GroupTemplateField = XTypedList<GroupTemplateType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("GroupTemplate", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<GroupTemplateType>(this.GroupTemplateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RibbonTemplatesType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RibbonTemplatesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("GroupTemplate", "http://schemas.microsoft.com/sharepoint/"), typeof(GroupTemplateType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Tabs, ContextualTabs)
    /// </para>
    /// </summary>
    public partial class RibbonType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RibbonType(XElement xe) { return XTypedServices.ToXTypedElement<RibbonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RibbonType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Tabs", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("ContextualTabs", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Tabs, ContextualTabs)
        /// </para>
        /// </summary>
        public RibbonType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Tabs, ContextualTabs)
        /// </para>
        /// </summary>
        public TabsType Tabs {
            get {
                XElement x = this.GetElement(XName.Get("Tabs", "http://schemas.microsoft.com/sharepoint/"));
                return ((TabsType)(x));
            }
            set {
                this.SetElement(XName.Get("Tabs", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Tabs, ContextualTabs)
        /// </para>
        /// </summary>
        public ContextualTabsType ContextualTabs {
            get {
                XElement x = this.GetElement(XName.Get("ContextualTabs", "http://schemas.microsoft.com/sharepoint/"));
                return ((ContextualTabsType)(x));
            }
            set {
                this.SetElement(XName.Get("ContextualTabs", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image32by32GroupPopupDefault {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32GroupPopupDefault", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32GroupPopupDefault", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image32by32GroupPopupDefaultClass {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32GroupPopupDefaultClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32GroupPopupDefaultClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image32by32GroupPopupDefaultLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32GroupPopupDefaultLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32GroupPopupDefaultLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image32by32GroupPopupDefaultTop {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32GroupPopupDefaultTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32GroupPopupDefaultTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageDownArrow {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownArrow", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownArrow", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageDownArrowClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownArrowClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownArrowClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageDownArrowLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownArrowLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownArrowLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageDownArrowTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageDownArrowTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageDownArrowTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageSideArrow {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageSideArrow", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageSideArrow", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageSideArrowClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageSideArrowClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageSideArrowClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageSideArrowLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageSideArrowLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageSideArrowLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageSideArrowTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageSideArrowTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageSideArrowTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUpArrow {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUpArrow", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUpArrow", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUpArrowClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUpArrowClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUpArrowClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageUpArrowLeft {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUpArrowLeft", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUpArrowLeft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ImageUpArrowTop {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUpArrowTop", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUpArrowTop", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RootEventCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("RootEventCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RootEventCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TabSwitchCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("TabSwitchCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TabSwitchCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ScaleCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("ScaleCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ScaleCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TextDirection {
            get {
                XAttribute x = this.Attribute(XName.Get("TextDirection", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TextDirection", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipFooterText {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipFooterText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipFooterText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipFooterImage16by16 {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipFooterImage16by16", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipFooterImage16by16", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipFooterImage16by16Class {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipFooterImage16by16Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipFooterImage16by16Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipFooterImage16by16Left {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipFooterImage16by16Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipFooterImage16by16Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipFooterImage16by16Top {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipFooterImage16by16Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipFooterImage16by16Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDisabledCommandImage16by16 {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDisabledCommandImage16by16", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDisabledCommandImage16by16", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDisabledCommandImage16by16Class {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDisabledCommandImage16by16Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDisabledCommandImage16by16Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipDisabledCommandImage16by16Left {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDisabledCommandImage16by16Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDisabledCommandImage16by16Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipDisabledCommandImage16by16Top {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDisabledCommandImage16by16Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDisabledCommandImage16by16Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDisabledCommandDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDisabledCommandDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDisabledCommandDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDisabledCommandTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDisabledCommandTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDisabledCommandTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDisabledCommandHelpKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDisabledCommandHelpKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDisabledCommandHelpKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipHelpCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipHelpCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipHelpCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipSelectedItemTitlePrefix {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipSelectedItemTitlePrefix", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipSelectedItemTitlePrefix", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShortcutKeyJumpToRibbon_Ctrl {
            get {
                XAttribute x = this.Attribute(XName.Get("ShortcutKeyJumpToRibbon_Ctrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShortcutKeyJumpToRibbon_Ctrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShortcutKeyJumpToRibbon_Alt {
            get {
                XAttribute x = this.Attribute(XName.Get("ShortcutKeyJumpToRibbon_Alt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShortcutKeyJumpToRibbon_Alt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShortcutKeyJumpToRibbon_Shift {
            get {
                XAttribute x = this.Attribute(XName.Get("ShortcutKeyJumpToRibbon_Shift", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShortcutKeyJumpToRibbon_Shift", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShortcutKeyJumpToRibbon_AccessKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ShortcutKeyJumpToRibbon_AccessKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShortcutKeyJumpToRibbon_AccessKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShortcutKeyJumpToFirstControl_Ctrl {
            get {
                XAttribute x = this.Attribute(XName.Get("ShortcutKeyJumpToFirstControl_Ctrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShortcutKeyJumpToFirstControl_Ctrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShortcutKeyJumpToFirstControl_Alt {
            get {
                XAttribute x = this.Attribute(XName.Get("ShortcutKeyJumpToFirstControl_Alt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShortcutKeyJumpToFirstControl_Alt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShortcutKeyJumpToFirstControl_Shift {
            get {
                XAttribute x = this.Attribute(XName.Get("ShortcutKeyJumpToFirstControl_Shift", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShortcutKeyJumpToFirstControl_Shift", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShortcutKeyJumpToFirstControl_AccessKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ShortcutKeyJumpToFirstControl_AccessKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShortcutKeyJumpToFirstControl_AccessKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ATContextualTabText {
            get {
                XAttribute x = this.Attribute(XName.Get("ATContextualTabText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ATContextualTabText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ATTabPositionText {
            get {
                XAttribute x = this.Attribute(XName.Get("ATTabPositionText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ATTabPositionText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NavigationHelpText {
            get {
                XAttribute x = this.Attribute(XName.Get("NavigationHelpText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NavigationHelpText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RibbonType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RibbonType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Tabs", "http://schemas.microsoft.com/sharepoint/"), typeof(TabsType));
            localElementDictionary.Add(XName.Get("ContextualTabs", "http://schemas.microsoft.com/sharepoint/"), typeof(ContextualTabsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ControlRef* | Strip* | OverflowArea*)*)
    /// </para>
    /// </summary>
    public partial class RowType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ControlRefType> ControlRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StripType> StripField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OverflowAreaType> OverflowAreaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator RowType(XElement xe) { return XTypedServices.ToXTypedElement<RowType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RowType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ControlRef* | Strip* | OverflowArea*)*)
        /// </para>
        /// </summary>
        public RowType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ControlRef* | Strip* | OverflowArea*)*)
        /// </para>
        /// </summary>
        public IList<ControlRefType> ControlRef {
            get {
                if ((this.ControlRefField == null)) {
                    this.ControlRefField = new XTypedList<ControlRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("ControlRef", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ControlRefField;
            }
            set {
                if ((value == null)) {
                    this.ControlRefField = null;
                }
                else {
                    if ((this.ControlRefField == null)) {
                        this.ControlRefField = XTypedList<ControlRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ControlRef", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ControlRefType>(this.ControlRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ControlRef* | Strip* | OverflowArea*)*)
        /// </para>
        /// </summary>
        public IList<StripType> Strip {
            get {
                if ((this.StripField == null)) {
                    this.StripField = new XTypedList<StripType>(this, LinqToXsdTypeManager.Instance, XName.Get("Strip", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.StripField;
            }
            set {
                if ((value == null)) {
                    this.StripField = null;
                }
                else {
                    if ((this.StripField == null)) {
                        this.StripField = XTypedList<StripType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Strip", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<StripType>(this.StripField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ControlRef* | Strip* | OverflowArea*)*)
        /// </para>
        /// </summary>
        public IList<OverflowAreaType> OverflowArea {
            get {
                if ((this.OverflowAreaField == null)) {
                    this.OverflowAreaField = new XTypedList<OverflowAreaType>(this, LinqToXsdTypeManager.Instance, XName.Get("OverflowArea", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.OverflowAreaField;
            }
            set {
                if ((value == null)) {
                    this.OverflowAreaField = null;
                }
                else {
                    if ((this.OverflowAreaField == null)) {
                        this.OverflowAreaField = XTypedList<OverflowAreaType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OverflowArea", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<OverflowAreaType>(this.OverflowAreaField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RowType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RowType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ControlRef", "http://schemas.microsoft.com/sharepoint/"), typeof(ControlRefType));
            localElementDictionary.Add(XName.Get("Strip", "http://schemas.microsoft.com/sharepoint/"), typeof(StripType));
            localElementDictionary.Add(XName.Get("OverflowArea", "http://schemas.microsoft.com/sharepoint/"), typeof(OverflowAreaType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ScaleType : XTypedElement, IXMetaData {
        
         public static explicit operator ScaleType(XElement xe) { return XTypedServices.ToXTypedElement<ScaleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ScaleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string GroupId {
            get {
                XAttribute x = this.Attribute(XName.Get("GroupId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("GroupId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Size {
            get {
                XAttribute x = this.Attribute(XName.Get("Size", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Size", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PopupSize {
            get {
                XAttribute x = this.Attribute(XName.Get("PopupSize", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PopupSize", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ScaleType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ScaleType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MaxSize*, (Scale? | LowScaleWarning?)*)
    /// </para>
    /// </summary>
    public partial class ScalingType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MaxSizeType> MaxSizeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ScaleType> ScaleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LowScaleWarningType> LowScaleWarningField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ScalingType(XElement xe) { return XTypedServices.ToXTypedElement<ScalingType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ScalingType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MaxSize*, (Scale? | LowScaleWarning?)*)
        /// </para>
        /// </summary>
        public ScalingType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MaxSize*, (Scale? | LowScaleWarning?)*)
        /// </para>
        /// </summary>
        public IList<MaxSizeType> MaxSize {
            get {
                if ((this.MaxSizeField == null)) {
                    this.MaxSizeField = new XTypedList<MaxSizeType>(this, LinqToXsdTypeManager.Instance, XName.Get("MaxSize", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MaxSizeField;
            }
            set {
                if ((value == null)) {
                    this.MaxSizeField = null;
                }
                else {
                    if ((this.MaxSizeField == null)) {
                        this.MaxSizeField = XTypedList<MaxSizeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MaxSize", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<MaxSizeType>(this.MaxSizeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (MaxSize*, (Scale? | LowScaleWarning?)*)
        /// </para>
        /// </summary>
        public IList<ScaleType> Scale {
            get {
                if ((this.ScaleField == null)) {
                    this.ScaleField = new XTypedList<ScaleType>(this, LinqToXsdTypeManager.Instance, XName.Get("Scale", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ScaleField;
            }
            set {
                if ((value == null)) {
                    this.ScaleField = null;
                }
                else {
                    if ((this.ScaleField == null)) {
                        this.ScaleField = XTypedList<ScaleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Scale", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ScaleType>(this.ScaleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (MaxSize*, (Scale? | LowScaleWarning?)*)
        /// </para>
        /// </summary>
        public IList<LowScaleWarningType> LowScaleWarning {
            get {
                if ((this.LowScaleWarningField == null)) {
                    this.LowScaleWarningField = new XTypedList<LowScaleWarningType>(this, LinqToXsdTypeManager.Instance, XName.Get("LowScaleWarning", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.LowScaleWarningField;
            }
            set {
                if ((value == null)) {
                    this.LowScaleWarningField = null;
                }
                else {
                    if ((this.LowScaleWarningField == null)) {
                        this.LowScaleWarningField = XTypedList<LowScaleWarningType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LowScaleWarning", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<LowScaleWarningType>(this.LowScaleWarningField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ScalingType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ScalingType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MaxSize", "http://schemas.microsoft.com/sharepoint/"), typeof(MaxSizeType));
            localElementDictionary.Add(XName.Get("Scale", "http://schemas.microsoft.com/sharepoint/"), typeof(ScaleType));
            localElementDictionary.Add(XName.Get("LowScaleWarning", "http://schemas.microsoft.com/sharepoint/"), typeof(LowScaleWarningType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Row*)
    /// </para>
    /// </summary>
    public partial class SectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RowType> RowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SectionType(XElement xe) { return XTypedServices.ToXTypedElement<SectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Row", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Row*)
        /// </para>
        /// </summary>
        public SectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Row*)
        /// </para>
        /// </summary>
        public IList<RowType> Row {
            get {
                if ((this.RowField == null)) {
                    this.RowField = new XTypedList<RowType>(this, LinqToXsdTypeManager.Instance, XName.Get("Row", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.RowField;
            }
            set {
                if ((value == null)) {
                    this.RowField = null;
                }
                else {
                    if ((this.RowField == null)) {
                        this.RowField = XTypedList<RowType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Row", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<RowType>(this.RowField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Alignment {
            get {
                XAttribute x = this.Attribute(XName.Get("Alignment", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Alignment", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SectionType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Row", "http://schemas.microsoft.com/sharepoint/"), typeof(RowType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Unit+)
    /// </para>
    /// </summary>
    public partial class SpinnerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UnitType> UnitField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SpinnerType(XElement xe) { return XTypedServices.ToXTypedElement<SpinnerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpinnerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Unit", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Unit+)
        /// </para>
        /// </summary>
        public SpinnerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Unit+)
        /// </para>
        /// </summary>
        public IList<UnitType> Unit {
            get {
                if ((this.UnitField == null)) {
                    this.UnitField = new XTypedList<UnitType>(this, LinqToXsdTypeManager.Instance, XName.Get("Unit", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.UnitField;
            }
            set {
                if ((value == null)) {
                    this.UnitField = null;
                }
                else {
                    if ((this.UnitField == null)) {
                        this.UnitField = XTypedList<UnitType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Unit", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<UnitType>(this.UnitField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> AccelerationInterval {
            get {
                XAttribute x = this.Attribute(XName.Get("AccelerationInterval", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AccelerationInterval", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AltDownArrow {
            get {
                XAttribute x = this.Attribute(XName.Get("AltDownArrow", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AltDownArrow", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AltUpArrow {
            get {
                XAttribute x = this.Attribute(XName.Get("AltUpArrow", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AltUpArrow", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DefaultUnit {
            get {
                XAttribute x = this.Attribute(XName.Get("DefaultUnit", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DefaultUnit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> DefaultValue {
            get {
                XAttribute x = this.Attribute(XName.Get("DefaultValue", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DefaultValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> ImeEnabled {
            get {
                XAttribute x = this.Attribute(XName.Get("ImeEnabled", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImeEnabled", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> MultiplierInterval {
            get {
                XAttribute x = this.Attribute(XName.Get("MultiplierInterval", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MultiplierInterval", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("QueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipHelpKeyWord", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipHelpKeyWord", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipShortcutKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipShortcutKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SpinnerType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpinnerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Unit", "http://schemas.microsoft.com/sharepoint/"), typeof(UnitType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Menu?)
    /// </para>
    /// </summary>
    public partial class SplitButtonType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CacheMenuVersionsDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateDynamicallyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateOnlyOnceDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SplitButtonType(XElement xe) { return XTypedServices.ToXTypedElement<SplitButtonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SplitButtonType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public SplitButtonType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public MenuType Menu {
            get {
                XElement x = this.GetElement(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"));
                return ((MenuType)(x));
            }
            set {
                this.SetElement(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Alt {
            get {
                XAttribute x = this.Attribute(XName.Get("Alt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Alt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool CacheMenuVersions {
            get {
                XAttribute x = this.Attribute(XName.Get("CacheMenuVersions", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CacheMenuVersionsDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("CacheMenuVersions", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandMenuOpen {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandMenuOpen", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandMenuOpen", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandMenuClose {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandMenuClose", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandMenuClose", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandType {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image16by16 {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image16by16Class {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image16by16Left {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image16by16Top {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LabelText {
            get {
                XAttribute x = this.Attribute(XName.Get("LabelText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LabelText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MenuAlt {
            get {
                XAttribute x = this.Attribute(XName.Get("MenuAlt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MenuAlt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MenuCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("MenuCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MenuCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool PopulateDynamically {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateDynamically", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateDynamicallyDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("PopulateDynamically", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PopulateQueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateQueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PopulateQueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool PopulateOnlyOnce {
            get {
                XAttribute x = this.Attribute(XName.Get("PopulateOnlyOnce", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateOnlyOnceDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("PopulateOnlyOnce", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipHelpKeyWord", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipHelpKeyWord", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipSelectedItemTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipSelectedItemTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipSelectedItemTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipShortcutKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipShortcutKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SplitButtonType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SplitButtonType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"), typeof(MenuType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ControlRef*)
    /// </para>
    /// </summary>
    public partial class StripType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ControlRefType> ControlRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator StripType(XElement xe) { return XTypedServices.ToXTypedElement<StripType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StripType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ControlRef", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ControlRef*)
        /// </para>
        /// </summary>
        public StripType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ControlRef*)
        /// </para>
        /// </summary>
        public IList<ControlRefType> ControlRef {
            get {
                if ((this.ControlRefField == null)) {
                    this.ControlRefField = new XTypedList<ControlRefType>(this, LinqToXsdTypeManager.Instance, XName.Get("ControlRef", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ControlRefField;
            }
            set {
                if ((value == null)) {
                    this.ControlRefField = null;
                }
                else {
                    if ((this.ControlRefField == null)) {
                        this.ControlRefField = XTypedList<ControlRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ControlRef", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ControlRefType>(this.ControlRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("StripType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StripType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ControlRef", "http://schemas.microsoft.com/sharepoint/"), typeof(ControlRefType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Scaling, Groups)
    /// </para>
    /// </summary>
    public partial class TabType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TabType(XElement xe) { return XTypedServices.ToXTypedElement<TabType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TabType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Scaling", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Groups", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Scaling, Groups)
        /// </para>
        /// </summary>
        public TabType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Scaling, Groups)
        /// </para>
        /// </summary>
        public ScalingType Scaling {
            get {
                XElement x = this.GetElement(XName.Get("Scaling", "http://schemas.microsoft.com/sharepoint/"));
                return ((ScalingType)(x));
            }
            set {
                this.SetElement(XName.Get("Scaling", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Scaling, Groups)
        /// </para>
        /// </summary>
        public GroupsType Groups {
            get {
                XElement x = this.GetElement(XName.Get("Groups", "http://schemas.microsoft.com/sharepoint/"));
                return ((GroupsType)(x));
            }
            set {
                this.SetElement(XName.Get("Groups", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CssClass {
            get {
                XAttribute x = this.Attribute(XName.Get("CssClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CssClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TabType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TabType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Scaling", "http://schemas.microsoft.com/sharepoint/"), typeof(ScalingType));
            localElementDictionary.Add(XName.Get("Groups", "http://schemas.microsoft.com/sharepoint/"), typeof(GroupsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Tab*)
    /// </para>
    /// </summary>
    public partial class TabsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TabType> TabField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TabsType(XElement xe) { return XTypedServices.ToXTypedElement<TabsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TabsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Tab*)
        /// </para>
        /// </summary>
        public TabsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Tab*)
        /// </para>
        /// </summary>
        public IList<TabType> Tab {
            get {
                if ((this.TabField == null)) {
                    this.TabField = new XTypedList<TabType>(this, LinqToXsdTypeManager.Instance, XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.TabField;
            }
            set {
                if ((value == null)) {
                    this.TabField = null;
                }
                else {
                    if ((this.TabField == null)) {
                        this.TabField = XTypedList<TabType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<TabType>(this.TabField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TabsType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TabsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/"), typeof(TabType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RibbonTemplates)
    /// </para>
    /// </summary>
    public partial class TemplatesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator TemplatesType(XElement xe) { return XTypedServices.ToXTypedElement<TemplatesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TemplatesType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RibbonTemplates)
        /// </para>
        /// </summary>
        public TemplatesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RibbonTemplates)
        /// </para>
        /// </summary>
        public RibbonTemplatesType RibbonTemplates {
            get {
                XElement x = this.GetElement(XName.Get("RibbonTemplates", "http://schemas.microsoft.com/sharepoint/"));
                return ((RibbonTemplatesType)(x));
            }
            set {
                this.SetElement(XName.Get("RibbonTemplates", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TemplatesType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TemplatesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("RibbonTemplates", "http://schemas.microsoft.com/sharepoint/"), typeof(RibbonTemplatesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class TextBoxType : XTypedElement, IXMetaData {
        
         public static explicit operator TextBoxType(XElement xe) { return XTypedServices.ToXTypedElement<TextBoxType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public TextBoxType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> ImeEnabled {
            get {
                XAttribute x = this.Attribute(XName.Get("ImeEnabled", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImeEnabled", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> MaxLength {
            get {
                XAttribute x = this.Attribute(XName.Get("MaxLength", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MaxLength", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("QueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<bool> ShowAsLabel {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowAsLabel", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowAsLabel", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipHelpKeyWord", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipHelpKeyWord", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipShortcutKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipShortcutKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Width {
            get {
                XAttribute x = this.Attribute(XName.Get("Width", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Width", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TextBoxType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TextBoxType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ToggleButtonType : XTypedElement, IXMetaData {
        
         public static explicit operator ToggleButtonType(XElement xe) { return XTypedServices.ToXTypedElement<ToggleButtonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ToggleButtonType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Alt {
            get {
                XAttribute x = this.Attribute(XName.Get("Alt", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Alt", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CommandValueId {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandValueId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandValueId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LabelCss {
            get {
                XAttribute x = this.Attribute(XName.Get("LabelCss", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LabelCss", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LabelText {
            get {
                XAttribute x = this.Attribute(XName.Get("LabelText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LabelText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("Image32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image16by16 {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image16by16Class {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image16by16Left {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Image16by16Top {
            get {
                XAttribute x = this.Attribute(XName.Get("Image16by16Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image16by16Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MenuItemId {
            get {
                XAttribute x = this.Attribute(XName.Get("MenuItemId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MenuItemId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QueryCommand {
            get {
                XAttribute x = this.Attribute(XName.Get("QueryCommand", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QueryCommand", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Left", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Left", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipImage32by32Top", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipImage32by32Top", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipHelpKeyWord", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipHelpKeyWord", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolTipShortcutKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolTipShortcutKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ToggleButtonType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ToggleButtonType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (UnitAbbreviation+)
    /// </para>
    /// </summary>
    public partial class UnitType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UnitAbbreviationType> UnitAbbreviationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator UnitType(XElement xe) { return XTypedServices.ToXTypedElement<UnitType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnitType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("UnitAbbreviation", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (UnitAbbreviation+)
        /// </para>
        /// </summary>
        public UnitType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (UnitAbbreviation+)
        /// </para>
        /// </summary>
        public IList<UnitAbbreviationType> UnitAbbreviation {
            get {
                if ((this.UnitAbbreviationField == null)) {
                    this.UnitAbbreviationField = new XTypedList<UnitAbbreviationType>(this, LinqToXsdTypeManager.Instance, XName.Get("UnitAbbreviation", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.UnitAbbreviationField;
            }
            set {
                if ((value == null)) {
                    this.UnitAbbreviationField = null;
                }
                else {
                    if ((this.UnitAbbreviationField == null)) {
                        this.UnitAbbreviationField = XTypedList<UnitAbbreviationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UnitAbbreviation", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<UnitAbbreviationType>(this.UnitAbbreviationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> MinimumValue {
            get {
                XAttribute x = this.Attribute(XName.Get("MinimumValue", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MinimumValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> MaximumValue {
            get {
                XAttribute x = this.Attribute(XName.Get("MaximumValue", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MaximumValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> DecimalDigits {
            get {
                XAttribute x = this.Attribute(XName.Get("DecimalDigits", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DecimalDigits", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<double> Interval {
            get {
                XAttribute x = this.Attribute(XName.Get("Interval", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Interval", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UnitType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnitType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("UnitAbbreviation", "http://schemas.microsoft.com/sharepoint/"), typeof(UnitAbbreviationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class UnitAbbreviationType : XTypedElement, IXMetaData {
        
         public static explicit operator UnitAbbreviationType(XElement xe) { return XTypedServices.ToXTypedElement<UnitAbbreviationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UnitAbbreviationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<decimal> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Value {
            get {
                XAttribute x = this.Attribute(XName.Get("Value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UnitAbbreviationType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnitAbbreviationType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldBind*)
    /// </para>
    /// </summary>
    public partial class ruleDesignerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldBindLocalType> FieldBindField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ruleDesignerType(XElement xe) { return XTypedServices.ToXTypedElement<ruleDesignerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ruleDesignerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FieldBind", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldBind*)
        /// </para>
        /// </summary>
        public ruleDesignerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FieldBind*)
        /// </para>
        /// </summary>
        public IList<Microsoft.Schemas.SharePoint.ruleDesignerType.FieldBindLocalType> FieldBind {
            get {
                if ((this.FieldBindField == null)) {
                    this.FieldBindField = new XTypedList<FieldBindLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("FieldBind", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldBindField;
            }
            set {
                if ((value == null)) {
                    this.FieldBindField = null;
                }
                else {
                    if ((this.FieldBindField == null)) {
                        this.FieldBindField = XTypedList<FieldBindLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FieldBind", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FieldBindLocalType>(this.FieldBindField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Sentence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sentence", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sentence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ruleDesignerType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ruleDesignerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FieldBind", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldBindLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Option* | DataSourceRef+)
        /// </para>
        /// </summary>
        public partial class FieldBindLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OptionLocalType> OptionField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<DataSourceRefLocalType> DataSourceRefField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static bool FunctionDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator FieldBindLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FieldBindLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static FieldBindLocalType() {
                BuildElementDictionary();
                contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("Option", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("DataSourceRef", "http://schemas.microsoft.com/sharepoint/")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Option* | DataSourceRef+)
            /// </para>
            /// </summary>
            public FieldBindLocalType() {
            }
            
            public FieldBindLocalType(IEnumerable<OptionLocalType> Option) {
                this.OptionField = XTypedList<OptionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, Option, XName.Get("Option", "http://schemas.microsoft.com/sharepoint/"));
            }
            
            public FieldBindLocalType(IEnumerable<DataSourceRefLocalType> DataSourceRef) {
                this.DataSourceRefField = XTypedList<DataSourceRefLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, DataSourceRef, XName.Get("DataSourceRef", "http://schemas.microsoft.com/sharepoint/"));
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating, choice
            /// </para>
            /// <para>
            /// Regular expression: (Option* | DataSourceRef+)
            /// </para>
            /// </summary>
            public IList<Microsoft.Schemas.SharePoint.ruleDesignerType.FieldBindLocalType.OptionLocalType> Option {
                get {
                    if ((this.OptionField == null)) {
                        this.OptionField = new XTypedList<OptionLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Option", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    return this.OptionField;
                }
                set {
                    if ((value == null)) {
                        this.OptionField = null;
                    }
                    else {
                        if ((this.OptionField == null)) {
                            this.OptionField = XTypedList<OptionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Option", "http://schemas.microsoft.com/sharepoint/"));
                        }
                        else {
                            XTypedServices.SetList<OptionLocalType>(this.OptionField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating, choice
            /// </para>
            /// <para>
            /// Regular expression: (Option* | DataSourceRef+)
            /// </para>
            /// </summary>
            public IList<Microsoft.Schemas.SharePoint.ruleDesignerType.FieldBindLocalType.DataSourceRefLocalType> DataSourceRef {
                get {
                    if ((this.DataSourceRefField == null)) {
                        this.DataSourceRefField = new XTypedList<DataSourceRefLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataSourceRef", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    return this.DataSourceRefField;
                }
                set {
                    if ((value == null)) {
                        this.DataSourceRefField = null;
                    }
                    else {
                        if ((this.DataSourceRefField == null)) {
                            this.DataSourceRefField = XTypedList<DataSourceRefLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataSourceRef", "http://schemas.microsoft.com/sharepoint/"));
                        }
                        else {
                            XTypedServices.SetList<DataSourceRefLocalType>(this.DataSourceRefField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Field {
                get {
                    XAttribute x = this.Attribute(XName.Get("Field", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Field", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Text {
                get {
                    XAttribute x = this.Attribute(XName.Get("Text", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Text", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public decimal Id {
                get {
                    XAttribute x = this.Attribute(XName.Get("Id", ""));
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string DesignerType {
                get {
                    XAttribute x = this.Attribute(XName.Get("DesignerType", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("DesignerType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string OperatorTypeFrom {
                get {
                    XAttribute x = this.Attribute(XName.Get("OperatorTypeFrom", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("OperatorTypeFrom", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string TypeFrom {
                get {
                    XAttribute x = this.Attribute(XName.Get("TypeFrom", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("TypeFrom", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public bool Function {
                get {
                    XAttribute x = this.Attribute(XName.Get("Function", ""));
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, FunctionDefaultValue);
                }
                set {
                    this.SetAttribute(XName.Get("Function", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Value {
                get {
                    XAttribute x = this.Attribute(XName.Get("Value", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("FieldBind", "http://schemas.microsoft.com/sharepoint/");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<FieldBindLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Option", "http://schemas.microsoft.com/sharepoint/"), typeof(OptionLocalType));
                localElementDictionary.Add(XName.Get("DataSourceRef", "http://schemas.microsoft.com/sharepoint/"), typeof(DataSourceRefLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class OptionLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator OptionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OptionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public OptionLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string Name {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string Value {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Value", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string TypeFilter {
                    get {
                        XAttribute x = this.Attribute(XName.Get("TypeFilter", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("TypeFilter", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string UnaryHides {
                    get {
                        XAttribute x = this.Attribute(XName.Get("UnaryHides", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("UnaryHides", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Option", "http://schemas.microsoft.com/sharepoint/");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<OptionLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class DataSourceRefLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator DataSourceRefLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DataSourceRefLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public DataSourceRefLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string @Ref {
                    get {
                        XAttribute x = this.Attribute(XName.Get("Ref", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("Ref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("DataSourceRef", "http://schemas.microsoft.com/sharepoint/");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<DataSourceRefLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RuleDesigner)
    /// </para>
    /// </summary>
    public partial class defaultElementType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator defaultElementType(XElement xe) { return XTypedServices.ToXTypedElement<defaultElementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static defaultElementType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RuleDesigner", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RuleDesigner)
        /// </para>
        /// </summary>
        public defaultElementType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RuleDesigner)
        /// </para>
        /// </summary>
        public ruleDesignerType RuleDesigner {
            get {
                XElement x = this.GetElement(XName.Get("RuleDesigner", "http://schemas.microsoft.com/sharepoint/"));
                return ((ruleDesignerType)(x));
            }
            set {
                this.SetElement(XName.Get("RuleDesigner", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("defaultElementType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<defaultElementType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("RuleDesigner", "http://schemas.microsoft.com/sharepoint/"), typeof(ruleDesignerType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Parameter*)
    /// </para>
    /// </summary>
    public partial class parametersType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ParameterLocalType> ParameterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator parametersType(XElement xe) { return XTypedServices.ToXTypedElement<parametersType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static parametersType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Parameter", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Parameter*)
        /// </para>
        /// </summary>
        public parametersType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Parameter*)
        /// </para>
        /// </summary>
        public IList<Microsoft.Schemas.SharePoint.parametersType.ParameterLocalType> Parameter {
            get {
                if ((this.ParameterField == null)) {
                    this.ParameterField = new XTypedList<ParameterLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Parameter", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ParameterField;
            }
            set {
                if ((value == null)) {
                    this.ParameterField = null;
                }
                else {
                    if ((this.ParameterField == null)) {
                        this.ParameterField = XTypedList<ParameterLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Parameter", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ParameterLocalType>(this.ParameterField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("parametersType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<parametersType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Parameter", "http://schemas.microsoft.com/sharepoint/"), typeof(ParameterLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class ParameterLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator ParameterLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ParameterLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public ParameterLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string Name {
                get {
                    XAttribute x = this.Attribute(XName.Get("Name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string Type {
                get {
                    XAttribute x = this.Attribute(XName.Get("Type", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string Direction {
                get {
                    XAttribute x = this.Attribute(XName.Get("Direction", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Direction", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Description {
                get {
                    XAttribute x = this.Attribute(XName.Get("Description", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string DesignerType {
                get {
                    XAttribute x = this.Attribute(XName.Get("DesignerType", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("DesignerType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string DisplayName {
                get {
                    XAttribute x = this.Attribute(XName.Get("DisplayName", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("DisplayName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string InitialValue {
                get {
                    XAttribute x = this.Attribute(XName.Get("InitialValue", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("InitialValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string InitialBinding {
                get {
                    XAttribute x = this.Attribute(XName.Get("InitialBinding", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("InitialBinding", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Parameter", "http://schemas.microsoft.com/sharepoint/");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ParameterLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DataSource*)
    /// </para>
    /// </summary>
    public partial class dataSourcesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dataSourceType> DataSourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator dataSourcesType(XElement xe) { return XTypedServices.ToXTypedElement<dataSourcesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static dataSourcesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DataSource", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DataSource*)
        /// </para>
        /// </summary>
        public dataSourcesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSource*)
        /// </para>
        /// </summary>
        public IList<dataSourceType> DataSource {
            get {
                if ((this.DataSourceField == null)) {
                    this.DataSourceField = new XTypedList<dataSourceType>(this, LinqToXsdTypeManager.Instance, XName.Get("DataSource", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.DataSourceField;
            }
            set {
                if ((value == null)) {
                    this.DataSourceField = null;
                }
                else {
                    if ((this.DataSourceField == null)) {
                        this.DataSourceField = XTypedList<dataSourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DataSource", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<dataSourceType>(this.DataSourceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("dataSourcesType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dataSourcesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DataSource", "http://schemas.microsoft.com/sharepoint/"), typeof(dataSourceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SchemaSource, Evaluation)
    /// </para>
    /// </summary>
    public partial class dataSourceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator dataSourceType(XElement xe) { return XTypedServices.ToXTypedElement<dataSourceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static dataSourceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SchemaSource", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Evaluation", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SchemaSource, Evaluation)
        /// </para>
        /// </summary>
        public dataSourceType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SchemaSource, Evaluation)
        /// </para>
        /// </summary>
        public SchemaSourceLocalType SchemaSource {
            get {
                XElement x = this.GetElement(XName.Get("SchemaSource", "http://schemas.microsoft.com/sharepoint/"));
                return ((SchemaSourceLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("SchemaSource", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SchemaSource, Evaluation)
        /// </para>
        /// </summary>
        public EvaluationLocalType Evaluation {
            get {
                XElement x = this.GetElement(XName.Get("Evaluation", "http://schemas.microsoft.com/sharepoint/"));
                return ((EvaluationLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Evaluation", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string InternalName {
            get {
                XAttribute x = this.Attribute(XName.Get("InternalName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("InternalName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NameProperty {
            get {
                XAttribute x = this.Attribute(XName.Get("NameProperty", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NameProperty", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("dataSourceType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dataSourceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SchemaSource", "http://schemas.microsoft.com/sharepoint/"), typeof(SchemaSourceLocalType));
            localElementDictionary.Add(XName.Get("Evaluation", "http://schemas.microsoft.com/sharepoint/"), typeof(EvaluationLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Fields? | ContentType? | Dictionary? | NestedInitiationFieldNodes?)
        /// </para>
        /// </summary>
        public partial class SchemaSourceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator SchemaSourceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SchemaSourceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SchemaSourceLocalType() {
                BuildElementDictionary();
                contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Dictionary", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("NestedInitiationFieldNodes", "http://schemas.microsoft.com/sharepoint/")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Fields? | ContentType? | Dictionary? | NestedInitiationFieldNodes?)
            /// </para>
            /// </summary>
            public SchemaSourceLocalType() {
            }
            
            public SchemaSourceLocalType(FieldsLocalType Fields) {
                this.Fields = Fields;
            }
            
            public SchemaSourceLocalType(ContentTypeLocalType ContentType) {
                this.ContentType = ContentType;
            }
            
            public SchemaSourceLocalType(DictionaryLocalType Dictionary) {
                this.Dictionary = Dictionary;
            }
            
            public SchemaSourceLocalType(XTypedElement NestedInitiationFieldNodes) {
                this.NestedInitiationFieldNodes = NestedInitiationFieldNodes;
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Regular expression: (Fields? | ContentType? | Dictionary? | NestedInitiationFieldNodes?)
            /// </para>
            /// </summary>
            public FieldsLocalType Fields {
                get {
                    XElement x = this.GetElement(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"));
                    return ((FieldsLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Regular expression: (Fields? | ContentType? | Dictionary? | NestedInitiationFieldNodes?)
            /// </para>
            /// </summary>
            public ContentTypeLocalType ContentType {
                get {
                    XElement x = this.GetElement(XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/"));
                    return ((ContentTypeLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Regular expression: (Fields? | ContentType? | Dictionary? | NestedInitiationFieldNodes?)
            /// </para>
            /// </summary>
            public DictionaryLocalType Dictionary {
                get {
                    XElement x = this.GetElement(XName.Get("Dictionary", "http://schemas.microsoft.com/sharepoint/"));
                    return ((DictionaryLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("Dictionary", "http://schemas.microsoft.com/sharepoint/"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Regular expression: (Fields? | ContentType? | Dictionary? | NestedInitiationFieldNodes?)
            /// </para>
            /// </summary>
            public XTypedElement NestedInitiationFieldNodes {
                get {
                    XElement x = this.GetElement(XName.Get("NestedInitiationFieldNodes", "http://schemas.microsoft.com/sharepoint/"));
                    return ((XTypedElement)(x));
                }
                set {
                    this.SetElement(XName.Get("NestedInitiationFieldNodes", "http://schemas.microsoft.com/sharepoint/"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("SchemaSource", "http://schemas.microsoft.com/sharepoint/");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SchemaSourceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldsLocalType));
                localElementDictionary.Add(XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/"), typeof(ContentTypeLocalType));
                localElementDictionary.Add(XName.Get("Dictionary", "http://schemas.microsoft.com/sharepoint/"), typeof(DictionaryLocalType));
                localElementDictionary.Add(XName.Get("NestedInitiationFieldNodes", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Field+)
            /// </para>
            /// </summary>
            public partial class FieldsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<FieldLocalType> FieldField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator FieldsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FieldsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static FieldsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Field+)
                /// </para>
                /// </summary>
                public FieldsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (Field+)
                /// </para>
                /// </summary>
                public IList<Microsoft.Schemas.SharePoint.dataSourceType.SchemaSourceLocalType.FieldsLocalType.FieldLocalType> Field {
                    get {
                        if ((this.FieldField == null)) {
                            this.FieldField = new XTypedList<FieldLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                        }
                        return this.FieldField;
                    }
                    set {
                        if ((value == null)) {
                            this.FieldField = null;
                        }
                        else {
                            if ((this.FieldField == null)) {
                                this.FieldField = XTypedList<FieldLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                            }
                            else {
                                XTypedServices.SetList<FieldLocalType>(this.FieldField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<FieldsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                public partial class FieldLocalType : XTypedElement, IXMetaData {
                    
         public static explicit operator FieldLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FieldLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    public FieldLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string Name {
                        get {
                            XAttribute x = this.Attribute(XName.Get("Name", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string DisplayName {
                        get {
                            XAttribute x = this.Attribute(XName.Get("DisplayName", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(XName.Get("DisplayName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string Type {
                        get {
                            XAttribute x = this.Attribute(XName.Get("Type", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("Field", "http://schemas.microsoft.com/sharepoint/");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<FieldLocalType>(this);
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return ContentModelEntity.Default;
                    }
                }
            }
            
            public partial class ContentTypeLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator ContentTypeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public ContentTypeLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string IDFrom {
                    get {
                        XAttribute x = this.Attribute(XName.Get("IDFrom", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("IDFrom", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ContentTypeLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class DictionaryLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator DictionaryLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DictionaryLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public DictionaryLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string ValueFrom {
                    get {
                        XAttribute x = this.Attribute(XName.Get("ValueFrom", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("ValueFrom", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Dictionary", "http://schemas.microsoft.com/sharepoint/");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<DictionaryLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivitySource | HashtableSource)
        /// </para>
        /// </summary>
        public partial class EvaluationLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator EvaluationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EvaluationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EvaluationLocalType() {
                BuildElementDictionary();
                contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("ActivitySource", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("HashtableSource", "http://schemas.microsoft.com/sharepoint/")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ActivitySource | HashtableSource)
            /// </para>
            /// </summary>
            public EvaluationLocalType() {
            }
            
            public EvaluationLocalType(ActivitySourceLocalType ActivitySource) {
                this.ActivitySource = ActivitySource;
            }
            
            public EvaluationLocalType(HashtableSourceLocalType HashtableSource) {
                this.HashtableSource = HashtableSource;
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (ActivitySource | HashtableSource)
            /// </para>
            /// </summary>
            public ActivitySourceLocalType ActivitySource {
                get {
                    XElement x = this.GetElement(XName.Get("ActivitySource", "http://schemas.microsoft.com/sharepoint/"));
                    return ((ActivitySourceLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("ActivitySource", "http://schemas.microsoft.com/sharepoint/"), value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (ActivitySource | HashtableSource)
            /// </para>
            /// </summary>
            public HashtableSourceLocalType HashtableSource {
                get {
                    XElement x = this.GetElement(XName.Get("HashtableSource", "http://schemas.microsoft.com/sharepoint/"));
                    return ((HashtableSourceLocalType)(x));
                }
                set {
                    this.SetElement(XName.Get("HashtableSource", "http://schemas.microsoft.com/sharepoint/"), value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Evaluation", "http://schemas.microsoft.com/sharepoint/");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EvaluationLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("ActivitySource", "http://schemas.microsoft.com/sharepoint/"), typeof(ActivitySourceLocalType));
                localElementDictionary.Add(XName.Get("HashtableSource", "http://schemas.microsoft.com/sharepoint/"), typeof(HashtableSourceLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class ActivitySourceLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator ActivitySourceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActivitySourceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public ActivitySourceLocalType() {
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("ActivitySource", "http://schemas.microsoft.com/sharepoint/");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ActivitySourceLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class HashtableSourceLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator HashtableSourceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HashtableSourceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public HashtableSourceLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string HashtableFrom {
                    get {
                        XAttribute x = this.Attribute(XName.Get("HashtableFrom", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("HashtableFrom", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("HashtableSource", "http://schemas.microsoft.com/sharepoint/");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<HashtableSourceLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
    /// </para>
    /// </summary>
    public partial class actionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string FunctionNameDefaultValue = "";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CreatesTaskDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool IsErrorDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool ListModerationDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool UsesCurrentItemDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool SandboxedFunctionDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator actionType(XElement xe) { return XTypedServices.ToXTypedElement<actionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static actionType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public actionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public parametersType Parameters {
            get {
                XElement x = this.GetElement(XName.Get("Parameters", "http://schemas.microsoft.com/sharepoint/"));
                return ((parametersType)(x));
            }
            set {
                this.SetElement(XName.Get("Parameters", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public ruleDesignerType RuleDesigner {
            get {
                XElement x = this.GetElement(XName.Get("RuleDesigner", "http://schemas.microsoft.com/sharepoint/"));
                return ((ruleDesignerType)(x));
            }
            set {
                this.SetElement(XName.Get("RuleDesigner", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public dataSourcesType DataSources {
            get {
                XElement x = this.GetElement(XName.Get("DataSources", "http://schemas.microsoft.com/sharepoint/"));
                return ((dataSourcesType)(x));
            }
            set {
                this.SetElement(XName.Get("DataSources", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public ModificationsLocalType Modifications {
            get {
                XElement x = this.GetElement(XName.Get("Modifications", "http://schemas.microsoft.com/sharepoint/"));
                return ((ModificationsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("Modifications", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public ActionVariablesLocalType ActionVariables {
            get {
                XElement x = this.GetElement(XName.Get("ActionVariables", "http://schemas.microsoft.com/sharepoint/"));
                return ((ActionVariablesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("ActionVariables", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public ActionBodyLocalType ActionBody {
            get {
                XElement x = this.GetElement(XName.Get("ActionBody", "http://schemas.microsoft.com/sharepoint/"));
                return ((ActionBodyLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("ActionBody", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public ActionConditionsLocalType ActionConditions {
            get {
                XElement x = this.GetElement(XName.Get("ActionConditions", "http://schemas.microsoft.com/sharepoint/"));
                return ((ActionConditionsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("ActionConditions", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ClassName {
            get {
                XAttribute x = this.Attribute(XName.Get("ClassName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ClassName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Assembly {
            get {
                XAttribute x = this.Attribute(XName.Get("Assembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Assembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FunctionName {
            get {
                XAttribute x = this.Attribute(XName.Get("FunctionName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, FunctionNameDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("FunctionName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Category {
            get {
                XAttribute x = this.Attribute(XName.Get("Category", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Category", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool CreatesTask {
            get {
                XAttribute x = this.Attribute(XName.Get("CreatesTask", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CreatesTaskDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("CreatesTask", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CreatesInList {
            get {
                XAttribute x = this.Attribute(XName.Get("CreatesInList", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CreatesInList", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string AppliesTo {
            get {
                XAttribute x = this.Attribute(XName.Get("AppliesTo", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AppliesTo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool IsError {
            get {
                XAttribute x = this.Attribute(XName.Get("IsError", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, IsErrorDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("IsError", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool ListModeration {
            get {
                XAttribute x = this.Attribute(XName.Get("ListModeration", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, ListModerationDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("ListModeration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool UsesCurrentItem {
            get {
                XAttribute x = this.Attribute(XName.Get("UsesCurrentItem", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, UsesCurrentItemDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("UsesCurrentItem", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RequiredInvocationTags {
            get {
                XAttribute x = this.Attribute(XName.Get("RequiredInvocationTags", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RequiredInvocationTags", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string InvocationTags {
            get {
                XAttribute x = this.Attribute(XName.Get("InvocationTags", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("InvocationTags", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ProhibitedInvocationTags {
            get {
                XAttribute x = this.Attribute(XName.Get("ProhibitedInvocationTags", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ProhibitedInvocationTags", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CreatedTaskFormType {
            get {
                XAttribute x = this.Attribute(XName.Get("CreatedTaskFormType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CreatedTaskFormType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @__SolutionId {
            get {
                XAttribute x = this.Attribute(XName.Get("__SolutionId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("__SolutionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool SandboxedFunction {
            get {
                XAttribute x = this.Attribute(XName.Get("SandboxedFunction", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, SandboxedFunctionDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("SandboxedFunction", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("actionType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<actionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Parameters", "http://schemas.microsoft.com/sharepoint/"), typeof(parametersType));
            localElementDictionary.Add(XName.Get("RuleDesigner", "http://schemas.microsoft.com/sharepoint/"), typeof(ruleDesignerType));
            localElementDictionary.Add(XName.Get("DataSources", "http://schemas.microsoft.com/sharepoint/"), typeof(dataSourcesType));
            localElementDictionary.Add(XName.Get("Modifications", "http://schemas.microsoft.com/sharepoint/"), typeof(ModificationsLocalType));
            localElementDictionary.Add(XName.Get("ActionVariables", "http://schemas.microsoft.com/sharepoint/"), typeof(ActionVariablesLocalType));
            localElementDictionary.Add(XName.Get("ActionBody", "http://schemas.microsoft.com/sharepoint/"), typeof(ActionBodyLocalType));
            localElementDictionary.Add(XName.Get("ActionConditions", "http://schemas.microsoft.com/sharepoint/"), typeof(ActionConditionsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Modification+)
        /// </para>
        /// </summary>
        public partial class ModificationsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ModificationLocalType> ModificationField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator ModificationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ModificationsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ModificationsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Modification", "http://schemas.microsoft.com/sharepoint/")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Modification+)
            /// </para>
            /// </summary>
            public ModificationsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Modification+)
            /// </para>
            /// </summary>
            public IList<Microsoft.Schemas.SharePoint.actionType.ModificationsLocalType.ModificationLocalType> Modification {
                get {
                    if ((this.ModificationField == null)) {
                        this.ModificationField = new XTypedList<ModificationLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Modification", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    return this.ModificationField;
                }
                set {
                    if ((value == null)) {
                        this.ModificationField = null;
                    }
                    else {
                        if ((this.ModificationField == null)) {
                            this.ModificationField = XTypedList<ModificationLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Modification", "http://schemas.microsoft.com/sharepoint/"));
                        }
                        else {
                            XTypedServices.SetList<ModificationLocalType>(this.ModificationField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Modifications", "http://schemas.microsoft.com/sharepoint/");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ModificationsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Modification", "http://schemas.microsoft.com/sharepoint/"), typeof(ModificationLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class ModificationLocalType : XTypedElement, IXMetaData {
                
         public static explicit operator ModificationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ModificationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public ModificationLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string TypeId {
                    get {
                        XAttribute x = this.Attribute(XName.Get("TypeId", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("TypeId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string NameFormat {
                    get {
                        XAttribute x = this.Attribute(XName.Get("NameFormat", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("NameFormat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public string FormURN {
                    get {
                        XAttribute x = this.Attribute(XName.Get("FormURN", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(XName.Get("FormURN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Modification", "http://schemas.microsoft.com/sharepoint/");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ModificationLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public partial class ActionVariablesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static FSM validationStates;
            
         public static explicit operator ActionVariablesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActionVariablesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActionVariablesLocalType() {
                InitFSM();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public ActionVariablesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public IEnumerable<XElement> Any {
                get {
                    return this.GetWildCards(WildCard.DefaultWildCard);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("ActionVariables", "http://schemas.microsoft.com/sharepoint/");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActionVariablesLocalType>(this);
            }
            
            FSM IXMetaData.GetValidationStates() {
                return validationStates;
            }
            
            private static void InitFSM() {
                Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
                transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 1)));
                validationStates = new FSM(1, new Set<int>(1), transitions);
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public partial class ActionBodyLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static FSM validationStates;
            
         public static explicit operator ActionBodyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActionBodyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActionBodyLocalType() {
                InitFSM();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public ActionBodyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public IEnumerable<XElement> Any {
                get {
                    return this.GetWildCards(WildCard.DefaultWildCard);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("ActionBody", "http://schemas.microsoft.com/sharepoint/");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActionBodyLocalType>(this);
            }
            
            FSM IXMetaData.GetValidationStates() {
                return validationStates;
            }
            
            private static void InitFSM() {
                Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
                transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 1)));
                validationStates = new FSM(1, new Set<int>(1), transitions);
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public partial class ActionConditionsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static FSM validationStates;
            
         public static explicit operator ActionConditionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActionConditionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActionConditionsLocalType() {
                InitFSM();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public ActionConditionsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public IEnumerable<XElement> Any {
                get {
                    return this.GetWildCards(WildCard.DefaultWildCard);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("ActionConditions", "http://schemas.microsoft.com/sharepoint/");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActionConditionsLocalType>(this);
            }
            
            FSM IXMetaData.GetValidationStates() {
                return validationStates;
            }
            
            private static void InitFSM() {
                Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
                transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 1)));
                validationStates = new FSM(1, new Set<int>(1), transitions);
            }
        }
    }
    
    public sealed class appliesToTypes {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "none",
                        "list",
                        "doclib",
                        "all",
                        "displayonly"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private appliesToTypes() {
        }
    }
    
    public sealed class DeleteBehaviorType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "None",
                        "Cascade",
                        "Restrict"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DeleteBehaviorType() {
        }
    }
    
    public sealed class DisplayFormat {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DateOnly",
                        "DateTime",
                        "TimeOnly",
                        "EventList",
                        "ISO8601",
                        "MonthDayOnly",
                        "MonthYearOnly",
                        "ISO8601Basic",
                        "ISO8601Gregorian",
                        "ISO8601BasicDateOnly",
                        "Dropdown",
                        "RadioButtons",
                        "Hyperlink",
                        "Image",
                        "TRUE",
                        "FALSE"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DisplayFormat() {
        }
    }
    
    public sealed class JoinType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "INNER",
                        "LEFT OUTER",
                        "RIGHT OUTER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private JoinType() {
        }
    }
    
    public sealed class ListItemMenuType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Required",
                        "Allowed",
                        "Prohibited"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ListItemMenuType() {
        }
    }
    
    public sealed class NegativeFormat {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "MinusSign",
                        "Parens"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NegativeFormat() {
        }
    }
    
    public sealed class IMEMode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "inactive"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private IMEMode() {
        }
    }
    
    public sealed class EventReceiverScope {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Site",
                        "Web"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private EventReceiverScope() {
        }
    }
    
    public sealed class EventReceiverSynchronization {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Synchronous",
                        "Asynchronous"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private EventReceiverSynchronization() {
        }
    }
    
    public sealed class EventReceiverType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ItemAdding",
                        "ItemUpdating",
                        "ItemDeleting",
                        "ItemCheckingIn",
                        "ItemCheckingOut",
                        "ItemUncheckingOut",
                        "ItemAttachmentAdding",
                        "ItemAttachmentDeleting",
                        "ItemFileMoving",
                        "FieldAdding",
                        "FieldUpdating",
                        "FieldDeleting",
                        "ListAdding",
                        "ListDeleting",
                        "SiteDeleting",
                        "WebDeleting",
                        "WebMoving",
                        "WebAdding",
                        "WorkflowStarting",
                        "WorkflowLoading",
                        "WorkflowUnloading",
                        "ItemAdded",
                        "ItemUpdated",
                        "ItemDeleted",
                        "ItemCheckedIn",
                        "ItemCheckedOut",
                        "ItemUncheckedOut",
                        "ItemAttachmentAdded",
                        "ItemAttachmentDeleted",
                        "ItemFileMoved",
                        "ItemFileConverted",
                        "FieldAdded",
                        "FieldUpdated",
                        "FieldDeleted",
                        "ListAdded",
                        "ListDeleted",
                        "SiteDeleted",
                        "WebDeleted",
                        "WebMoved",
                        "WebProvisioned",
                        "WorkflowStarted",
                        "WorkflowPostponed",
                        "WorkflowCompleted",
                        "EmailReceived",
                        "ContextEvent",
                        "ContextLookupReceivers"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private EventReceiverType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
    /// </para>
    /// </summary>
    public partial class SiteDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SiteDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SiteDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SiteDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public SiteDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public NavBarDefinitions NavBars {
            get {
                XElement x = this.GetElement(XName.Get("NavBars", "http://schemas.microsoft.com/sharepoint/"));
                return ((NavBarDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("NavBars", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public ListTemplateDefinitions ListTemplates {
            get {
                XElement x = this.GetElement(XName.Get("ListTemplates", "http://schemas.microsoft.com/sharepoint/"));
                return ((ListTemplateDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("ListTemplates", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public DocumentTemplateDefinitions DocumentTemplates {
            get {
                XElement x = this.GetElement(XName.Get("DocumentTemplates", "http://schemas.microsoft.com/sharepoint/"));
                return ((DocumentTemplateDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("DocumentTemplates", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public BaseTypeDefinitions BaseTypes {
            get {
                XElement x = this.GetElement(XName.Get("BaseTypes", "http://schemas.microsoft.com/sharepoint/"));
                return ((BaseTypeDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("BaseTypes", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public ConfigurationDefinitions Configurations {
            get {
                XElement x = this.GetElement(XName.Get("Configurations", "http://schemas.microsoft.com/sharepoint/"));
                return ((ConfigurationDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("Configurations", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public ModuleDefinitions Modules {
            get {
                XElement x = this.GetElement(XName.Get("Modules", "http://schemas.microsoft.com/sharepoint/"));
                return ((ModuleDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("Modules", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public ComponentsDefinition Components {
            get {
                XElement x = this.GetElement(XName.Get("Components", "http://schemas.microsoft.com/sharepoint/"));
                return ((ComponentsDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Components", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public ServerEmailFooterDefinition ServerEmailFooter {
            get {
                XElement x = this.GetElement(XName.Get("ServerEmailFooter", "http://schemas.microsoft.com/sharepoint/"));
                return ((ServerEmailFooterDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("ServerEmailFooter", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ListDir {
            get {
                XAttribute x = this.Attribute(XName.Get("ListDir", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ListDir", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AlternateURL {
            get {
                XAttribute x = this.Attribute(XName.Get("AlternateURL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AlternateURL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AlternateCSS {
            get {
                XAttribute x = this.Attribute(XName.Get("AlternateCSS", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AlternateCSS", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Revision {
            get {
                XAttribute x = this.Attribute(XName.Get("Revision", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Revision", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SiteLogoUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("SiteLogoUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SiteLogoUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SiteLogoDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("SiteLogoDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SiteLogoDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisableWebDesignFeatures {
            get {
                XAttribute x = this.Attribute(XName.Get("DisableWebDesignFeatures", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisableWebDesignFeatures", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SiteDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SiteDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("NavBars", "http://schemas.microsoft.com/sharepoint/"), typeof(NavBarDefinitions));
            localElementDictionary.Add(XName.Get("ListTemplates", "http://schemas.microsoft.com/sharepoint/"), typeof(ListTemplateDefinitions));
            localElementDictionary.Add(XName.Get("DocumentTemplates", "http://schemas.microsoft.com/sharepoint/"), typeof(DocumentTemplateDefinitions));
            localElementDictionary.Add(XName.Get("BaseTypes", "http://schemas.microsoft.com/sharepoint/"), typeof(BaseTypeDefinitions));
            localElementDictionary.Add(XName.Get("Configurations", "http://schemas.microsoft.com/sharepoint/"), typeof(ConfigurationDefinitions));
            localElementDictionary.Add(XName.Get("Modules", "http://schemas.microsoft.com/sharepoint/"), typeof(ModuleDefinitions));
            localElementDictionary.Add(XName.Get("Components", "http://schemas.microsoft.com/sharepoint/"), typeof(ComponentsDefinition));
            localElementDictionary.Add(XName.Get("ServerEmailFooter", "http://schemas.microsoft.com/sharepoint/"), typeof(ServerEmailFooterDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (NavBarLink*, NavBarPage*)
    /// </para>
    /// </summary>
    public partial class NavBarDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NavBarLinkDefinition> NavBarLinkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NavBarLinkDefinition> NavBarPageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator NavBarDefinition(XElement xe) { return XTypedServices.ToXTypedElement<NavBarDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NavBarDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NavBarLink", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("NavBarPage", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NavBarLink*, NavBarPage*)
        /// </para>
        /// </summary>
        public NavBarDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (NavBarLink*, NavBarPage*)
        /// </para>
        /// </summary>
        public IList<NavBarLinkDefinition> NavBarLink {
            get {
                if ((this.NavBarLinkField == null)) {
                    this.NavBarLinkField = new XTypedList<NavBarLinkDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("NavBarLink", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.NavBarLinkField;
            }
            set {
                if ((value == null)) {
                    this.NavBarLinkField = null;
                }
                else {
                    if ((this.NavBarLinkField == null)) {
                        this.NavBarLinkField = XTypedList<NavBarLinkDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("NavBarLink", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<NavBarLinkDefinition>(this.NavBarLinkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (NavBarLink*, NavBarPage*)
        /// </para>
        /// </summary>
        public IList<NavBarLinkDefinition> NavBarPage {
            get {
                if ((this.NavBarPageField == null)) {
                    this.NavBarPageField = new XTypedList<NavBarLinkDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("NavBarPage", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.NavBarPageField;
            }
            set {
                if ((value == null)) {
                    this.NavBarPageField = null;
                }
                else {
                    if ((this.NavBarPageField == null)) {
                        this.NavBarPageField = XTypedList<NavBarLinkDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("NavBarPage", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<NavBarLinkDefinition>(this.NavBarPageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Suffix {
            get {
                XAttribute x = this.Attribute(XName.Get("Suffix", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Suffix", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Separator {
            get {
                XAttribute x = this.Attribute(XName.Get("Separator", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Separator", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Prefix {
            get {
                XAttribute x = this.Attribute(XName.Get("Prefix", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Prefix", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Body {
            get {
                XAttribute x = this.Attribute(XName.Get("Body", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Body", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NavBarDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NavBarDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("NavBarLink", "http://schemas.microsoft.com/sharepoint/"), typeof(NavBarLinkDefinition));
            localElementDictionary.Add(XName.Get("NavBarPage", "http://schemas.microsoft.com/sharepoint/"), typeof(NavBarLinkDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class NavBarLinkDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator NavBarLinkDefinition(XElement xe) { return XTypedServices.ToXTypedElement<NavBarLinkDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public NavBarLinkDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NavBarLinkDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NavBarLinkDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (NavBar*)
    /// </para>
    /// </summary>
    public partial class NavBarDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NavBarDefinition> NavBarField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator NavBarDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<NavBarDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NavBarDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NavBar", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NavBar*)
        /// </para>
        /// </summary>
        public NavBarDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (NavBar*)
        /// </para>
        /// </summary>
        public IList<NavBarDefinition> NavBar {
            get {
                if ((this.NavBarField == null)) {
                    this.NavBarField = new XTypedList<NavBarDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("NavBar", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.NavBarField;
            }
            set {
                if ((value == null)) {
                    this.NavBarField = null;
                }
                else {
                    if ((this.NavBarField == null)) {
                        this.NavBarField = XTypedList<NavBarDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("NavBar", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<NavBarDefinition>(this.NavBarField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NavBarDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NavBarDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("NavBar", "http://schemas.microsoft.com/sharepoint/"), typeof(NavBarDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
    /// </para>
    /// </summary>
    public partial class FieldDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator FieldDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FieldDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public FieldDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public FieldRefDefinitions FieldRefs {
            get {
                XElement x = this.GetElement(XName.Get("FieldRefs", "http://schemas.microsoft.com/sharepoint/"));
                return ((FieldRefDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("FieldRefs", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public CamlViewRoot DisplayPattern {
            get {
                XElement x = this.GetElement(XName.Get("DisplayPattern", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("DisplayPattern", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public CamlViewRoot DisplayBidiPattern {
            get {
                XElement x = this.GetElement(XName.Get("DisplayBidiPattern", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("DisplayBidiPattern", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public CHOICEDEFINITIONS CHOICES {
            get {
                XElement x = this.GetElement(XName.Get("CHOICES", "http://schemas.microsoft.com/sharepoint/"));
                return ((CHOICEDEFINITIONS)(x));
            }
            set {
                this.SetElement(XName.Get("CHOICES", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public MAPPINGDEFINITIONS MAPPINGS {
            get {
                XElement x = this.GetElement(XName.Get("MAPPINGS", "http://schemas.microsoft.com/sharepoint/"));
                return ((MAPPINGDEFINITIONS)(x));
            }
            set {
                this.SetElement(XName.Get("MAPPINGS", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public string @Default {
            get {
                XElement x = this.GetElement(XName.Get("Default", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Default", "http://schemas.microsoft.com/sharepoint/"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public string Formula {
            get {
                XElement x = this.GetElement(XName.Get("Formula", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Formula", "http://schemas.microsoft.com/sharepoint/"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public string FormulaDisplayNames {
            get {
                XElement x = this.GetElement(XName.Get("FormulaDisplayNames", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("FormulaDisplayNames", "http://schemas.microsoft.com/sharepoint/"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public string DefaultFormula {
            get {
                XElement x = this.GetElement(XName.Get("DefaultFormula", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("DefaultFormula", "http://schemas.microsoft.com/sharepoint/"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public ValidationDefinition Validation {
            get {
                XElement x = this.GetElement(XName.Get("Validation", "http://schemas.microsoft.com/sharepoint/"));
                return ((ValidationDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Validation", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public CustomizationDefinition Customization {
            get {
                XElement x = this.GetElement(XName.Get("Customization", "http://schemas.microsoft.com/sharepoint/"));
                return ((CustomizationDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Customization", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Aggregation {
            get {
                XAttribute x = this.Attribute(XName.Get("Aggregation", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Aggregation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AllowDeletion {
            get {
                XAttribute x = this.Attribute(XName.Get("AllowDeletion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AllowDeletion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AllowDuplicateValues {
            get {
                XAttribute x = this.Attribute(XName.Get("AllowDuplicateValues", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AllowDuplicateValues", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AllowHyperlink {
            get {
                XAttribute x = this.Attribute(XName.Get("AllowHyperlink", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AllowHyperlink", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AllowMultiVote {
            get {
                XAttribute x = this.Attribute(XName.Get("AllowMultiVote", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AllowMultiVote", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AppendOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("AppendOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AppendOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AuthoringInfo {
            get {
                XAttribute x = this.Attribute(XName.Get("AuthoringInfo", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AuthoringInfo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string BaseType {
            get {
                XAttribute x = this.Attribute(XName.Get("BaseType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BaseType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> CalType {
            get {
                XAttribute x = this.Attribute(XName.Get("CalType", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CalType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CanToggleHidden {
            get {
                XAttribute x = this.Attribute(XName.Get("CanToggleHidden", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CanToggleHidden", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ClassInfo {
            get {
                XAttribute x = this.Attribute(XName.Get("ClassInfo", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ClassInfo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ColName {
            get {
                XAttribute x = this.Attribute(XName.Get("ColName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ColName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ColName2 {
            get {
                XAttribute x = this.Attribute(XName.Get("ColName2", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ColName2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Commas {
            get {
                XAttribute x = this.Attribute(XName.Get("Commas", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Commas", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Customization1 {
            get {
                XAttribute x = this.Attribute(XName.Get("Customization", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Customization", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DefaultListField {
            get {
                XAttribute x = this.Attribute(XName.Get("DefaultListField", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DefaultListField", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Decimals {
            get {
                XAttribute x = this.Attribute(XName.Get("Decimals", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Decimals", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Dir {
            get {
                XAttribute x = this.Attribute(XName.Get("Dir", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Dir", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Direction {
            get {
                XAttribute x = this.Attribute(XName.Get("Direction", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Direction", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayImage {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayImage", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayImage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayName {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayNameSrcField {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayNameSrcField", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayNameSrcField", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> DisplaySize {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplaySize", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplaySize", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Div {
            get {
                XAttribute x = this.Attribute(XName.Get("Div", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Div", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ListItemMenu {
            get {
                XAttribute x = this.Attribute(XName.Get("ListItemMenu", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ListItemMenu", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ListItemMenuAllowed {
            get {
                XAttribute x = this.Attribute(XName.Get("ListItemMenuAllowed", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ListItemMenuAllowed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EnableLookup {
            get {
                XAttribute x = this.Attribute(XName.Get("EnableLookup", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EnableLookup", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EnforceUniqueValues {
            get {
                XAttribute x = this.Attribute(XName.Get("EnforceUniqueValues", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EnforceUniqueValues", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ExceptionImage {
            get {
                XAttribute x = this.Attribute(XName.Get("ExceptionImage", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ExceptionImage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FieldRef {
            get {
                XAttribute x = this.Attribute(XName.Get("FieldRef", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FieldRef", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FillInChoice {
            get {
                XAttribute x = this.Attribute(XName.Get("FillInChoice", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FillInChoice", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Filterable {
            get {
                XAttribute x = this.Attribute(XName.Get("Filterable", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Filterable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FilterableNoRecurrence {
            get {
                XAttribute x = this.Attribute(XName.Get("FilterableNoRecurrence", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FilterableNoRecurrence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ForcedDisplay {
            get {
                XAttribute x = this.Attribute(XName.Get("ForcedDisplay", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ForcedDisplay", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ForcePromoteDemote {
            get {
                XAttribute x = this.Attribute(XName.Get("ForcePromoteDemote", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ForcePromoteDemote", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Format {
            get {
                XAttribute x = this.Attribute(XName.Get("Format", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Format", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FromBaseType {
            get {
                XAttribute x = this.Attribute(XName.Get("FromBaseType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FromBaseType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HeaderImage {
            get {
                XAttribute x = this.Attribute(XName.Get("HeaderImage", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HeaderImage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Height {
            get {
                XAttribute x = this.Attribute(XName.Get("Height", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Height", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Hidden {
            get {
                XAttribute x = this.Attribute(XName.Get("Hidden", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Hidden", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HTMLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("HTMLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HTMLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string IMEMode {
            get {
                XAttribute x = this.Attribute(XName.Get("IMEMode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IMEMode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Indexed {
            get {
                XAttribute x = this.Attribute(XName.Get("Indexed", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Indexed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string IsolateStyles {
            get {
                XAttribute x = this.Attribute(XName.Get("IsolateStyles", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsolateStyles", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string IsRelationship {
            get {
                XAttribute x = this.Attribute(XName.Get("IsRelationship", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsRelationship", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string JoinColName {
            get {
                XAttribute x = this.Attribute(XName.Get("JoinColName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("JoinColName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string JoinType {
            get {
                XAttribute x = this.Attribute(XName.Get("JoinType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("JoinType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LCID {
            get {
                XAttribute x = this.Attribute(XName.Get("LCID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LCID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LinkToItem {
            get {
                XAttribute x = this.Attribute(XName.Get("LinkToItem", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LinkToItem", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string LinkToItemAllowed {
            get {
                XAttribute x = this.Attribute(XName.Get("LinkToItemAllowed", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("LinkToItemAllowed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string List {
            get {
                XAttribute x = this.Attribute(XName.Get("List", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("List", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<float> Max {
            get {
                XAttribute x = this.Attribute(XName.Get("Max", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Max", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Min {
            get {
                XAttribute x = this.Attribute(XName.Get("Min", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Min", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Mult {
            get {
                XAttribute x = this.Attribute(XName.Get("Mult", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Mult", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NegativeFormat {
            get {
                XAttribute x = this.Attribute(XName.Get("NegativeFormat", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NegativeFormat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NoCrawl {
            get {
                XAttribute x = this.Attribute(XName.Get("NoCrawl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NoCrawl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Node {
            get {
                XAttribute x = this.Attribute(XName.Get("Node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NoEditFormBreak {
            get {
                XAttribute x = this.Attribute(XName.Get("NoEditFormBreak", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NoEditFormBreak", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> NumLines {
            get {
                XAttribute x = this.Attribute(XName.Get("NumLines", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NumLines", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Percentage {
            get {
                XAttribute x = this.Attribute(XName.Get("Percentage", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Percentage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PIAttribute {
            get {
                XAttribute x = this.Attribute(XName.Get("PIAttribute", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PIAttribute", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PITarget {
            get {
                XAttribute x = this.Attribute(XName.Get("PITarget", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PITarget", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PrimaryPIAttribute {
            get {
                XAttribute x = this.Attribute(XName.Get("PrimaryPIAttribute", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PrimaryPIAttribute", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PrimaryPITarget {
            get {
                XAttribute x = this.Attribute(XName.Get("PrimaryPITarget", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PrimaryPITarget", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Presence {
            get {
                XAttribute x = this.Attribute(XName.Get("Presence", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Presence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PrimaryKey {
            get {
                XAttribute x = this.Attribute(XName.Get("PrimaryKey", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PrimaryKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @ReadOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("ReadOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReadOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReadOnlyEnforced {
            get {
                XAttribute x = this.Attribute(XName.Get("ReadOnlyEnforced", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReadOnlyEnforced", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RelationshipDeleteBehavior {
            get {
                XAttribute x = this.Attribute(XName.Get("RelationshipDeleteBehavior", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RelationshipDeleteBehavior", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RenderXMLUsingPattern {
            get {
                XAttribute x = this.Attribute(XName.Get("RenderXMLUsingPattern", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RenderXMLUsingPattern", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Required {
            get {
                XAttribute x = this.Attribute(XName.Get("Required", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Required", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RestrictedMode {
            get {
                XAttribute x = this.Attribute(XName.Get("RestrictedMode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RestrictedMode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ResultType {
            get {
                XAttribute x = this.Attribute(XName.Get("ResultType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ResultType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RichTextMode {
            get {
                XAttribute x = this.Attribute(XName.Get("RichTextMode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RichTextMode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RichText {
            get {
                XAttribute x = this.Attribute(XName.Get("RichText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RichText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Sealed {
            get {
                XAttribute x = this.Attribute(XName.Get("Sealed", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sealed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SeperateLine {
            get {
                XAttribute x = this.Attribute(XName.Get("SeperateLine", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SeperateLine", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SetAs {
            get {
                XAttribute x = this.Attribute(XName.Get("SetAs", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SetAs", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowAddressBookButton {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowAddressBookButton", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowAddressBookButton", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowAlways {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowAlways", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowAlways", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowField {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowField", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowField", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInDisplayForm {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInDisplayForm", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInDisplayForm", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInEditForm {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInEditForm", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInEditForm", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInFileDlg {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInFileDlg", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInFileDlg", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInListSettings {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInListSettings", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInListSettings", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInNewForm {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInNewForm", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInNewForm", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInViewForms {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInViewForms", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInViewForms", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Sortable {
            get {
                XAttribute x = this.Attribute(XName.Get("Sortable", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sortable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string StorageTZ {
            get {
                XAttribute x = this.Attribute(XName.Get("StorageTZ", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("StorageTZ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string StripWS {
            get {
                XAttribute x = this.Attribute(XName.Get("StripWS", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("StripWS", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SuppressNameDisplay {
            get {
                XAttribute x = this.Attribute(XName.Get("SuppressNameDisplay", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SuppressNameDisplay", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TextOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("TextOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TextOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UniqueId {
            get {
                XAttribute x = this.Attribute(XName.Get("UniqueId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UniqueId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UnlimitedLengthInDocumentLibrary {
            get {
                XAttribute x = this.Attribute(XName.Get("UnlimitedLengthInDocumentLibrary", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UnlimitedLengthInDocumentLibrary", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncodeAsURL", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncodeAsURL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Viewable {
            get {
                XAttribute x = this.Attribute(XName.Get("Viewable", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Viewable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string WikiLinking {
            get {
                XAttribute x = this.Attribute(XName.Get("WikiLinking", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("WikiLinking", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Width {
            get {
                XAttribute x = this.Attribute(XName.Get("Width", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Width", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string WebId {
            get {
                XAttribute x = this.Attribute(XName.Get("WebId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("WebId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string XName {
            get {
                XAttribute x = this.Attribute(XName.Get("XName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("XName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ID1 {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Group {
            get {
                XAttribute x = this.Attribute(XName.Get("Group", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Group", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> MaxLength {
            get {
                XAttribute x = this.Attribute(XName.Get("MaxLength", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MaxLength", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SourceID {
            get {
                XAttribute x = this.Attribute(XName.Get("SourceID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SourceID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string StaticName {
            get {
                XAttribute x = this.Attribute(XName.Get("StaticName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("StaticName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> JoinRowOrdinal {
            get {
                XAttribute x = this.Attribute(XName.Get("JoinRowOrdinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("JoinRowOrdinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> RowOrdinal {
            get {
                XAttribute x = this.Attribute(XName.Get("RowOrdinal", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RowOrdinal", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> RowOrdinal2 {
            get {
                XAttribute x = this.Attribute(XName.Get("RowOrdinal2", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RowOrdinal2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInVersionHistory {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInVersionHistory", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInVersionHistory", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PrependId {
            get {
                XAttribute x = this.Attribute(XName.Get("PrependId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PrependId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplaceOnUpgrade {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplaceOnUpgrade", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplaceOnUpgrade", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UserSelectionMode {
            get {
                XAttribute x = this.Attribute(XName.Get("UserSelectionMode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserSelectionMode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> UserSelectionScope {
            get {
                XAttribute x = this.Attribute(XName.Get("UserSelectionScope", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UserSelectionScope", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FieldDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FieldRefs", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldRefDefinitions));
            localElementDictionary.Add(XName.Get("DisplayPattern", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("DisplayBidiPattern", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("CHOICES", "http://schemas.microsoft.com/sharepoint/"), typeof(CHOICEDEFINITIONS));
            localElementDictionary.Add(XName.Get("MAPPINGS", "http://schemas.microsoft.com/sharepoint/"), typeof(MAPPINGDEFINITIONS));
            localElementDictionary.Add(XName.Get("Default", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("Formula", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("FormulaDisplayNames", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("DefaultFormula", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("Validation", "http://schemas.microsoft.com/sharepoint/"), typeof(ValidationDefinition));
            localElementDictionary.Add(XName.Get("Customization", "http://schemas.microsoft.com/sharepoint/"), typeof(CustomizationDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MetaData?)
    /// </para>
    /// </summary>
    public partial class BaseListDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator BaseListDefinition(XElement xe) { return XTypedServices.ToXTypedElement<BaseListDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BaseListDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MetaData?)
        /// </para>
        /// </summary>
        public BaseListDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MetaData?)
        /// </para>
        /// </summary>
        public ListMetaDataDefinition MetaData {
            get {
                XElement x = this.GetElement(XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/"));
                return ((ListMetaDataDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Default {
            get {
                XAttribute x = this.Attribute(XName.Get("Default", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Default", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<long> WebImageWidth {
            get {
                XAttribute x = this.Attribute(XName.Get("WebImageWidth", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("WebImageWidth", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisableAttachments {
            get {
                XAttribute x = this.Attribute(XName.Get("DisableAttachments", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisableAttachments", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EventSinkAssembly {
            get {
                XAttribute x = this.Attribute(XName.Get("EventSinkAssembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EventSinkAssembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EventSinkClass {
            get {
                XAttribute x = this.Attribute(XName.Get("EventSinkClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EventSinkClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EventSinkData {
            get {
                XAttribute x = this.Attribute(XName.Get("EventSinkData", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EventSinkData", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OrderedList {
            get {
                XAttribute x = this.Attribute(XName.Get("OrderedList", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OrderedList", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PrivateList {
            get {
                XAttribute x = this.Attribute(XName.Get("PrivateList", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PrivateList", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QuickLaunchUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("QuickLaunchUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QuickLaunchUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RootWebOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("RootWebOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RootWebOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> ThumbnailSize {
            get {
                XAttribute x = this.Attribute(XName.Get("ThumbnailSize", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ThumbnailSize", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<long> WebImageHeight {
            get {
                XAttribute x = this.Attribute(XName.Get("WebImageHeight", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("WebImageHeight", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string IsApplicationList {
            get {
                XAttribute x = this.Attribute(XName.Get("IsApplicationList", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsApplicationList", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("BaseListDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BaseListDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/"), typeof(ListMetaDataDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Field*)
    /// </para>
    /// </summary>
    public partial class FieldDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldDefinition> FieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FieldDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<FieldDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FieldDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Field*)
        /// </para>
        /// </summary>
        public FieldDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Field*)
        /// </para>
        /// </summary>
        public IList<FieldDefinition> Field {
            get {
                if ((this.FieldField == null)) {
                    this.FieldField = new XTypedList<FieldDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldField;
            }
            set {
                if ((value == null)) {
                    this.FieldField = null;
                }
                else {
                    if ((this.FieldField == null)) {
                        this.FieldField = XTypedList<FieldDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FieldDefinition>(this.FieldField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Revision {
            get {
                XAttribute x = this.Attribute(XName.Get("Revision", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Revision", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FieldDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ListFormOpening?, ListFormButtons?, ListFormBody?, ListFormClosing?)
    /// </para>
    /// </summary>
    public partial class FormDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator FormDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FormDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FormDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ListFormOpening?, ListFormButtons?, ListFormBody?, ListFormClosing?)
        /// </para>
        /// </summary>
        public FormDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ListFormOpening?, ListFormButtons?, ListFormBody?, ListFormClosing?)
        /// </para>
        /// </summary>
        public CamlViewRoot ListFormOpening {
            get {
                XElement x = this.GetElement(XName.Get("ListFormOpening", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("ListFormOpening", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ListFormOpening?, ListFormButtons?, ListFormBody?, ListFormClosing?)
        /// </para>
        /// </summary>
        public CamlViewRoot ListFormButtons {
            get {
                XElement x = this.GetElement(XName.Get("ListFormButtons", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("ListFormButtons", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ListFormOpening?, ListFormButtons?, ListFormBody?, ListFormClosing?)
        /// </para>
        /// </summary>
        public CamlViewRoot ListFormBody {
            get {
                XElement x = this.GetElement(XName.Get("ListFormBody", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("ListFormBody", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ListFormOpening?, ListFormButtons?, ListFormBody?, ListFormClosing?)
        /// </para>
        /// </summary>
        public CamlViewRoot ListFormClosing {
            get {
                XElement x = this.GetElement(XName.Get("ListFormClosing", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("ListFormClosing", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Path {
            get {
                XAttribute x = this.Attribute(XName.Get("Path", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Path", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SetupPath {
            get {
                XAttribute x = this.Attribute(XName.Get("SetupPath", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SetupPath", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MobileUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("MobileUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MobileUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UseLegacyForm {
            get {
                XAttribute x = this.Attribute(XName.Get("UseLegacyForm", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UseLegacyForm", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Template {
            get {
                XAttribute x = this.Attribute(XName.Get("Template", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Template", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string WebPartZoneID {
            get {
                XAttribute x = this.Attribute(XName.Get("WebPartZoneID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("WebPartZoneID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FormDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FormDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ListFormOpening", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("ListFormButtons", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("ListFormBody", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("ListFormClosing", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class FormType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DisplayForm",
                        "EditForm",
                        "NewForm",
                        "NewFormDialog",
                        ""}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FormType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Form*)
    /// </para>
    /// </summary>
    public partial class ListFormSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FormDefinition> FormField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ListFormSet(XElement xe) { return XTypedServices.ToXTypedElement<ListFormSet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListFormSet() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Form", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Form*)
        /// </para>
        /// </summary>
        public ListFormSet() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Form*)
        /// </para>
        /// </summary>
        public IList<FormDefinition> Form {
            get {
                if ((this.FormField == null)) {
                    this.FormField = new XTypedList<FormDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Form", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FormField;
            }
            set {
                if ((value == null)) {
                    this.FormField = null;
                }
                else {
                    if ((this.FormField == null)) {
                        this.FormField = XTypedList<FormDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Form", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FormDefinition>(this.FormField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ListFormSet", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListFormSet>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Form", "http://schemas.microsoft.com/sharepoint/"), typeof(FormDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class ToolbarDefinition : global::Microsoft.Schemas.SharePoint.CamlViewRoot, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ToolbarDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ToolbarDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ToolbarDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | @Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | @ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public ToolbarDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Position {
            get {
                XAttribute x = this.Attribute(XName.Get("Position", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Position", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ToolbarDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ToolbarDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Column", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Column2", "http://schemas.microsoft.com/sharepoint/"), typeof(QueryColumnDefinition));
            localElementDictionary.Add(XName.Get("Counter", "http://schemas.microsoft.com/sharepoint/"), typeof(CounterDefinition));
            localElementDictionary.Add(XName.Get("CurrentRights", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(XName.Get("FieldPrefix", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("FieldProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("FieldSwitch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("FilterLink", "http://schemas.microsoft.com/sharepoint/"), typeof(FilterLinkDefinition));
            localElementDictionary.Add(XName.Get("GetFileExtension", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(GetVarDefinition));
            localElementDictionary.Add(XName.Get("HTML", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlContentDefinition));
            localElementDictionary.Add(XName.Get("HttpHost", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpHostDefinition));
            localElementDictionary.Add(XName.Get("HttpPath", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("HttpVDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpVDirDefinition));
            localElementDictionary.Add(XName.Get("ID", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfEqual", "http://schemas.microsoft.com/sharepoint/"), typeof(IfEqualDefinition));
            localElementDictionary.Add(XName.Get("IfNeg", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNegDefinition));
            localElementDictionary.Add(XName.Get("IfNew", "http://schemas.microsoft.com/sharepoint/"), typeof(IfNewDefinition));
            localElementDictionary.Add(XName.Get("IfSubString", "http://schemas.microsoft.com/sharepoint/"), typeof(IfSubStringDefinition));
            localElementDictionary.Add(XName.Get("Length", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("Limit", "http://schemas.microsoft.com/sharepoint/"), typeof(LimitDefinition));
            localElementDictionary.Add(XName.Get("List", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("ListUrlDir", "http://schemas.microsoft.com/sharepoint/"), typeof(HttpPathDefinition));
            localElementDictionary.Add(XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ListPropertyDefinition));
            localElementDictionary.Add(XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/"), typeof(LookupColumnDefinition));
            localElementDictionary.Add(XName.Get("MapToAll", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToIcon", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("PageUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldPropertyDefinition));
            localElementDictionary.Add(XName.Get("ScriptQuote", "http://schemas.microsoft.com/sharepoint/"), typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(XName.Get("SelectionOptions", "http://schemas.microsoft.com/sharepoint/"), typeof(SelectOptionsDefinition));
            localElementDictionary.Add(XName.Get("ServerProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ServerPropertyDefinition));
            localElementDictionary.Add(XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/"), typeof(SetVarDefinition));
            localElementDictionary.Add(XName.Get("Switch", "http://schemas.microsoft.com/sharepoint/"), typeof(SwitchDefinition));
            localElementDictionary.Add(XName.Get("ThreadStamp", "http://schemas.microsoft.com/sharepoint/"), typeof(ThreadStampDefinition));
            localElementDictionary.Add(XName.Get("URL", "http://schemas.microsoft.com/sharepoint/"), typeof(URLDefinition));
            localElementDictionary.Add(XName.Get("UrlDirName", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("UrlBaseName", "http://schemas.microsoft.com/sharepoint/"), typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(XName.Get("MeetingProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(XName.Get("ProjectProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/"), typeof(UserIDDefinition));
            localElementDictionary.Add(XName.Get("FieldSortParams", "http://schemas.microsoft.com/sharepoint/"), typeof(HtmlRenderingElement));
            localElementDictionary.Add(XName.Get("WebQueryInfo", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("Identity", "http://schemas.microsoft.com/sharepoint/"), typeof(EmptyElement));
            localElementDictionary.Add(XName.Get("IfHasRights", "http://schemas.microsoft.com/sharepoint/"), typeof(IfHasRightsDefinition));
            localElementDictionary.Add(XName.Get("MapToControl", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("ForEach", "http://schemas.microsoft.com/sharepoint/"), typeof(ForEachElement));
            localElementDictionary.Add(XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
            localElementDictionary.Add(XName.Get("MapToContentType", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class ToolbarType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Standard",
                        "FreeForm",
                        "RelatedTasks",
                        "Freeform"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ToolbarType() {
        }
    }
    
    public sealed class ToolbarPosition {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "After"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ToolbarPosition() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
    /// </para>
    /// </summary>
    public partial class ViewDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ViewDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ViewDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ViewDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public ViewDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public CamlViewRoot PagedRowset {
            get {
                XElement x = this.GetElement(XName.Get("PagedRowset", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("PagedRowset", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public ToolbarDefinition Toolbar {
            get {
                XElement x = this.GetElement(XName.Get("Toolbar", "http://schemas.microsoft.com/sharepoint/"));
                return ((ToolbarDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Toolbar", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public CamlQueryRoot Query {
            get {
                XElement x = this.GetElement(XName.Get("Query", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlQueryRoot)(x));
            }
            set {
                this.SetElement(XName.Get("Query", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public FieldRefDefinitions ViewFields {
            get {
                XElement x = this.GetElement(XName.Get("ViewFields", "http://schemas.microsoft.com/sharepoint/"));
                return ((FieldRefDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("ViewFields", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public CamlBdcMethod Method {
            get {
                XElement x = this.GetElement(XName.Get("Method", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlBdcMethod)(x));
            }
            set {
                this.SetElement(XName.Get("Method", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public CamlViewRoot GroupByHeader {
            get {
                XElement x = this.GetElement(XName.Get("GroupByHeader", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("GroupByHeader", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public CamlViewRoot GroupByFooter {
            get {
                XElement x = this.GetElement(XName.Get("GroupByFooter", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("GroupByFooter", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public CamlViewRoot ViewHeader {
            get {
                XElement x = this.GetElement(XName.Get("ViewHeader", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("ViewHeader", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public CamlViewRoot ViewBody {
            get {
                XElement x = this.GetElement(XName.Get("ViewBody", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("ViewBody", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public CamlViewRoot ViewFooter {
            get {
                XElement x = this.GetElement(XName.Get("ViewFooter", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("ViewFooter", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public CamlViewRoot RowLimitExceeded {
            get {
                XElement x = this.GetElement(XName.Get("RowLimitExceeded", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("RowLimitExceeded", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public CamlViewRoot ViewEmpty {
            get {
                XElement x = this.GetElement(XName.Get("ViewEmpty", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("ViewEmpty", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public CamlViewRoot PagedRecurrenceRowset {
            get {
                XElement x = this.GetElement(XName.Get("PagedRecurrenceRowset", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("PagedRecurrenceRowset", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public CamlViewRoot PagedClientCallbackRowset {
            get {
                XElement x = this.GetElement(XName.Get("PagedClientCallbackRowset", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("PagedClientCallbackRowset", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public RowLimitDefinition RowLimit {
            get {
                XElement x = this.GetElement(XName.Get("RowLimit", "http://schemas.microsoft.com/sharepoint/"));
                return ((RowLimitDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("RowLimit", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public ViewStyleReference ViewStyle {
            get {
                XElement x = this.GetElement(XName.Get("ViewStyle", "http://schemas.microsoft.com/sharepoint/"));
                return ((ViewStyleReference)(x));
            }
            set {
                this.SetElement(XName.Get("ViewStyle", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public ViewDataFieldRefDefinitions ViewData {
            get {
                XElement x = this.GetElement(XName.Get("ViewData", "http://schemas.microsoft.com/sharepoint/"));
                return ((ViewDataFieldRefDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("ViewData", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public CamlViewRoot Xsl {
            get {
                XElement x = this.GetElement(XName.Get("Xsl", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("Xsl", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public CamlViewRoot XslLink {
            get {
                XElement x = this.GetElement(XName.Get("XslLink", "http://schemas.microsoft.com/sharepoint/"));
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XName.Get("XslLink", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AggregateView {
            get {
                XAttribute x = this.Attribute(XName.Get("AggregateView", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AggregateView", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> BaseViewID {
            get {
                XAttribute x = this.Attribute(XName.Get("BaseViewID", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BaseViewID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DefaultView {
            get {
                XAttribute x = this.Attribute(XName.Get("DefaultView", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DefaultView", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayName {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FailIfEmpty {
            get {
                XAttribute x = this.Attribute(XName.Get("FailIfEmpty", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FailIfEmpty", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FileDialog {
            get {
                XAttribute x = this.Attribute(XName.Get("FileDialog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FileDialog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FPModified {
            get {
                XAttribute x = this.Attribute(XName.Get("FPModified", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FPModified", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Hidden {
            get {
                XAttribute x = this.Attribute(XName.Get("Hidden", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Hidden", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> List {
            get {
                XAttribute x = this.Attribute(XName.Get("List", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("List", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ContentTypeID {
            get {
                XAttribute x = this.Attribute(XName.Get("ContentTypeID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ContentTypeID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OrderedView {
            get {
                XAttribute x = this.Attribute(XName.Get("OrderedView", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OrderedView", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DefaultViewForContentType {
            get {
                XAttribute x = this.Attribute(XName.Get("DefaultViewForContentType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DefaultViewForContentType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string IncludeRootFolder {
            get {
                XAttribute x = this.Attribute(XName.Get("IncludeRootFolder", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IncludeRootFolder", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PageType {
            get {
                XAttribute x = this.Attribute(XName.Get("PageType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PageType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Path {
            get {
                XAttribute x = this.Attribute(XName.Get("Path", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Path", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @ReadOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("ReadOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReadOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RecurrenceRowset {
            get {
                XAttribute x = this.Attribute(XName.Get("RecurrenceRowset", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RecurrenceRowset", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RequiresClientIntegration {
            get {
                XAttribute x = this.Attribute(XName.Get("RequiresClientIntegration", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RequiresClientIntegration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> RowLimit1 {
            get {
                XAttribute x = this.Attribute(XName.Get("RowLimit", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RowLimit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Scope {
            get {
                XAttribute x = this.Attribute(XName.Get("Scope", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Scope", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowHeaderUI {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowHeaderUI", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowHeaderUI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TabularView {
            get {
                XAttribute x = this.Attribute(XName.Get("TabularView", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TabularView", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Threaded {
            get {
                XAttribute x = this.Attribute(XName.Get("Threaded", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Threaded", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> WebPartOrder {
            get {
                XAttribute x = this.Attribute(XName.Get("WebPartOrder", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("WebPartOrder", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string WebPartZoneID {
            get {
                XAttribute x = this.Attribute(XName.Get("WebPartZoneID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("WebPartZoneID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FreeForm {
            get {
                XAttribute x = this.Attribute(XName.Get("FreeForm", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FreeForm", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SetupPath {
            get {
                XAttribute x = this.Attribute(XName.Get("SetupPath", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SetupPath", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ModerationType {
            get {
                XAttribute x = this.Attribute(XName.Get("ModerationType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ModerationType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToolbarTemplate {
            get {
                XAttribute x = this.Attribute(XName.Get("ToolbarTemplate", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToolbarTemplate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MobileView {
            get {
                XAttribute x = this.Attribute(XName.Get("MobileView", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MobileView", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MobileUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("MobileUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MobileUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MobileDefaultView {
            get {
                XAttribute x = this.Attribute(XName.Get("MobileDefaultView", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MobileDefaultView", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> MobileItemLimit {
            get {
                XAttribute x = this.Attribute(XName.Get("MobileItemLimit", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MobileItemLimit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MobileSimpleViewField {
            get {
                XAttribute x = this.Attribute(XName.Get("MobileSimpleViewField", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MobileSimpleViewField", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReqAuth {
            get {
                XAttribute x = this.Attribute(XName.Get("ReqAuth", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReqAuth", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TargetType {
            get {
                XAttribute x = this.Attribute(XName.Get("TargetType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TargetType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TargetId {
            get {
                XAttribute x = this.Attribute(XName.Get("TargetId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TargetId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CssStyleSheet {
            get {
                XAttribute x = this.Attribute(XName.Get("CssStyleSheet", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CssStyleSheet", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ViewDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ViewDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PagedRowset", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("Toolbar", "http://schemas.microsoft.com/sharepoint/"), typeof(ToolbarDefinition));
            localElementDictionary.Add(XName.Get("Query", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlQueryRoot));
            localElementDictionary.Add(XName.Get("ViewFields", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldRefDefinitions));
            localElementDictionary.Add(XName.Get("Method", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlBdcMethod));
            localElementDictionary.Add(XName.Get("GroupByHeader", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("GroupByFooter", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("ViewHeader", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("ViewBody", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("ViewFooter", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("RowLimitExceeded", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("ViewEmpty", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("PagedRecurrenceRowset", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("PagedClientCallbackRowset", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("RowLimit", "http://schemas.microsoft.com/sharepoint/"), typeof(RowLimitDefinition));
            localElementDictionary.Add(XName.Get("ViewStyle", "http://schemas.microsoft.com/sharepoint/"), typeof(ViewStyleReference));
            localElementDictionary.Add(XName.Get("ViewData", "http://schemas.microsoft.com/sharepoint/"), typeof(ViewDataFieldRefDefinitions));
            localElementDictionary.Add(XName.Get("Xsl", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("XslLink", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Property*)*)
    /// </para>
    /// </summary>
    public partial class ListDataSourceDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyValueAttributeDefinition> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ListDataSourceDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ListDataSourceDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListDataSourceDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Property*)*)
        /// </para>
        /// </summary>
        public ListDataSourceDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Property*)*)
        /// </para>
        /// </summary>
        public IList<PropertyValueAttributeDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyValueAttributeDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyValueAttributeDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<PropertyValueAttributeDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ListDataSourceDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListDataSourceDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(PropertyValueAttributeDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ListTemplateDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ListTemplateDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ListTemplateDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ListTemplateDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Unique {
            get {
                XAttribute x = this.Attribute(XName.Get("Unique", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Unique", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SecurityBits {
            get {
                XAttribute x = this.Attribute(XName.Get("SecurityBits", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SecurityBits", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RootWebOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("RootWebOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RootWebOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Catalog {
            get {
                XAttribute x = this.Attribute(XName.Get("Catalog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Catalog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Default {
            get {
                XAttribute x = this.Attribute(XName.Get("Default", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Default", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayName {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> DocumentTemplate {
            get {
                XAttribute x = this.Attribute(XName.Get("DocumentTemplate", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DocumentTemplate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DontSaveInTemplate {
            get {
                XAttribute x = this.Attribute(XName.Get("DontSaveInTemplate", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DontSaveInTemplate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AllowDeletion {
            get {
                XAttribute x = this.Attribute(XName.Get("AllowDeletion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AllowDeletion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisableAttachments {
            get {
                XAttribute x = this.Attribute(XName.Get("DisableAttachments", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisableAttachments", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EnableModeration {
            get {
                XAttribute x = this.Attribute(XName.Get("EnableModeration", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EnableModeration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Hidden {
            get {
                XAttribute x = this.Attribute(XName.Get("Hidden", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Hidden", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HiddenList {
            get {
                XAttribute x = this.Attribute(XName.Get("HiddenList", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HiddenList", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image {
            get {
                XAttribute x = this.Attribute(XName.Get("Image", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MustSaveRootFiles {
            get {
                XAttribute x = this.Attribute(XName.Get("MustSaveRootFiles", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MustSaveRootFiles", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OnQuickLaunch {
            get {
                XAttribute x = this.Attribute(XName.Get("OnQuickLaunch", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OnQuickLaunch", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CacheSchema {
            get {
                XAttribute x = this.Attribute(XName.Get("CacheSchema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CacheSchema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NoCrawl {
            get {
                XAttribute x = this.Attribute(XName.Get("NoCrawl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NoCrawl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AllowEveryoneViewItems {
            get {
                XAttribute x = this.Attribute(XName.Get("AllowEveryoneViewItems", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AllowEveryoneViewItems", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AlwaysIncludeContent {
            get {
                XAttribute x = this.Attribute(XName.Get("AlwaysIncludeContent", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AlwaysIncludeContent", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Path {
            get {
                XAttribute x = this.Attribute(XName.Get("Path", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Path", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SyncType {
            get {
                XAttribute x = this.Attribute(XName.Get("SyncType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SyncType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SetupPath {
            get {
                XAttribute x = this.Attribute(XName.Get("SetupPath", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SetupPath", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string BaseType {
            get {
                XAttribute x = this.Attribute(XName.Get("BaseType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BaseType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EditPage {
            get {
                XAttribute x = this.Attribute(XName.Get("EditPage", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EditPage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FeatureId {
            get {
                XAttribute x = this.Attribute(XName.Get("FeatureId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FeatureId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FolderCreation {
            get {
                XAttribute x = this.Attribute(XName.Get("FolderCreation", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FolderCreation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MultipleTypes {
            get {
                XAttribute x = this.Attribute(XName.Get("MultipleTypes", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MultipleTypes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisallowContentTypes {
            get {
                XAttribute x = this.Attribute(XName.Get("DisallowContentTypes", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisallowContentTypes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NewPage {
            get {
                XAttribute x = this.Attribute(XName.Get("NewPage", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NewPage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<long> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string VersioningEnabled {
            get {
                XAttribute x = this.Attribute(XName.Get("VersioningEnabled", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("VersioningEnabled", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Category {
            get {
                XAttribute x = this.Attribute(XName.Get("Category", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Category", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UseRootFolderForNavigation {
            get {
                XAttribute x = this.Attribute(XName.Get("UseRootFolderForNavigation", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UseRootFolderForNavigation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DocumentAsEnclosure {
            get {
                XAttribute x = this.Attribute(XName.Get("DocumentAsEnclosure", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DocumentAsEnclosure", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EnablePeopleSelector {
            get {
                XAttribute x = this.Attribute(XName.Get("EnablePeopleSelector", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EnablePeopleSelector", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EnableResourceSelector {
            get {
                XAttribute x = this.Attribute(XName.Get("EnableResourceSelector", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EnableResourceSelector", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ListTemplateDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListTemplateDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class WebTemplateDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator WebTemplateDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WebTemplateDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WebTemplateDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> AdjustHijriDays {
            get {
                XAttribute x = this.Attribute(XName.Get("AdjustHijriDays", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AdjustHijriDays", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AlternateCssUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("AlternateCssUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AlternateCssUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AlternateHeader {
            get {
                XAttribute x = this.Attribute(XName.Get("AlternateHeader", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AlternateHeader", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int BaseTemplateID {
            get {
                XAttribute x = this.Attribute(XName.Get("BaseTemplateID", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BaseTemplateID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string BaseTemplateName {
            get {
                XAttribute x = this.Attribute(XName.Get("BaseTemplateName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BaseTemplateName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public int BaseConfigurationID {
            get {
                XAttribute x = this.Attribute(XName.Get("BaseConfigurationID", ""));
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BaseConfigurationID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> CalendarType {
            get {
                XAttribute x = this.Attribute(XName.Get("CalendarType", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CalendarType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Collation {
            get {
                XAttribute x = this.Attribute(XName.Get("Collation", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Collation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ContainsDefaultLists {
            get {
                XAttribute x = this.Attribute(XName.Get("ContainsDefaultLists", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ContainsDefaultLists", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CustomizedCssFiles {
            get {
                XAttribute x = this.Attribute(XName.Get("CustomizedCssFiles", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CustomizedCssFiles", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CustomJSUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("CustomJSUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CustomJSUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayCategory {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayCategory", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayCategory", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ExcludeFromOfflineClient {
            get {
                XAttribute x = this.Attribute(XName.Get("ExcludeFromOfflineClient", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ExcludeFromOfflineClient", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Locale {
            get {
                XAttribute x = this.Attribute(XName.Get("Locale", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Locale", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ParserEnabled {
            get {
                XAttribute x = this.Attribute(XName.Get("ParserEnabled", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ParserEnabled", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PortalName {
            get {
                XAttribute x = this.Attribute(XName.Get("PortalName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PortalName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PortalUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("PortalUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PortalUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PresenceEnabled {
            get {
                XAttribute x = this.Attribute(XName.Get("PresenceEnabled", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PresenceEnabled", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> ProductVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("ProductVersion", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ProductVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QuickLaunchEnabled {
            get {
                XAttribute x = this.Attribute(XName.Get("QuickLaunchEnabled", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QuickLaunchEnabled", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Subweb {
            get {
                XAttribute x = this.Attribute(XName.Get("Subweb", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Subweb", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SyndicationEnabled {
            get {
                XAttribute x = this.Attribute(XName.Get("SyndicationEnabled", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SyndicationEnabled", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Time24 {
            get {
                XAttribute x = this.Attribute(XName.Get("Time24", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Time24", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> TimeZone {
            get {
                XAttribute x = this.Attribute(XName.Get("TimeZone", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TimeZone", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TreeViewEnabled {
            get {
                XAttribute x = this.Attribute(XName.Get("TreeViewEnabled", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TreeViewEnabled", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UIVersionConfigurationEnabled {
            get {
                XAttribute x = this.Attribute(XName.Get("UIVersionConfigurationEnabled", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UIVersionConfigurationEnabled", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("WebTemplateDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebTemplateDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class BaseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "0",
                        "1",
                        "5",
                        "3",
                        "4"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private BaseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ListTemplate*)
    /// </para>
    /// </summary>
    public partial class ListTemplateDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ListTemplateDefinition> ListTemplateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ListTemplateDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ListTemplateDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListTemplateDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ListTemplate", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ListTemplate*)
        /// </para>
        /// </summary>
        public ListTemplateDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ListTemplate*)
        /// </para>
        /// </summary>
        public IList<ListTemplateDefinition> ListTemplate {
            get {
                if ((this.ListTemplateField == null)) {
                    this.ListTemplateField = new XTypedList<ListTemplateDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ListTemplate", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ListTemplateField;
            }
            set {
                if ((value == null)) {
                    this.ListTemplateField = null;
                }
                else {
                    if ((this.ListTemplateField == null)) {
                        this.ListTemplateField = XTypedList<ListTemplateDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ListTemplate", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ListTemplateDefinition>(this.ListTemplateField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ListTemplateDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListTemplateDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ListTemplate", "http://schemas.microsoft.com/sharepoint/"), typeof(ListTemplateDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DocumentTemplateFiles?)
    /// </para>
    /// </summary>
    public partial class DocumentTemplateDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DocumentTemplateDefinition(XElement xe) { return XTypedServices.ToXTypedElement<DocumentTemplateDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DocumentTemplateDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DocumentTemplateFiles", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DocumentTemplateFiles?)
        /// </para>
        /// </summary>
        public DocumentTemplateDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DocumentTemplateFiles?)
        /// </para>
        /// </summary>
        public DocumentTemplateFileDefinitions DocumentTemplateFiles {
            get {
                XElement x = this.GetElement(XName.Get("DocumentTemplateFiles", "http://schemas.microsoft.com/sharepoint/"));
                return ((DocumentTemplateFileDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("DocumentTemplateFiles", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayName {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string XMLForm {
            get {
                XAttribute x = this.Attribute(XName.Get("XMLForm", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("XMLForm", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Path {
            get {
                XAttribute x = this.Attribute(XName.Get("Path", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Path", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Default {
            get {
                XAttribute x = this.Attribute(XName.Get("Default", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Default", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DocumentTemplateDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DocumentTemplateDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DocumentTemplateFiles", "http://schemas.microsoft.com/sharepoint/"), typeof(DocumentTemplateFileDefinitions));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DocumentTemplate*)
    /// </para>
    /// </summary>
    public partial class DocumentTemplateDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DocumentTemplateDefinition> DocumentTemplateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DocumentTemplateDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<DocumentTemplateDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DocumentTemplateDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DocumentTemplate", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DocumentTemplate*)
        /// </para>
        /// </summary>
        public DocumentTemplateDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DocumentTemplate*)
        /// </para>
        /// </summary>
        public IList<DocumentTemplateDefinition> DocumentTemplate {
            get {
                if ((this.DocumentTemplateField == null)) {
                    this.DocumentTemplateField = new XTypedList<DocumentTemplateDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("DocumentTemplate", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.DocumentTemplateField;
            }
            set {
                if ((value == null)) {
                    this.DocumentTemplateField = null;
                }
                else {
                    if ((this.DocumentTemplateField == null)) {
                        this.DocumentTemplateField = XTypedList<DocumentTemplateDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DocumentTemplate", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<DocumentTemplateDefinition>(this.DocumentTemplateField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DocumentTemplateDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DocumentTemplateDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DocumentTemplate", "http://schemas.microsoft.com/sharepoint/"), typeof(DocumentTemplateDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class DocumentTemplateFileDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator DocumentTemplateFileDefinition(XElement xe) { return XTypedServices.ToXTypedElement<DocumentTemplateFileDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public DocumentTemplateFileDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TargetName {
            get {
                XAttribute x = this.Attribute(XName.Get("TargetName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TargetName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Default {
            get {
                XAttribute x = this.Attribute(XName.Get("Default", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Default", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DocumentTemplateFileDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DocumentTemplateFileDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DocumentTemplateFile*)
    /// </para>
    /// </summary>
    public partial class DocumentTemplateFileDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DocumentTemplateFileDefinition> DocumentTemplateFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DocumentTemplateFileDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<DocumentTemplateFileDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DocumentTemplateFileDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DocumentTemplateFile", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DocumentTemplateFile*)
        /// </para>
        /// </summary>
        public DocumentTemplateFileDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DocumentTemplateFile*)
        /// </para>
        /// </summary>
        public IList<DocumentTemplateFileDefinition> DocumentTemplateFile {
            get {
                if ((this.DocumentTemplateFileField == null)) {
                    this.DocumentTemplateFileField = new XTypedList<DocumentTemplateFileDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("DocumentTemplateFile", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.DocumentTemplateFileField;
            }
            set {
                if ((value == null)) {
                    this.DocumentTemplateFileField = null;
                }
                else {
                    if ((this.DocumentTemplateFileField == null)) {
                        this.DocumentTemplateFileField = XTypedList<DocumentTemplateFileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DocumentTemplateFile", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<DocumentTemplateFileDefinition>(this.DocumentTemplateFileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DocumentTemplateFileDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DocumentTemplateFileDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DocumentTemplateFile", "http://schemas.microsoft.com/sharepoint/"), typeof(DocumentTemplateFileDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MetaData*)
    /// </para>
    /// </summary>
    public partial class BaseTypeDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ListMetaDataDefinition> MetaDataField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator BaseTypeDefinition(XElement xe) { return XTypedServices.ToXTypedElement<BaseTypeDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BaseTypeDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MetaData*)
        /// </para>
        /// </summary>
        public BaseTypeDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MetaData*)
        /// </para>
        /// </summary>
        public IList<ListMetaDataDefinition> MetaData {
            get {
                if ((this.MetaDataField == null)) {
                    this.MetaDataField = new XTypedList<ListMetaDataDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MetaDataField;
            }
            set {
                if ((value == null)) {
                    this.MetaDataField = null;
                }
                else {
                    if ((this.MetaDataField == null)) {
                        this.MetaDataField = XTypedList<ListMetaDataDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ListMetaDataDefinition>(this.MetaDataField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Image {
            get {
                XAttribute x = this.Attribute(XName.Get("Image", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Image", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("BaseTypeDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BaseTypeDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/"), typeof(ListMetaDataDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (BaseType*)
    /// </para>
    /// </summary>
    public partial class BaseTypeDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BaseTypeDefinition> BaseTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator BaseTypeDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<BaseTypeDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BaseTypeDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("BaseType", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BaseType*)
        /// </para>
        /// </summary>
        public BaseTypeDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (BaseType*)
        /// </para>
        /// </summary>
        public IList<BaseTypeDefinition> BaseType {
            get {
                if ((this.BaseTypeField == null)) {
                    this.BaseTypeField = new XTypedList<BaseTypeDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("BaseType", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.BaseTypeField;
            }
            set {
                if ((value == null)) {
                    this.BaseTypeField = null;
                }
                else {
                    if ((this.BaseTypeField == null)) {
                        this.BaseTypeField = XTypedList<BaseTypeDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("BaseType", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<BaseTypeDefinition>(this.BaseTypeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("BaseTypeDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BaseTypeDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("BaseType", "http://schemas.microsoft.com/sharepoint/"), typeof(BaseTypeDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ExecuteUrl?, Lists?, Modules?, WebFeatures?, SiteFeatures?)
    /// </para>
    /// </summary>
    public partial class ConfigurationDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ConfigurationDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ConfigurationDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConfigurationDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ExecuteUrl?, Lists?, Modules?, WebFeatures?, SiteFeatures?)
        /// </para>
        /// </summary>
        public ConfigurationDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteUrl?, Lists?, Modules?, WebFeatures?, SiteFeatures?)
        /// </para>
        /// </summary>
        public ExecuteUrlDefinition ExecuteUrl {
            get {
                XElement x = this.GetElement(XName.Get("ExecuteUrl", "http://schemas.microsoft.com/sharepoint/"));
                return ((ExecuteUrlDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("ExecuteUrl", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteUrl?, Lists?, Modules?, WebFeatures?, SiteFeatures?)
        /// </para>
        /// </summary>
        public ListInstances Lists {
            get {
                XElement x = this.GetElement(XName.Get("Lists", "http://schemas.microsoft.com/sharepoint/"));
                return ((ListInstances)(x));
            }
            set {
                this.SetElement(XName.Get("Lists", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteUrl?, Lists?, Modules?, WebFeatures?, SiteFeatures?)
        /// </para>
        /// </summary>
        public ModuleDefinitions Modules {
            get {
                XElement x = this.GetElement(XName.Get("Modules", "http://schemas.microsoft.com/sharepoint/"));
                return ((ModuleDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("Modules", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteUrl?, Lists?, Modules?, WebFeatures?, SiteFeatures?)
        /// </para>
        /// </summary>
        public FeatureTemplateReferences WebFeatures {
            get {
                XElement x = this.GetElement(XName.Get("WebFeatures", "http://schemas.microsoft.com/sharepoint/"));
                return ((FeatureTemplateReferences)(x));
            }
            set {
                this.SetElement(XName.Get("WebFeatures", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteUrl?, Lists?, Modules?, WebFeatures?, SiteFeatures?)
        /// </para>
        /// </summary>
        public FeatureTemplateReferences SiteFeatures {
            get {
                XElement x = this.GetElement(XName.Get("SiteFeatures", "http://schemas.microsoft.com/sharepoint/"));
                return ((FeatureTemplateReferences)(x));
            }
            set {
                this.SetElement(XName.Get("SiteFeatures", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Hidden {
            get {
                XAttribute x = this.Attribute(XName.Get("Hidden", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Hidden", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MasterUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("MasterUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MasterUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CustomMasterUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("CustomMasterUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CustomMasterUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConfigurationDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConfigurationDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ExecuteUrl", "http://schemas.microsoft.com/sharepoint/"), typeof(ExecuteUrlDefinition));
            localElementDictionary.Add(XName.Get("Lists", "http://schemas.microsoft.com/sharepoint/"), typeof(ListInstances));
            localElementDictionary.Add(XName.Get("Modules", "http://schemas.microsoft.com/sharepoint/"), typeof(ModuleDefinitions));
            localElementDictionary.Add(XName.Get("WebFeatures", "http://schemas.microsoft.com/sharepoint/"), typeof(FeatureTemplateReferences));
            localElementDictionary.Add(XName.Get("SiteFeatures", "http://schemas.microsoft.com/sharepoint/"), typeof(FeatureTemplateReferences));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Rows?)
    /// </para>
    /// </summary>
    public partial class DataDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DataDefinition(XElement xe) { return XTypedServices.ToXTypedElement<DataDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Rows", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Rows?)
        /// </para>
        /// </summary>
        public DataDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rows?)
        /// </para>
        /// </summary>
        public RowDefinitions Rows {
            get {
                XElement x = this.GetElement(XName.Get("Rows", "http://schemas.microsoft.com/sharepoint/"));
                return ((RowDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("Rows", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DataDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Rows", "http://schemas.microsoft.com/sharepoint/"), typeof(RowDefinitions));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (List*)
    /// </para>
    /// </summary>
    public partial class ListDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ListDefinition> ListField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ListDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ListDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("List", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (List*)
        /// </para>
        /// </summary>
        public ListDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (List*)
        /// </para>
        /// </summary>
        public IList<ListDefinition> List {
            get {
                if ((this.ListField == null)) {
                    this.ListField = new XTypedList<ListDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("List", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ListField;
            }
            set {
                if ((value == null)) {
                    this.ListField = null;
                }
                else {
                    if ((this.ListField == null)) {
                        this.ListField = XTypedList<ListDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("List", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ListDefinition>(this.ListField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ListDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("List", "http://schemas.microsoft.com/sharepoint/"), typeof(ListDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (File*)
    /// </para>
    /// </summary>
    public partial class ModuleDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FileDefinition> FileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ModuleDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ModuleDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ModuleDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("File", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (File*)
        /// </para>
        /// </summary>
        public ModuleDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (File*)
        /// </para>
        /// </summary>
        public IList<FileDefinition> File {
            get {
                if ((this.FileField == null)) {
                    this.FileField = new XTypedList<FileDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("File", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FileField;
            }
            set {
                if ((value == null)) {
                    this.FileField = null;
                }
                else {
                    if ((this.FileField == null)) {
                        this.FileField = XTypedList<FileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("File", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FileDefinition>(this.FileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RootWebOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("RootWebOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RootWebOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Path {
            get {
                XAttribute x = this.Attribute(XName.Get("Path", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Path", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> List {
            get {
                XAttribute x = this.Attribute(XName.Get("List", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("List", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string IncludeFolders {
            get {
                XAttribute x = this.Attribute(XName.Get("IncludeFolders", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IncludeFolders", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SetupPath {
            get {
                XAttribute x = this.Attribute(XName.Get("SetupPath", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SetupPath", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HyperlinkBaseUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("HyperlinkBaseUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HyperlinkBaseUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ModuleDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ModuleDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("File", "http://schemas.microsoft.com/sharepoint/"), typeof(FileDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
    /// </para>
    /// </summary>
    public partial class FileDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WebPartDefinition> AllUsersWebPartField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ViewWebPartDefinition> ViewField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NavBarPageDefinition> NavBarPageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyValueAttributeDefinition> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WebPartConnectionDefinition> WebPartConnectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BinarySerializedWebPartDefinition> BinarySerializedWebPartField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator FileDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FileDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FileDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
        /// </para>
        /// </summary>
        public FileDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
        /// </para>
        /// </summary>
        public IList<WebPartDefinition> AllUsersWebPart {
            get {
                if ((this.AllUsersWebPartField == null)) {
                    this.AllUsersWebPartField = new XTypedList<WebPartDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("AllUsersWebPart", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.AllUsersWebPartField;
            }
            set {
                if ((value == null)) {
                    this.AllUsersWebPartField = null;
                }
                else {
                    if ((this.AllUsersWebPartField == null)) {
                        this.AllUsersWebPartField = XTypedList<WebPartDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AllUsersWebPart", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<WebPartDefinition>(this.AllUsersWebPartField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
        /// </para>
        /// </summary>
        public IList<ViewWebPartDefinition> View {
            get {
                if ((this.ViewField == null)) {
                    this.ViewField = new XTypedList<ViewWebPartDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("View", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ViewField;
            }
            set {
                if ((value == null)) {
                    this.ViewField = null;
                }
                else {
                    if ((this.ViewField == null)) {
                        this.ViewField = XTypedList<ViewWebPartDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("View", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ViewWebPartDefinition>(this.ViewField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
        /// </para>
        /// </summary>
        public IList<NavBarPageDefinition> NavBarPage {
            get {
                if ((this.NavBarPageField == null)) {
                    this.NavBarPageField = new XTypedList<NavBarPageDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("NavBarPage", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.NavBarPageField;
            }
            set {
                if ((value == null)) {
                    this.NavBarPageField = null;
                }
                else {
                    if ((this.NavBarPageField == null)) {
                        this.NavBarPageField = XTypedList<NavBarPageDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("NavBarPage", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<NavBarPageDefinition>(this.NavBarPageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
        /// </para>
        /// </summary>
        public IList<PropertyValueAttributeDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyValueAttributeDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyValueAttributeDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<PropertyValueAttributeDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
        /// </para>
        /// </summary>
        public IList<WebPartConnectionDefinition> WebPartConnection {
            get {
                if ((this.WebPartConnectionField == null)) {
                    this.WebPartConnectionField = new XTypedList<WebPartConnectionDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("WebPartConnection", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.WebPartConnectionField;
            }
            set {
                if ((value == null)) {
                    this.WebPartConnectionField = null;
                }
                else {
                    if ((this.WebPartConnectionField == null)) {
                        this.WebPartConnectionField = XTypedList<WebPartConnectionDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("WebPartConnection", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<WebPartConnectionDefinition>(this.WebPartConnectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
        /// </para>
        /// </summary>
        public IList<BinarySerializedWebPartDefinition> BinarySerializedWebPart {
            get {
                if ((this.BinarySerializedWebPartField == null)) {
                    this.BinarySerializedWebPartField = new XTypedList<BinarySerializedWebPartDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("BinarySerializedWebPart", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.BinarySerializedWebPartField;
            }
            set {
                if ((value == null)) {
                    this.BinarySerializedWebPartField = null;
                }
                else {
                    if ((this.BinarySerializedWebPartField == null)) {
                        this.BinarySerializedWebPartField = XTypedList<BinarySerializedWebPartDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("BinarySerializedWebPart", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<BinarySerializedWebPartDefinition>(this.BinarySerializedWebPartField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string IgnoreIfAlreadyExists {
            get {
                XAttribute x = this.Attribute(XName.Get("IgnoreIfAlreadyExists", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IgnoreIfAlreadyExists", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NavBarHome {
            get {
                XAttribute x = this.Attribute(XName.Get("NavBarHome", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NavBarHome", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Path {
            get {
                XAttribute x = this.Attribute(XName.Get("Path", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Path", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Level {
            get {
                XAttribute x = this.Attribute(XName.Get("Level", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DoGUIDFixUp {
            get {
                XAttribute x = this.Attribute(XName.Get("DoGUIDFixUp", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DoGUIDFixUp", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DocumentTemplateForList {
            get {
                XAttribute x = this.Attribute(XName.Get("DocumentTemplateForList", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DocumentTemplateForList", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FileDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FileDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AllUsersWebPart", "http://schemas.microsoft.com/sharepoint/"), typeof(WebPartDefinition));
            localElementDictionary.Add(XName.Get("View", "http://schemas.microsoft.com/sharepoint/"), typeof(ViewWebPartDefinition));
            localElementDictionary.Add(XName.Get("NavBarPage", "http://schemas.microsoft.com/sharepoint/"), typeof(NavBarPageDefinition));
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(PropertyValueAttributeDefinition));
            localElementDictionary.Add(XName.Get("WebPartConnection", "http://schemas.microsoft.com/sharepoint/"), typeof(WebPartConnectionDefinition));
            localElementDictionary.Add(XName.Get("BinarySerializedWebPart", "http://schemas.microsoft.com/sharepoint/"), typeof(BinarySerializedWebPartDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class FileGhostType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Ghostable",
                        "GhostableInLibrary"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FileGhostType() {
        }
    }
    
    public sealed class FileLevelType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Draft"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FileLevelType() {
        }
    }
    
    public partial class WebPartDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator WebPartDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WebPartDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WebPartDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> WebPartOrder {
            get {
                XAttribute x = this.Attribute(XName.Get("WebPartOrder", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("WebPartOrder", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string WebPartZoneID {
            get {
                XAttribute x = this.Attribute(XName.Get("WebPartZoneID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("WebPartZoneID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("WebPartDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebPartDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (BinarySerializedWebPart*)
    /// </para>
    /// </summary>
    public partial class ViewWebPartDefinition : global::Microsoft.Schemas.SharePoint.WebPartDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BinarySerializedWebPartDefinition> BinarySerializedWebPartField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ViewWebPartDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ViewWebPartDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ViewWebPartDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("BinarySerializedWebPart", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BinarySerializedWebPart*)
        /// </para>
        /// </summary>
        public ViewWebPartDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (BinarySerializedWebPart*)
        /// </para>
        /// </summary>
        public IList<BinarySerializedWebPartDefinition> BinarySerializedWebPart {
            get {
                if ((this.BinarySerializedWebPartField == null)) {
                    this.BinarySerializedWebPartField = new XTypedList<BinarySerializedWebPartDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("BinarySerializedWebPart", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.BinarySerializedWebPartField;
            }
            set {
                if ((value == null)) {
                    this.BinarySerializedWebPartField = null;
                }
                else {
                    if ((this.BinarySerializedWebPartField == null)) {
                        this.BinarySerializedWebPartField = XTypedList<BinarySerializedWebPartDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("BinarySerializedWebPart", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<BinarySerializedWebPartDefinition>(this.BinarySerializedWebPartField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AggregateView {
            get {
                XAttribute x = this.Attribute(XName.Get("AggregateView", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AggregateView", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> BaseViewID {
            get {
                XAttribute x = this.Attribute(XName.Get("BaseViewID", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BaseViewID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ContentTypeID {
            get {
                XAttribute x = this.Attribute(XName.Get("ContentTypeID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ContentTypeID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DefaultView {
            get {
                XAttribute x = this.Attribute(XName.Get("DefaultView", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DefaultView", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayName {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FailIfEmpty {
            get {
                XAttribute x = this.Attribute(XName.Get("FailIfEmpty", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FailIfEmpty", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FileDialog {
            get {
                XAttribute x = this.Attribute(XName.Get("FileDialog", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FileDialog", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FPModified {
            get {
                XAttribute x = this.Attribute(XName.Get("FPModified", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FPModified", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FreeForm {
            get {
                XAttribute x = this.Attribute(XName.Get("FreeForm", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FreeForm", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Hidden {
            get {
                XAttribute x = this.Attribute(XName.Get("Hidden", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Hidden", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string List {
            get {
                XAttribute x = this.Attribute(XName.Get("List", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("List", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OrderedView {
            get {
                XAttribute x = this.Attribute(XName.Get("OrderedView", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OrderedView", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Path {
            get {
                XAttribute x = this.Attribute(XName.Get("Path", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Path", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PageType {
            get {
                XAttribute x = this.Attribute(XName.Get("PageType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PageType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @ReadOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("ReadOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReadOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RecurrenceRowset {
            get {
                XAttribute x = this.Attribute(XName.Get("RecurrenceRowset", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RecurrenceRowset", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> RowLimit {
            get {
                XAttribute x = this.Attribute(XName.Get("RowLimit", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RowLimit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Scope {
            get {
                XAttribute x = this.Attribute(XName.Get("Scope", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Scope", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowHeaderUI {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowHeaderUI", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowHeaderUI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Threaded {
            get {
                XAttribute x = this.Attribute(XName.Get("Threaded", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Threaded", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ViewWebPartDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ViewWebPartDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("BinarySerializedWebPart", "http://schemas.microsoft.com/sharepoint/"), typeof(BinarySerializedWebPartDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GUIDMap, WebPart+)
    /// </para>
    /// </summary>
    public partial class BinarySerializedWebPartDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BinarySerializedWebPartBodyDefinition> WebPartField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator BinarySerializedWebPartDefinition(XElement xe) { return XTypedServices.ToXTypedElement<BinarySerializedWebPartDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BinarySerializedWebPartDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("GUIDMap", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("WebPart", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GUIDMap, WebPart+)
        /// </para>
        /// </summary>
        public BinarySerializedWebPartDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GUIDMap, WebPart+)
        /// </para>
        /// </summary>
        public GUIDMapDefinition GUIDMap {
            get {
                XElement x = this.GetElement(XName.Get("GUIDMap", "http://schemas.microsoft.com/sharepoint/"));
                return ((GUIDMapDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("GUIDMap", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GUIDMap, WebPart+)
        /// </para>
        /// </summary>
        public IList<BinarySerializedWebPartBodyDefinition> WebPart {
            get {
                if ((this.WebPartField == null)) {
                    this.WebPartField = new XTypedList<BinarySerializedWebPartBodyDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("WebPart", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.WebPartField;
            }
            set {
                if ((value == null)) {
                    this.WebPartField = null;
                }
                else {
                    if ((this.WebPartField == null)) {
                        this.WebPartField = XTypedList<BinarySerializedWebPartBodyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("WebPart", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<BinarySerializedWebPartBodyDefinition>(this.WebPartField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("BinarySerializedWebPartDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BinarySerializedWebPartDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("GUIDMap", "http://schemas.microsoft.com/sharepoint/"), typeof(GUIDMapDefinition));
            localElementDictionary.Add(XName.Get("WebPart", "http://schemas.microsoft.com/sharepoint/"), typeof(BinarySerializedWebPartBodyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GUID*)
    /// </para>
    /// </summary>
    public partial class GUIDMapDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GUIDMapItemDefinition> GUIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator GUIDMapDefinition(XElement xe) { return XTypedServices.ToXTypedElement<GUIDMapDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GUIDMapDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("GUID", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GUID*)
        /// </para>
        /// </summary>
        public GUIDMapDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GUID*)
        /// </para>
        /// </summary>
        public IList<GUIDMapItemDefinition> GUID {
            get {
                if ((this.GUIDField == null)) {
                    this.GUIDField = new XTypedList<GUIDMapItemDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("GUID", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.GUIDField;
            }
            set {
                if ((value == null)) {
                    this.GUIDField = null;
                }
                else {
                    if ((this.GUIDField == null)) {
                        this.GUIDField = XTypedList<GUIDMapItemDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("GUID", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<GUIDMapItemDefinition>(this.GUIDField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GUIDMapDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GUIDMapDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("GUID", "http://schemas.microsoft.com/sharepoint/"), typeof(GUIDMapItemDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class BinarySerializedWebPartBodyDefinition : global::Microsoft.Schemas.SharePoint.WebPartDefinition, IXMetaData {
        
         public static explicit operator BinarySerializedWebPartBodyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<BinarySerializedWebPartBodyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public BinarySerializedWebPartBodyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string List {
            get {
                XAttribute x = this.Attribute(XName.Get("List", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("List", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Flags {
            get {
                XAttribute x = this.Attribute(XName.Get("Flags", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Flags", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayName {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string IsIncluded {
            get {
                XAttribute x = this.Attribute(XName.Get("IsIncluded", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("IsIncluded", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> FrameState {
            get {
                XAttribute x = this.Attribute(XName.Get("FrameState", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FrameState", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string WPTypeId {
            get {
                XAttribute x = this.Attribute(XName.Get("WPTypeId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("WPTypeId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Assembly {
            get {
                XAttribute x = this.Attribute(XName.Get("Assembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Assembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Class {
            get {
                XAttribute x = this.Attribute(XName.Get("Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SolutionId {
            get {
                XAttribute x = this.Attribute(XName.Get("SolutionId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SolutionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AllUsers {
            get {
                XAttribute x = this.Attribute(XName.Get("AllUsers", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AllUsers", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PerUser {
            get {
                XAttribute x = this.Attribute(XName.Get("PerUser", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PerUser", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Cache {
            get {
                XAttribute x = this.Attribute(XName.Get("Cache", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Cache", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Src {
            get {
                XAttribute x = this.Attribute(XName.Get("Src", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Src", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string View {
            get {
                XAttribute x = this.Attribute(XName.Get("View", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("View", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string WebPartIdProperty {
            get {
                XAttribute x = this.Attribute(XName.Get("WebPartIdProperty", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("WebPartIdProperty", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string WebId {
            get {
                XAttribute x = this.Attribute(XName.Get("WebId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("WebId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("BinarySerializedWebPartBodyDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BinarySerializedWebPartBodyDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class GUIDMapItemDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator GUIDMapItemDefinition(XElement xe) { return XTypedServices.ToXTypedElement<GUIDMapItemDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GUIDMapItemDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ListUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("ListUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ListUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GUIDMapItemDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GUIDMapItemDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class ViewPartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "HTML",
                        "Chart",
                        "CHART",
                        "Pivot",
                        "PIVOT",
                        "GANTT",
                        "GRID",
                        "CALENDAR"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ViewPartType() {
        }
    }
    
    public partial class NavBarPageDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator NavBarPageDefinition(XElement xe) { return XTypedServices.ToXTypedElement<NavBarPageDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public NavBarPageDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Position {
            get {
                XAttribute x = this.Attribute(XName.Get("Position", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Position", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("NavBarPageDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NavBarPageDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (WebPartTransformer?)
    /// </para>
    /// </summary>
    public partial class WebPartConnectionDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator WebPartConnectionDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WebPartConnectionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WebPartConnectionDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("WebPartTransformer", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (WebPartTransformer?)
        /// </para>
        /// </summary>
        public WebPartConnectionDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WebPartTransformer?)
        /// </para>
        /// </summary>
        public WebPartTransformerDefinition WebPartTransformer {
            get {
                XElement x = this.GetElement(XName.Get("WebPartTransformer", "http://schemas.microsoft.com/sharepoint/"));
                return ((WebPartTransformerDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("WebPartTransformer", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ConsumerID {
            get {
                XAttribute x = this.Attribute(XName.Get("ConsumerID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ConsumerID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ProviderID {
            get {
                XAttribute x = this.Attribute(XName.Get("ProviderID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ProviderID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ConsumerConnectionPointID {
            get {
                XAttribute x = this.Attribute(XName.Get("ConsumerConnectionPointID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ConsumerConnectionPointID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ProviderConnectionPointID {
            get {
                XAttribute x = this.Attribute(XName.Get("ProviderConnectionPointID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ProviderConnectionPointID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TargetPageUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("TargetPageUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TargetPageUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CrossPageConnectionID {
            get {
                XAttribute x = this.Attribute(XName.Get("CrossPageConnectionID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CrossPageConnectionID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CrossPageSchema {
            get {
                XAttribute x = this.Attribute(XName.Get("CrossPageSchema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CrossPageSchema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("WebPartConnectionDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebPartConnectionDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("WebPartTransformer", "http://schemas.microsoft.com/sharepoint/"), typeof(WebPartTransformerDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class WebPartTransformerDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator WebPartTransformerDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WebPartTransformerDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WebPartTransformerDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Assembly {
            get {
                XAttribute x = this.Attribute(XName.Get("Assembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Assembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("WebPartTransformerDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebPartTransformerDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Configuration*)
    /// </para>
    /// </summary>
    public partial class ConfigurationDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConfigurationDefinition> ConfigurationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ConfigurationDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ConfigurationDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConfigurationDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Configuration", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Configuration*)
        /// </para>
        /// </summary>
        public ConfigurationDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Configuration*)
        /// </para>
        /// </summary>
        public IList<ConfigurationDefinition> Configuration {
            get {
                if ((this.ConfigurationField == null)) {
                    this.ConfigurationField = new XTypedList<ConfigurationDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Configuration", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ConfigurationField;
            }
            set {
                if ((value == null)) {
                    this.ConfigurationField = null;
                }
                else {
                    if ((this.ConfigurationField == null)) {
                        this.ConfigurationField = XTypedList<ConfigurationDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Configuration", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ConfigurationDefinition>(this.ConfigurationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ConfigurationDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConfigurationDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Configuration", "http://schemas.microsoft.com/sharepoint/"), typeof(ConfigurationDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Module*)
    /// </para>
    /// </summary>
    public partial class ModuleDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ModuleDefinition> ModuleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ModuleDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ModuleDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ModuleDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Module", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Module*)
        /// </para>
        /// </summary>
        public ModuleDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Module*)
        /// </para>
        /// </summary>
        public IList<ModuleDefinition> Module {
            get {
                if ((this.ModuleField == null)) {
                    this.ModuleField = new XTypedList<ModuleDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Module", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ModuleField;
            }
            set {
                if ((value == null)) {
                    this.ModuleField = null;
                }
                else {
                    if ((this.ModuleField == null)) {
                        this.ModuleField = XTypedList<ModuleDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Module", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ModuleDefinition>(this.ModuleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ModuleDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ModuleDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Module", "http://schemas.microsoft.com/sharepoint/"), typeof(ModuleDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ModuleReference : XTypedElement, IXMetaData {
        
         public static explicit operator ModuleReference(XElement xe) { return XTypedServices.ToXTypedElement<ModuleReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ModuleReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ModuleReference", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ModuleReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Module*)
    /// </para>
    /// </summary>
    public partial class ModuleReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ModuleReference> ModuleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ModuleReferences(XElement xe) { return XTypedServices.ToXTypedElement<ModuleReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ModuleReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Module", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Module*)
        /// </para>
        /// </summary>
        public ModuleReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Module*)
        /// </para>
        /// </summary>
        public IList<ModuleReference> Module {
            get {
                if ((this.ModuleField == null)) {
                    this.ModuleField = new XTypedList<ModuleReference>(this, LinqToXsdTypeManager.Instance, XName.Get("Module", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ModuleField;
            }
            set {
                if ((value == null)) {
                    this.ModuleField = null;
                }
                else {
                    if ((this.ModuleField == null)) {
                        this.ModuleField = XTypedList<ModuleReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Module", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ModuleReference>(this.ModuleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ModuleReferences", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ModuleReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Module", "http://schemas.microsoft.com/sharepoint/"), typeof(ModuleReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CHOICE*)
    /// </para>
    /// </summary>
    public partial class CHOICEDEFINITIONS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CHOICEDEFINITION> CHOICEField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CHOICEDEFINITIONS(XElement xe) { return XTypedServices.ToXTypedElement<CHOICEDEFINITIONS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CHOICEDEFINITIONS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CHOICE", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CHOICE*)
        /// </para>
        /// </summary>
        public CHOICEDEFINITIONS() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CHOICE*)
        /// </para>
        /// </summary>
        public IList<CHOICEDEFINITION> CHOICE {
            get {
                if ((this.CHOICEField == null)) {
                    this.CHOICEField = new XTypedList<CHOICEDEFINITION>(this, LinqToXsdTypeManager.Instance, XName.Get("CHOICE", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.CHOICEField;
            }
            set {
                if ((value == null)) {
                    this.CHOICEField = null;
                }
                else {
                    if ((this.CHOICEField == null)) {
                        this.CHOICEField = XTypedList<CHOICEDEFINITION>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CHOICE", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CHOICEDEFINITION>(this.CHOICEField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CHOICEDEFINITIONS", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CHOICEDEFINITIONS>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CHOICE", "http://schemas.microsoft.com/sharepoint/"), typeof(CHOICEDEFINITION));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class CHOICEDEFINITION : XTypedElement, IXMetaData {
        
         public static explicit operator CHOICEDEFINITION(XElement xe) { return XTypedServices.ToXTypedElement<CHOICEDEFINITION>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CHOICEDEFINITION() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CHOICEDEFINITION", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CHOICEDEFINITION>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MAPPING*)
    /// </para>
    /// </summary>
    public partial class MAPPINGDEFINITIONS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MAPPINGDEFINITION> MAPPINGField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator MAPPINGDEFINITIONS(XElement xe) { return XTypedServices.ToXTypedElement<MAPPINGDEFINITIONS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MAPPINGDEFINITIONS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MAPPING", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MAPPING*)
        /// </para>
        /// </summary>
        public MAPPINGDEFINITIONS() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MAPPING*)
        /// </para>
        /// </summary>
        public IList<MAPPINGDEFINITION> MAPPING {
            get {
                if ((this.MAPPINGField == null)) {
                    this.MAPPINGField = new XTypedList<MAPPINGDEFINITION>(this, LinqToXsdTypeManager.Instance, XName.Get("MAPPING", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MAPPINGField;
            }
            set {
                if ((value == null)) {
                    this.MAPPINGField = null;
                }
                else {
                    if ((this.MAPPINGField == null)) {
                        this.MAPPINGField = XTypedList<MAPPINGDEFINITION>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MAPPING", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<MAPPINGDEFINITION>(this.MAPPINGField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MAPPINGDEFINITIONS", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MAPPINGDEFINITIONS>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MAPPING", "http://schemas.microsoft.com/sharepoint/"), typeof(MAPPINGDEFINITION));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class MAPPINGDEFINITION : XTypedElement, IXMetaData {
        
         public static explicit operator MAPPINGDEFINITION(XElement xe) { return XTypedServices.ToXTypedElement<MAPPINGDEFINITION>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public MAPPINGDEFINITION() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Value {
            get {
                XAttribute x = this.Attribute(XName.Get("Value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MAPPINGDEFINITION", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MAPPINGDEFINITION>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Data?)
    /// </para>
    /// </summary>
    public partial class ListInstance : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ListInstance(XElement xe) { return XTypedServices.ToXTypedElement<ListInstance>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListInstance() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Data", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Data?)
        /// </para>
        /// </summary>
        public ListInstance() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Data?)
        /// </para>
        /// </summary>
        public DataDefinition Data {
            get {
                XElement x = this.GetElement(XName.Get("Data", "http://schemas.microsoft.com/sharepoint/"));
                return ((DataDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Data", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QuickLaunchUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("QuickLaunchUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QuickLaunchUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FeatureId {
            get {
                XAttribute x = this.Attribute(XName.Get("FeatureId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FeatureId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EmailAlias {
            get {
                XAttribute x = this.Attribute(XName.Get("EmailAlias", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EmailAlias", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CustomSchema {
            get {
                XAttribute x = this.Attribute(XName.Get("CustomSchema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CustomSchema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HyperlinkBaseUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("HyperlinkBaseUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HyperlinkBaseUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string VersioningEnabled {
            get {
                XAttribute x = this.Attribute(XName.Get("VersioningEnabled", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("VersioningEnabled", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EnableMinorVersions {
            get {
                XAttribute x = this.Attribute(XName.Get("EnableMinorVersions", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EnableMinorVersions", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EnableContentTypes {
            get {
                XAttribute x = this.Attribute(XName.Get("EnableContentTypes", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EnableContentTypes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ForceCheckout {
            get {
                XAttribute x = this.Attribute(XName.Get("ForceCheckout", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ForceCheckout", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RootWebOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("RootWebOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RootWebOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ListInstance", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListInstance>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Data", "http://schemas.microsoft.com/sharepoint/"), typeof(DataDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (List*)
    /// </para>
    /// </summary>
    public partial class ListInstances : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ListInstance> ListField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ListInstances(XElement xe) { return XTypedServices.ToXTypedElement<ListInstances>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListInstances() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("List", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (List*)
        /// </para>
        /// </summary>
        public ListInstances() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (List*)
        /// </para>
        /// </summary>
        public IList<ListInstance> List {
            get {
                if ((this.ListField == null)) {
                    this.ListField = new XTypedList<ListInstance>(this, LinqToXsdTypeManager.Instance, XName.Get("List", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ListField;
            }
            set {
                if ((value == null)) {
                    this.ListField = null;
                }
                else {
                    if ((this.ListField == null)) {
                        this.ListField = XTypedList<ListInstance>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("List", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ListInstance>(this.ListField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ListInstances", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListInstances>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("List", "http://schemas.microsoft.com/sharepoint/"), typeof(ListInstance));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Form*)
    /// </para>
    /// </summary>
    public partial class FormDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FormDefinition> FormField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FormDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<FormDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FormDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Form", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Form*)
        /// </para>
        /// </summary>
        public FormDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Form*)
        /// </para>
        /// </summary>
        public IList<FormDefinition> Form {
            get {
                if ((this.FormField == null)) {
                    this.FormField = new XTypedList<FormDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Form", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FormField;
            }
            set {
                if ((value == null)) {
                    this.FormField = null;
                }
                else {
                    if ((this.FormField == null)) {
                        this.FormField = XTypedList<FormDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Form", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FormDefinition>(this.FormField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FormDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FormDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Form", "http://schemas.microsoft.com/sharepoint/"), typeof(FormDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Forms)
    /// </para>
    /// </summary>
    public partial class ListMetaDataDefault : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ListMetaDataDefault(XElement xe) { return XTypedServices.ToXTypedElement<ListMetaDataDefault>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListMetaDataDefault() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Forms", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Forms)
        /// </para>
        /// </summary>
        public ListMetaDataDefault() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Forms)
        /// </para>
        /// </summary>
        public ListFormSet Forms {
            get {
                XElement x = this.GetElement(XName.Get("Forms", "http://schemas.microsoft.com/sharepoint/"));
                return ((ListFormSet)(x));
            }
            set {
                this.SetElement(XName.Get("Forms", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ListMetaDataDefault", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListMetaDataDefault>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Forms", "http://schemas.microsoft.com/sharepoint/"), typeof(ListFormSet));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (View*)
    /// </para>
    /// </summary>
    public partial class ViewDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ViewDefinition> ViewField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ViewDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ViewDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ViewDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("View", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (View*)
        /// </para>
        /// </summary>
        public ViewDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (View*)
        /// </para>
        /// </summary>
        public IList<ViewDefinition> View {
            get {
                if ((this.ViewField == null)) {
                    this.ViewField = new XTypedList<ViewDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("View", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ViewField;
            }
            set {
                if ((value == null)) {
                    this.ViewField = null;
                }
                else {
                    if ((this.ViewField == null)) {
                        this.ViewField = XTypedList<ViewDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("View", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ViewDefinition>(this.ViewField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ViewDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ViewDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("View", "http://schemas.microsoft.com/sharepoint/"), typeof(ViewDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class DwpFileDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator DwpFileDefinition(XElement xe) { return XTypedServices.ToXTypedElement<DwpFileDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public DwpFileDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FileName {
            get {
                XAttribute x = this.Attribute(XName.Get("FileName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FileName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DwpFileDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DwpFileDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DwpFile+)
    /// </para>
    /// </summary>
    public partial class DwpFileDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DwpFileDefinition> DwpFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DwpFileDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<DwpFileDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DwpFileDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DwpFile", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DwpFile+)
        /// </para>
        /// </summary>
        public DwpFileDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DwpFile+)
        /// </para>
        /// </summary>
        public IList<DwpFileDefinition> DwpFile {
            get {
                if ((this.DwpFileField == null)) {
                    this.DwpFileField = new XTypedList<DwpFileDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("DwpFile", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.DwpFileField;
            }
            set {
                if ((value == null)) {
                    this.DwpFileField = null;
                }
                else {
                    if ((this.DwpFileField == null)) {
                        this.DwpFileField = XTypedList<DwpFileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DwpFile", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<DwpFileDefinition>(this.DwpFileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DwpFileDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DwpFileDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("DwpFile", "http://schemas.microsoft.com/sharepoint/"), typeof(DwpFileDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ClassResourceDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ClassResourceDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ClassResourceDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ClassResourceDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FileName {
            get {
                XAttribute x = this.Attribute(XName.Get("FileName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FileName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ClassResourceDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClassResourceDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ClassResource*)
    /// </para>
    /// </summary>
    public partial class ClassResourceDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ClassResourceDefinition> ClassResourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ClassResourceDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ClassResourceDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClassResourceDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClassResource", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ClassResource*)
        /// </para>
        /// </summary>
        public ClassResourceDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ClassResource*)
        /// </para>
        /// </summary>
        public IList<ClassResourceDefinition> ClassResource {
            get {
                if ((this.ClassResourceField == null)) {
                    this.ClassResourceField = new XTypedList<ClassResourceDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ClassResource", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ClassResourceField;
            }
            set {
                if ((value == null)) {
                    this.ClassResourceField = null;
                }
                else {
                    if ((this.ClassResourceField == null)) {
                        this.ClassResourceField = XTypedList<ClassResourceDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ClassResource", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ClassResourceDefinition>(this.ClassResourceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ClassResourceDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClassResourceDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ClassResource", "http://schemas.microsoft.com/sharepoint/"), typeof(ClassResourceDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class BindingRedirectDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator BindingRedirectDefinition(XElement xe) { return XTypedServices.ToXTypedElement<BindingRedirectDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public BindingRedirectDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OldVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("OldVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OldVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("BindingRedirectDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BindingRedirectDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (BindingRedirect*)
    /// </para>
    /// </summary>
    public partial class BindingRedirectDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BindingRedirectDefinition> BindingRedirectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator BindingRedirectDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<BindingRedirectDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BindingRedirectDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("BindingRedirect", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BindingRedirect*)
        /// </para>
        /// </summary>
        public BindingRedirectDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (BindingRedirect*)
        /// </para>
        /// </summary>
        public IList<BindingRedirectDefinition> BindingRedirect {
            get {
                if ((this.BindingRedirectField == null)) {
                    this.BindingRedirectField = new XTypedList<BindingRedirectDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("BindingRedirect", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.BindingRedirectField;
            }
            set {
                if ((value == null)) {
                    this.BindingRedirectField = null;
                }
                else {
                    if ((this.BindingRedirectField == null)) {
                        this.BindingRedirectField = XTypedList<BindingRedirectDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("BindingRedirect", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<BindingRedirectDefinition>(this.BindingRedirectField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("BindingRedirectDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BindingRedirectDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("BindingRedirect", "http://schemas.microsoft.com/sharepoint/"), typeof(BindingRedirectDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class RowLimitDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator RowLimitDefinition(XElement xe) { return XTypedServices.ToXTypedElement<RowLimitDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RowLimitDefinition() {
        }
        
        public int TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Paged {
            get {
                XAttribute x = this.Attribute(XName.Get("Paged", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Paged", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RowLimitDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RowLimitDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ViewStyleReference : XTypedElement, IXMetaData {
        
         public static explicit operator ViewStyleReference(XElement xe) { return XTypedServices.ToXTypedElement<ViewStyleReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ViewStyleReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ViewStyleReference", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ViewStyleReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
    /// </para>
    /// </summary>
    public partial class FeatureDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator FeatureDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FeatureDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeatureDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public FeatureDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public ElementManifestReferences ElementManifests {
            get {
                XElement x = this.GetElement(XName.Get("ElementManifests", "http://schemas.microsoft.com/sharepoint/"));
                return ((ElementManifestReferences)(x));
            }
            set {
                this.SetElement(XName.Get("ElementManifests", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public FeaturePropertyDefinitions Properties {
            get {
                XElement x = this.GetElement(XName.Get("Properties", "http://schemas.microsoft.com/sharepoint/"));
                return ((FeaturePropertyDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("Properties", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public FeatureActivationDependencyDefinitions ActivationDependencies {
            get {
                XElement x = this.GetElement(XName.Get("ActivationDependencies", "http://schemas.microsoft.com/sharepoint/"));
                return ((FeatureActivationDependencyDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("ActivationDependencies", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public UpgradeActionsDefinition UpgradeActions {
            get {
                XElement x = this.GetElement(XName.Get("UpgradeActions", "http://schemas.microsoft.com/sharepoint/"));
                return ((UpgradeActionsDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("UpgradeActions", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Scope {
            get {
                XAttribute x = this.Attribute(XName.Get("Scope", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Scope", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReceiverAssembly {
            get {
                XAttribute x = this.Attribute(XName.Get("ReceiverAssembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReceiverAssembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReceiverClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ReceiverClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReceiverClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Creator {
            get {
                XAttribute x = this.Attribute(XName.Get("Creator", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Creator", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DefaultResourceFile {
            get {
                XAttribute x = this.Attribute(XName.Get("DefaultResourceFile", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DefaultResourceFile", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Hidden {
            get {
                XAttribute x = this.Attribute(XName.Get("Hidden", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Hidden", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SolutionId {
            get {
                XAttribute x = this.Attribute(XName.Get("SolutionId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SolutionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ActivateOnDefault {
            get {
                XAttribute x = this.Attribute(XName.Get("ActivateOnDefault", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ActivateOnDefault", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AutoActivateInCentralAdmin {
            get {
                XAttribute x = this.Attribute(XName.Get("AutoActivateInCentralAdmin", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AutoActivateInCentralAdmin", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AlwaysForceInstall {
            get {
                XAttribute x = this.Attribute(XName.Get("AlwaysForceInstall", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AlwaysForceInstall", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RequireResources {
            get {
                XAttribute x = this.Attribute(XName.Get("RequireResources", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RequireResources", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUrlAltText {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUrlAltText", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUrlAltText", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UIVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("UIVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UIVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FeatureDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ElementManifests", "http://schemas.microsoft.com/sharepoint/"), typeof(ElementManifestReferences));
            localElementDictionary.Add(XName.Get("Properties", "http://schemas.microsoft.com/sharepoint/"), typeof(FeaturePropertyDefinitions));
            localElementDictionary.Add(XName.Get("ActivationDependencies", "http://schemas.microsoft.com/sharepoint/"), typeof(FeatureActivationDependencyDefinitions));
            localElementDictionary.Add(XName.Get("UpgradeActions", "http://schemas.microsoft.com/sharepoint/"), typeof(UpgradeActionsDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class FeatureVersion {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d+\\.\\d+\\.\\d+\\.\\d+"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FeatureVersion() {
        }
    }
    
    public sealed class FeatureScope {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Farm",
                        "WebApplication",
                        "Site",
                        "Web"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FeatureScope() {
        }
    }
    
    public partial class ElementManifestReference : XTypedElement, IXMetaData {
        
         public static explicit operator ElementManifestReference(XElement xe) { return XTypedServices.ToXTypedElement<ElementManifestReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ElementManifestReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ElementManifestReference", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ElementManifestReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ElementManifest* | ElementFile*)*)
    /// </para>
    /// </summary>
    public partial class ElementManifestReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ElementManifestReference> ElementManifestField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ElementManifestReference> ElementFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ElementManifestReferences(XElement xe) { return XTypedServices.ToXTypedElement<ElementManifestReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ElementManifestReferences() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ElementManifest* | ElementFile*)*)
        /// </para>
        /// </summary>
        public ElementManifestReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ElementManifest* | ElementFile*)*)
        /// </para>
        /// </summary>
        public IList<ElementManifestReference> ElementManifest {
            get {
                if ((this.ElementManifestField == null)) {
                    this.ElementManifestField = new XTypedList<ElementManifestReference>(this, LinqToXsdTypeManager.Instance, XName.Get("ElementManifest", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ElementManifestField;
            }
            set {
                if ((value == null)) {
                    this.ElementManifestField = null;
                }
                else {
                    if ((this.ElementManifestField == null)) {
                        this.ElementManifestField = XTypedList<ElementManifestReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ElementManifest", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ElementManifestReference>(this.ElementManifestField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ElementManifest* | ElementFile*)*)
        /// </para>
        /// </summary>
        public IList<ElementManifestReference> ElementFile {
            get {
                if ((this.ElementFileField == null)) {
                    this.ElementFileField = new XTypedList<ElementManifestReference>(this, LinqToXsdTypeManager.Instance, XName.Get("ElementFile", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ElementFileField;
            }
            set {
                if ((value == null)) {
                    this.ElementFileField = null;
                }
                else {
                    if ((this.ElementFileField == null)) {
                        this.ElementFileField = XTypedList<ElementManifestReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ElementFile", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ElementManifestReference>(this.ElementFileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ElementManifestReferences", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ElementManifestReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ElementManifest", "http://schemas.microsoft.com/sharepoint/"), typeof(ElementManifestReference));
            localElementDictionary.Add(XName.Get("ElementFile", "http://schemas.microsoft.com/sharepoint/"), typeof(ElementManifestReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
    /// </para>
    /// </summary>
    public partial class ElementDefinitionCollection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContentTypeDefinition> ContentTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContentTypeBindingDefinition> ContentTypeBindingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DocumentConverterDefinition> DocumentConverterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FeatureSiteTemplateAssociationDefinition> FeatureSiteTemplateAssociationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SharedFieldDefinition> FieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CustomActionDefinition> CustomActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CustomActionGroupDefinition> CustomActionGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HideCustomActionDefinition> HideCustomActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ModuleDefinition> ModuleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ListInstanceDefinition> ListInstanceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ListTemplateDefinition> ListTemplateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DelegateControlDefinition> ControlField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReceiverDefinitionCollection> ReceiversField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WorkflowDefinition> WorkflowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserMigratorDefinition> UserMigratorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GroupMigratorDefinition> GroupMigratorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WebPartAdderExtensionDefinition> WebPartAdderExtensionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WebTemplateDefinition> WebTemplateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WorkflowAssociationDefinition> WorkflowAssociationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyBagDefinition> PropertyBagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WorkflowActionsDefinition> WorkflowActionsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ElementDefinitionCollection(XElement xe) { return XTypedServices.ToXTypedElement<ElementDefinitionCollection>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ElementDefinitionCollection() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public ElementDefinitionCollection() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<ContentTypeDefinition> ContentType {
            get {
                if ((this.ContentTypeField == null)) {
                    this.ContentTypeField = new XTypedList<ContentTypeDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ContentTypeField;
            }
            set {
                if ((value == null)) {
                    this.ContentTypeField = null;
                }
                else {
                    if ((this.ContentTypeField == null)) {
                        this.ContentTypeField = XTypedList<ContentTypeDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ContentTypeDefinition>(this.ContentTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<ContentTypeBindingDefinition> ContentTypeBinding {
            get {
                if ((this.ContentTypeBindingField == null)) {
                    this.ContentTypeBindingField = new XTypedList<ContentTypeBindingDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ContentTypeBinding", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ContentTypeBindingField;
            }
            set {
                if ((value == null)) {
                    this.ContentTypeBindingField = null;
                }
                else {
                    if ((this.ContentTypeBindingField == null)) {
                        this.ContentTypeBindingField = XTypedList<ContentTypeBindingDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ContentTypeBinding", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ContentTypeBindingDefinition>(this.ContentTypeBindingField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<DocumentConverterDefinition> DocumentConverter {
            get {
                if ((this.DocumentConverterField == null)) {
                    this.DocumentConverterField = new XTypedList<DocumentConverterDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("DocumentConverter", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.DocumentConverterField;
            }
            set {
                if ((value == null)) {
                    this.DocumentConverterField = null;
                }
                else {
                    if ((this.DocumentConverterField == null)) {
                        this.DocumentConverterField = XTypedList<DocumentConverterDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DocumentConverter", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<DocumentConverterDefinition>(this.DocumentConverterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<FeatureSiteTemplateAssociationDefinition> FeatureSiteTemplateAssociation {
            get {
                if ((this.FeatureSiteTemplateAssociationField == null)) {
                    this.FeatureSiteTemplateAssociationField = new XTypedList<FeatureSiteTemplateAssociationDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("FeatureSiteTemplateAssociation", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FeatureSiteTemplateAssociationField;
            }
            set {
                if ((value == null)) {
                    this.FeatureSiteTemplateAssociationField = null;
                }
                else {
                    if ((this.FeatureSiteTemplateAssociationField == null)) {
                        this.FeatureSiteTemplateAssociationField = XTypedList<FeatureSiteTemplateAssociationDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FeatureSiteTemplateAssociation", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FeatureSiteTemplateAssociationDefinition>(this.FeatureSiteTemplateAssociationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<SharedFieldDefinition> Field {
            get {
                if ((this.FieldField == null)) {
                    this.FieldField = new XTypedList<SharedFieldDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldField;
            }
            set {
                if ((value == null)) {
                    this.FieldField = null;
                }
                else {
                    if ((this.FieldField == null)) {
                        this.FieldField = XTypedList<SharedFieldDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<SharedFieldDefinition>(this.FieldField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<CustomActionDefinition> CustomAction {
            get {
                if ((this.CustomActionField == null)) {
                    this.CustomActionField = new XTypedList<CustomActionDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("CustomAction", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.CustomActionField;
            }
            set {
                if ((value == null)) {
                    this.CustomActionField = null;
                }
                else {
                    if ((this.CustomActionField == null)) {
                        this.CustomActionField = XTypedList<CustomActionDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CustomAction", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CustomActionDefinition>(this.CustomActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<CustomActionGroupDefinition> CustomActionGroup {
            get {
                if ((this.CustomActionGroupField == null)) {
                    this.CustomActionGroupField = new XTypedList<CustomActionGroupDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("CustomActionGroup", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.CustomActionGroupField;
            }
            set {
                if ((value == null)) {
                    this.CustomActionGroupField = null;
                }
                else {
                    if ((this.CustomActionGroupField == null)) {
                        this.CustomActionGroupField = XTypedList<CustomActionGroupDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CustomActionGroup", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CustomActionGroupDefinition>(this.CustomActionGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<HideCustomActionDefinition> HideCustomAction {
            get {
                if ((this.HideCustomActionField == null)) {
                    this.HideCustomActionField = new XTypedList<HideCustomActionDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("HideCustomAction", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.HideCustomActionField;
            }
            set {
                if ((value == null)) {
                    this.HideCustomActionField = null;
                }
                else {
                    if ((this.HideCustomActionField == null)) {
                        this.HideCustomActionField = XTypedList<HideCustomActionDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("HideCustomAction", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<HideCustomActionDefinition>(this.HideCustomActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<ModuleDefinition> Module {
            get {
                if ((this.ModuleField == null)) {
                    this.ModuleField = new XTypedList<ModuleDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Module", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ModuleField;
            }
            set {
                if ((value == null)) {
                    this.ModuleField = null;
                }
                else {
                    if ((this.ModuleField == null)) {
                        this.ModuleField = XTypedList<ModuleDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Module", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ModuleDefinition>(this.ModuleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<ListInstanceDefinition> ListInstance {
            get {
                if ((this.ListInstanceField == null)) {
                    this.ListInstanceField = new XTypedList<ListInstanceDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ListInstance", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ListInstanceField;
            }
            set {
                if ((value == null)) {
                    this.ListInstanceField = null;
                }
                else {
                    if ((this.ListInstanceField == null)) {
                        this.ListInstanceField = XTypedList<ListInstanceDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ListInstance", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ListInstanceDefinition>(this.ListInstanceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<ListTemplateDefinition> ListTemplate {
            get {
                if ((this.ListTemplateField == null)) {
                    this.ListTemplateField = new XTypedList<ListTemplateDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ListTemplate", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ListTemplateField;
            }
            set {
                if ((value == null)) {
                    this.ListTemplateField = null;
                }
                else {
                    if ((this.ListTemplateField == null)) {
                        this.ListTemplateField = XTypedList<ListTemplateDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ListTemplate", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ListTemplateDefinition>(this.ListTemplateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<DelegateControlDefinition> Control {
            get {
                if ((this.ControlField == null)) {
                    this.ControlField = new XTypedList<DelegateControlDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Control", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ControlField;
            }
            set {
                if ((value == null)) {
                    this.ControlField = null;
                }
                else {
                    if ((this.ControlField == null)) {
                        this.ControlField = XTypedList<DelegateControlDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Control", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<DelegateControlDefinition>(this.ControlField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<ReceiverDefinitionCollection> Receivers {
            get {
                if ((this.ReceiversField == null)) {
                    this.ReceiversField = new XTypedList<ReceiverDefinitionCollection>(this, LinqToXsdTypeManager.Instance, XName.Get("Receivers", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ReceiversField;
            }
            set {
                if ((value == null)) {
                    this.ReceiversField = null;
                }
                else {
                    if ((this.ReceiversField == null)) {
                        this.ReceiversField = XTypedList<ReceiverDefinitionCollection>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Receivers", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ReceiverDefinitionCollection>(this.ReceiversField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<WorkflowDefinition> Workflow {
            get {
                if ((this.WorkflowField == null)) {
                    this.WorkflowField = new XTypedList<WorkflowDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Workflow", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.WorkflowField;
            }
            set {
                if ((value == null)) {
                    this.WorkflowField = null;
                }
                else {
                    if ((this.WorkflowField == null)) {
                        this.WorkflowField = XTypedList<WorkflowDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Workflow", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<WorkflowDefinition>(this.WorkflowField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<UserMigratorDefinition> UserMigrator {
            get {
                if ((this.UserMigratorField == null)) {
                    this.UserMigratorField = new XTypedList<UserMigratorDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("UserMigrator", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.UserMigratorField;
            }
            set {
                if ((value == null)) {
                    this.UserMigratorField = null;
                }
                else {
                    if ((this.UserMigratorField == null)) {
                        this.UserMigratorField = XTypedList<UserMigratorDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UserMigrator", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<UserMigratorDefinition>(this.UserMigratorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<GroupMigratorDefinition> GroupMigrator {
            get {
                if ((this.GroupMigratorField == null)) {
                    this.GroupMigratorField = new XTypedList<GroupMigratorDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("GroupMigrator", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.GroupMigratorField;
            }
            set {
                if ((value == null)) {
                    this.GroupMigratorField = null;
                }
                else {
                    if ((this.GroupMigratorField == null)) {
                        this.GroupMigratorField = XTypedList<GroupMigratorDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("GroupMigrator", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<GroupMigratorDefinition>(this.GroupMigratorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<WebPartAdderExtensionDefinition> WebPartAdderExtension {
            get {
                if ((this.WebPartAdderExtensionField == null)) {
                    this.WebPartAdderExtensionField = new XTypedList<WebPartAdderExtensionDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("WebPartAdderExtension", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.WebPartAdderExtensionField;
            }
            set {
                if ((value == null)) {
                    this.WebPartAdderExtensionField = null;
                }
                else {
                    if ((this.WebPartAdderExtensionField == null)) {
                        this.WebPartAdderExtensionField = XTypedList<WebPartAdderExtensionDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("WebPartAdderExtension", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<WebPartAdderExtensionDefinition>(this.WebPartAdderExtensionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<WebTemplateDefinition> WebTemplate {
            get {
                if ((this.WebTemplateField == null)) {
                    this.WebTemplateField = new XTypedList<WebTemplateDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("WebTemplate", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.WebTemplateField;
            }
            set {
                if ((value == null)) {
                    this.WebTemplateField = null;
                }
                else {
                    if ((this.WebTemplateField == null)) {
                        this.WebTemplateField = XTypedList<WebTemplateDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("WebTemplate", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<WebTemplateDefinition>(this.WebTemplateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<WorkflowAssociationDefinition> WorkflowAssociation {
            get {
                if ((this.WorkflowAssociationField == null)) {
                    this.WorkflowAssociationField = new XTypedList<WorkflowAssociationDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("WorkflowAssociation", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.WorkflowAssociationField;
            }
            set {
                if ((value == null)) {
                    this.WorkflowAssociationField = null;
                }
                else {
                    if ((this.WorkflowAssociationField == null)) {
                        this.WorkflowAssociationField = XTypedList<WorkflowAssociationDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("WorkflowAssociation", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<WorkflowAssociationDefinition>(this.WorkflowAssociationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<PropertyBagDefinition> PropertyBag {
            get {
                if ((this.PropertyBagField == null)) {
                    this.PropertyBagField = new XTypedList<PropertyBagDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("PropertyBag", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.PropertyBagField;
            }
            set {
                if ((value == null)) {
                    this.PropertyBagField = null;
                }
                else {
                    if ((this.PropertyBagField == null)) {
                        this.PropertyBagField = XTypedList<PropertyBagDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PropertyBag", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<PropertyBagDefinition>(this.PropertyBagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<WorkflowActionsDefinition> WorkflowActions {
            get {
                if ((this.WorkflowActionsField == null)) {
                    this.WorkflowActionsField = new XTypedList<WorkflowActionsDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("WorkflowActions", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.WorkflowActionsField;
            }
            set {
                if ((value == null)) {
                    this.WorkflowActionsField = null;
                }
                else {
                    if ((this.WorkflowActionsField == null)) {
                        this.WorkflowActionsField = XTypedList<WorkflowActionsDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("WorkflowActions", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<WorkflowActionsDefinition>(this.WorkflowActionsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ElementDefinitionCollection", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ElementDefinitionCollection>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/"), typeof(ContentTypeDefinition));
            localElementDictionary.Add(XName.Get("ContentTypeBinding", "http://schemas.microsoft.com/sharepoint/"), typeof(ContentTypeBindingDefinition));
            localElementDictionary.Add(XName.Get("DocumentConverter", "http://schemas.microsoft.com/sharepoint/"), typeof(DocumentConverterDefinition));
            localElementDictionary.Add(XName.Get("FeatureSiteTemplateAssociation", "http://schemas.microsoft.com/sharepoint/"), typeof(FeatureSiteTemplateAssociationDefinition));
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(SharedFieldDefinition));
            localElementDictionary.Add(XName.Get("CustomAction", "http://schemas.microsoft.com/sharepoint/"), typeof(CustomActionDefinition));
            localElementDictionary.Add(XName.Get("CustomActionGroup", "http://schemas.microsoft.com/sharepoint/"), typeof(CustomActionGroupDefinition));
            localElementDictionary.Add(XName.Get("HideCustomAction", "http://schemas.microsoft.com/sharepoint/"), typeof(HideCustomActionDefinition));
            localElementDictionary.Add(XName.Get("Module", "http://schemas.microsoft.com/sharepoint/"), typeof(ModuleDefinition));
            localElementDictionary.Add(XName.Get("ListInstance", "http://schemas.microsoft.com/sharepoint/"), typeof(ListInstanceDefinition));
            localElementDictionary.Add(XName.Get("ListTemplate", "http://schemas.microsoft.com/sharepoint/"), typeof(ListTemplateDefinition));
            localElementDictionary.Add(XName.Get("Control", "http://schemas.microsoft.com/sharepoint/"), typeof(DelegateControlDefinition));
            localElementDictionary.Add(XName.Get("Receivers", "http://schemas.microsoft.com/sharepoint/"), typeof(ReceiverDefinitionCollection));
            localElementDictionary.Add(XName.Get("Workflow", "http://schemas.microsoft.com/sharepoint/"), typeof(WorkflowDefinition));
            localElementDictionary.Add(XName.Get("UserMigrator", "http://schemas.microsoft.com/sharepoint/"), typeof(UserMigratorDefinition));
            localElementDictionary.Add(XName.Get("GroupMigrator", "http://schemas.microsoft.com/sharepoint/"), typeof(GroupMigratorDefinition));
            localElementDictionary.Add(XName.Get("WebPartAdderExtension", "http://schemas.microsoft.com/sharepoint/"), typeof(WebPartAdderExtensionDefinition));
            localElementDictionary.Add(XName.Get("WebTemplate", "http://schemas.microsoft.com/sharepoint/"), typeof(WebTemplateDefinition));
            localElementDictionary.Add(XName.Get("WorkflowAssociation", "http://schemas.microsoft.com/sharepoint/"), typeof(WorkflowAssociationDefinition));
            localElementDictionary.Add(XName.Get("PropertyBag", "http://schemas.microsoft.com/sharepoint/"), typeof(PropertyBagDefinition));
            localElementDictionary.Add(XName.Get("WorkflowActions", "http://schemas.microsoft.com/sharepoint/"), typeof(WorkflowActionsDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Folder?, FieldRefs?, Forms?, XmlDocuments?, DocumentTemplate?)
    /// </para>
    /// </summary>
    public partial class ContentTypeDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ContentTypeDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContentTypeDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Folder?, FieldRefs?, Forms?, XmlDocuments?, DocumentTemplate?)
        /// </para>
        /// </summary>
        public ContentTypeDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder?, FieldRefs?, Forms?, XmlDocuments?, DocumentTemplate?)
        /// </para>
        /// </summary>
        public CTFolderDefinition Folder {
            get {
                XElement x = this.GetElement(XName.Get("Folder", "http://schemas.microsoft.com/sharepoint/"));
                return ((CTFolderDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Folder", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder?, FieldRefs?, Forms?, XmlDocuments?, DocumentTemplate?)
        /// </para>
        /// </summary>
        public CTFieldRefDefinitions FieldRefs {
            get {
                XElement x = this.GetElement(XName.Get("FieldRefs", "http://schemas.microsoft.com/sharepoint/"));
                return ((CTFieldRefDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("FieldRefs", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder?, FieldRefs?, Forms?, XmlDocuments?, DocumentTemplate?)
        /// </para>
        /// </summary>
        public FormDefinitions Forms {
            get {
                XElement x = this.GetElement(XName.Get("Forms", "http://schemas.microsoft.com/sharepoint/"));
                return ((FormDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("Forms", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder?, FieldRefs?, Forms?, XmlDocuments?, DocumentTemplate?)
        /// </para>
        /// </summary>
        public XmlDocumentDefinitionCollection XmlDocuments {
            get {
                XElement x = this.GetElement(XName.Get("XmlDocuments", "http://schemas.microsoft.com/sharepoint/"));
                return ((XmlDocumentDefinitionCollection)(x));
            }
            set {
                this.SetElement(XName.Get("XmlDocuments", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder?, FieldRefs?, Forms?, XmlDocuments?, DocumentTemplate?)
        /// </para>
        /// </summary>
        public ContentTypeDocumentTemplateDefinition DocumentTemplate {
            get {
                XElement x = this.GetElement(XName.Get("DocumentTemplate", "http://schemas.microsoft.com/sharepoint/"));
                return ((ContentTypeDocumentTemplateDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("DocumentTemplate", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string BaseType {
            get {
                XAttribute x = this.Attribute(XName.Get("BaseType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BaseType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Group {
            get {
                XAttribute x = this.Attribute(XName.Get("Group", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Group", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DocumentTemplate1 {
            get {
                XAttribute x = this.Attribute(XName.Get("DocumentTemplate", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DocumentTemplate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ResourceFolder {
            get {
                XAttribute x = this.Attribute(XName.Get("ResourceFolder", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ResourceFolder", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @ReadOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("ReadOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReadOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Hidden {
            get {
                XAttribute x = this.Attribute(XName.Get("Hidden", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Hidden", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Inherits {
            get {
                XAttribute x = this.Attribute(XName.Get("Inherits", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Inherits", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Sealed {
            get {
                XAttribute x = this.Attribute(XName.Get("Sealed", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sealed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string V2ListTemplateName {
            get {
                XAttribute x = this.Attribute(XName.Get("V2ListTemplateName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("V2ListTemplateName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<long> Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FeatureId {
            get {
                XAttribute x = this.Attribute(XName.Get("FeatureId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FeatureId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ProgId {
            get {
                XAttribute x = this.Attribute(XName.Get("ProgId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ProgId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RequireClientRenderingOnNew {
            get {
                XAttribute x = this.Attribute(XName.Get("RequireClientRenderingOnNew", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RequireClientRenderingOnNew", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string NewDocumentControl {
            get {
                XAttribute x = this.Attribute(XName.Get("NewDocumentControl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NewDocumentControl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Overwrite {
            get {
                XAttribute x = this.Attribute(XName.Get("Overwrite", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Overwrite", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PushDownChangedResourceFilesOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("PushDownChangedResourceFilesOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PushDownChangedResourceFilesOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContentTypeDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Folder", "http://schemas.microsoft.com/sharepoint/"), typeof(CTFolderDefinition));
            localElementDictionary.Add(XName.Get("FieldRefs", "http://schemas.microsoft.com/sharepoint/"), typeof(CTFieldRefDefinitions));
            localElementDictionary.Add(XName.Get("Forms", "http://schemas.microsoft.com/sharepoint/"), typeof(FormDefinitions));
            localElementDictionary.Add(XName.Get("XmlDocuments", "http://schemas.microsoft.com/sharepoint/"), typeof(XmlDocumentDefinitionCollection));
            localElementDictionary.Add(XName.Get("DocumentTemplate", "http://schemas.microsoft.com/sharepoint/"), typeof(ContentTypeDocumentTemplateDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FeatureManifestReference : XTypedElement, IXMetaData {
        
         public static explicit operator FeatureManifestReference(XElement xe) { return XTypedServices.ToXTypedElement<FeatureManifestReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FeatureManifestReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FeatureManifestReference", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureManifestReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SolutionDependencyManifestReference : XTypedElement, IXMetaData {
        
         public static explicit operator SolutionDependencyManifestReference(XElement xe) { return XTypedServices.ToXTypedElement<SolutionDependencyManifestReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SolutionDependencyManifestReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string SolutionId {
            get {
                XAttribute x = this.Attribute(XName.Get("SolutionId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SolutionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SolutionName {
            get {
                XAttribute x = this.Attribute(XName.Get("SolutionName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SolutionName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SolutionTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("SolutionTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SolutionTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SolutionUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("SolutionUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SolutionUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SolutionDependencyManifestReference", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SolutionDependencyManifestReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
    /// </para>
    /// </summary>
    public partial class SolutionDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SolutionDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SolutionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SolutionDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public SolutionDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public FeatureFileReferences FeatureManifests {
            get {
                XElement x = this.GetElement(XName.Get("FeatureManifests", "http://schemas.microsoft.com/sharepoint/"));
                return ((FeatureFileReferences)(x));
            }
            set {
                this.SetElement(XName.Get("FeatureManifests", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public SiteDefinitionManifestReferences SiteDefinitionManifests {
            get {
                XElement x = this.GetElement(XName.Get("SiteDefinitionManifests", "http://schemas.microsoft.com/sharepoint/"));
                return ((SiteDefinitionManifestReferences)(x));
            }
            set {
                this.SetElement(XName.Get("SiteDefinitionManifests", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public AssemblyFileReferences Assemblies {
            get {
                XElement x = this.GetElement(XName.Get("Assemblies", "http://schemas.microsoft.com/sharepoint/"));
                return ((AssemblyFileReferences)(x));
            }
            set {
                this.SetElement(XName.Get("Assemblies", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public TemplateFileReferences TemplateFiles {
            get {
                XElement x = this.GetElement(XName.Get("TemplateFiles", "http://schemas.microsoft.com/sharepoint/"));
                return ((TemplateFileReferences)(x));
            }
            set {
                this.SetElement(XName.Get("TemplateFiles", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public RootFileReferences RootFiles {
            get {
                XElement x = this.GetElement(XName.Get("RootFiles", "http://schemas.microsoft.com/sharepoint/"));
                return ((RootFileReferences)(x));
            }
            set {
                this.SetElement(XName.Get("RootFiles", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public ApplicationResourceFileDefinitions ApplicationResourceFiles {
            get {
                XElement x = this.GetElement(XName.Get("ApplicationResourceFiles", "http://schemas.microsoft.com/sharepoint/"));
                return ((ApplicationResourceFileDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("ApplicationResourceFiles", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public ResourceDefinitions Resources {
            get {
                XElement x = this.GetElement(XName.Get("Resources", "http://schemas.microsoft.com/sharepoint/"));
                return ((ResourceDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("Resources", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public DwpFileDefinitions DwpFiles {
            get {
                XElement x = this.GetElement(XName.Get("DwpFiles", "http://schemas.microsoft.com/sharepoint/"));
                return ((DwpFileDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("DwpFiles", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public CodeAccessSecurityDefinition CodeAccessSecurity {
            get {
                XElement x = this.GetElement(XName.Get("CodeAccessSecurity", "http://schemas.microsoft.com/sharepoint/"));
                return ((CodeAccessSecurityDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("CodeAccessSecurity", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public SolutionDependencyReferences ActivationDependencies {
            get {
                XElement x = this.GetElement(XName.Get("ActivationDependencies", "http://schemas.microsoft.com/sharepoint/"));
                return ((SolutionDependencyReferences)(x));
            }
            set {
                this.SetElement(XName.Get("ActivationDependencies", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SolutionId {
            get {
                XAttribute x = this.Attribute(XName.Get("SolutionId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SolutionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SharePointProductVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("SharePointProductVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SharePointProductVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DeploymentServerType {
            get {
                XAttribute x = this.Attribute(XName.Get("DeploymentServerType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DeploymentServerType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ResetWebServer {
            get {
                XAttribute x = this.Attribute(XName.Get("ResetWebServer", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ResetWebServer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ResetWebServerModeOnUpgrade {
            get {
                XAttribute x = this.Attribute(XName.Get("ResetWebServerModeOnUpgrade", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ResetWebServerModeOnUpgrade", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SolutionDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SolutionDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FeatureManifests", "http://schemas.microsoft.com/sharepoint/"), typeof(FeatureFileReferences));
            localElementDictionary.Add(XName.Get("SiteDefinitionManifests", "http://schemas.microsoft.com/sharepoint/"), typeof(SiteDefinitionManifestReferences));
            localElementDictionary.Add(XName.Get("Assemblies", "http://schemas.microsoft.com/sharepoint/"), typeof(AssemblyFileReferences));
            localElementDictionary.Add(XName.Get("TemplateFiles", "http://schemas.microsoft.com/sharepoint/"), typeof(TemplateFileReferences));
            localElementDictionary.Add(XName.Get("RootFiles", "http://schemas.microsoft.com/sharepoint/"), typeof(RootFileReferences));
            localElementDictionary.Add(XName.Get("ApplicationResourceFiles", "http://schemas.microsoft.com/sharepoint/"), typeof(ApplicationResourceFileDefinitions));
            localElementDictionary.Add(XName.Get("Resources", "http://schemas.microsoft.com/sharepoint/"), typeof(ResourceDefinitions));
            localElementDictionary.Add(XName.Get("DwpFiles", "http://schemas.microsoft.com/sharepoint/"), typeof(DwpFileDefinitions));
            localElementDictionary.Add(XName.Get("CodeAccessSecurity", "http://schemas.microsoft.com/sharepoint/"), typeof(CodeAccessSecurityDefinition));
            localElementDictionary.Add(XName.Get("ActivationDependencies", "http://schemas.microsoft.com/sharepoint/"), typeof(SolutionDependencyReferences));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class DeploymentServerTypeAttr {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ApplicationServer",
                        "WebFrontEnd"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DeploymentServerTypeAttr() {
        }
    }
    
    public sealed class ResetWebServerModeOnUpgradeAttr {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Recycle",
                        "StartStop"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ResetWebServerModeOnUpgradeAttr() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FeatureManifest+)
    /// </para>
    /// </summary>
    public partial class FeatureFileReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FeatureManifestReference> FeatureManifestField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FeatureFileReferences(XElement xe) { return XTypedServices.ToXTypedElement<FeatureFileReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeatureFileReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FeatureManifest", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FeatureManifest+)
        /// </para>
        /// </summary>
        public FeatureFileReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifest+)
        /// </para>
        /// </summary>
        public IList<FeatureManifestReference> FeatureManifest {
            get {
                if ((this.FeatureManifestField == null)) {
                    this.FeatureManifestField = new XTypedList<FeatureManifestReference>(this, LinqToXsdTypeManager.Instance, XName.Get("FeatureManifest", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FeatureManifestField;
            }
            set {
                if ((value == null)) {
                    this.FeatureManifestField = null;
                }
                else {
                    if ((this.FeatureManifestField == null)) {
                        this.FeatureManifestField = XTypedList<FeatureManifestReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FeatureManifest", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FeatureManifestReference>(this.FeatureManifestField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FeatureFileReferences", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureFileReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FeatureManifest", "http://schemas.microsoft.com/sharepoint/"), typeof(FeatureManifestReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ActivationDependency+)
    /// </para>
    /// </summary>
    public partial class SolutionDependencyReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SolutionDependencyManifestReference> ActivationDependencyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SolutionDependencyReferences(XElement xe) { return XTypedServices.ToXTypedElement<SolutionDependencyReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SolutionDependencyReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ActivationDependency", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivationDependency+)
        /// </para>
        /// </summary>
        public SolutionDependencyReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ActivationDependency+)
        /// </para>
        /// </summary>
        public IList<SolutionDependencyManifestReference> ActivationDependency {
            get {
                if ((this.ActivationDependencyField == null)) {
                    this.ActivationDependencyField = new XTypedList<SolutionDependencyManifestReference>(this, LinqToXsdTypeManager.Instance, XName.Get("ActivationDependency", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ActivationDependencyField;
            }
            set {
                if ((value == null)) {
                    this.ActivationDependencyField = null;
                }
                else {
                    if ((this.ActivationDependencyField == null)) {
                        this.ActivationDependencyField = XTypedList<SolutionDependencyManifestReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ActivationDependency", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<SolutionDependencyManifestReference>(this.ActivationDependencyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SolutionDependencyReferences", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SolutionDependencyReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ActivationDependency", "http://schemas.microsoft.com/sharepoint/"), typeof(SolutionDependencyManifestReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SiteDefinitionManifest+)
    /// </para>
    /// </summary>
    public partial class SiteDefinitionManifestReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SiteDefinitionManifestFileReference> SiteDefinitionManifestField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SiteDefinitionManifestReferences(XElement xe) { return XTypedServices.ToXTypedElement<SiteDefinitionManifestReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SiteDefinitionManifestReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SiteDefinitionManifest", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SiteDefinitionManifest+)
        /// </para>
        /// </summary>
        public SiteDefinitionManifestReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SiteDefinitionManifest+)
        /// </para>
        /// </summary>
        public IList<SiteDefinitionManifestFileReference> SiteDefinitionManifest {
            get {
                if ((this.SiteDefinitionManifestField == null)) {
                    this.SiteDefinitionManifestField = new XTypedList<SiteDefinitionManifestFileReference>(this, LinqToXsdTypeManager.Instance, XName.Get("SiteDefinitionManifest", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.SiteDefinitionManifestField;
            }
            set {
                if ((value == null)) {
                    this.SiteDefinitionManifestField = null;
                }
                else {
                    if ((this.SiteDefinitionManifestField == null)) {
                        this.SiteDefinitionManifestField = XTypedList<SiteDefinitionManifestFileReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SiteDefinitionManifest", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<SiteDefinitionManifestFileReference>(this.SiteDefinitionManifestField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SiteDefinitionManifestReferences", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SiteDefinitionManifestReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SiteDefinitionManifest", "http://schemas.microsoft.com/sharepoint/"), typeof(SiteDefinitionManifestFileReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (WebTempFile+)
    /// </para>
    /// </summary>
    public partial class SiteDefinitionManifestFileReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WebTempFileDefinition> WebTempFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SiteDefinitionManifestFileReference(XElement xe) { return XTypedServices.ToXTypedElement<SiteDefinitionManifestFileReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SiteDefinitionManifestFileReference() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("WebTempFile", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (WebTempFile+)
        /// </para>
        /// </summary>
        public SiteDefinitionManifestFileReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (WebTempFile+)
        /// </para>
        /// </summary>
        public IList<WebTempFileDefinition> WebTempFile {
            get {
                if ((this.WebTempFileField == null)) {
                    this.WebTempFileField = new XTypedList<WebTempFileDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("WebTempFile", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.WebTempFileField;
            }
            set {
                if ((value == null)) {
                    this.WebTempFileField = null;
                }
                else {
                    if ((this.WebTempFileField == null)) {
                        this.WebTempFileField = XTypedList<WebTempFileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("WebTempFile", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<WebTempFileDefinition>(this.WebTempFileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SiteDefinitionManifestFileReference", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SiteDefinitionManifestFileReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("WebTempFile", "http://schemas.microsoft.com/sharepoint/"), typeof(WebTempFileDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Fields)
    /// </para>
    /// </summary>
    public partial class SharedFieldSetDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SharedFieldSetDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SharedFieldSetDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SharedFieldSetDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Fields)
        /// </para>
        /// </summary>
        public SharedFieldSetDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Fields)
        /// </para>
        /// </summary>
        public SharedFieldDefinitions Fields {
            get {
                XElement x = this.GetElement(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"));
                return ((SharedFieldDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SharedFieldSetDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SharedFieldSetDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), typeof(SharedFieldDefinitions));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Field+)
    /// </para>
    /// </summary>
    public partial class SharedFieldDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SharedFieldDefinition> FieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SharedFieldDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<SharedFieldDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SharedFieldDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Field+)
        /// </para>
        /// </summary>
        public SharedFieldDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Field+)
        /// </para>
        /// </summary>
        public IList<SharedFieldDefinition> Field {
            get {
                if ((this.FieldField == null)) {
                    this.FieldField = new XTypedList<SharedFieldDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldField;
            }
            set {
                if ((value == null)) {
                    this.FieldField = null;
                }
                else {
                    if ((this.FieldField == null)) {
                        this.FieldField = XTypedList<SharedFieldDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<SharedFieldDefinition>(this.FieldField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SharedFieldDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SharedFieldDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Field", "http://schemas.microsoft.com/sharepoint/"), typeof(SharedFieldDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CommandUIDefinitions?, CommandUIHandlers?)
    /// </para>
    /// </summary>
    public partial class CommandUIExtensionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CommandUIExtensionType(XElement xe) { return XTypedServices.ToXTypedElement<CommandUIExtensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CommandUIExtensionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CommandUIDefinitions", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("CommandUIHandlers", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CommandUIDefinitions?, CommandUIHandlers?)
        /// </para>
        /// </summary>
        public CommandUIExtensionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommandUIDefinitions?, CommandUIHandlers?)
        /// </para>
        /// </summary>
        public CommandUIDefinitionsType CommandUIDefinitions {
            get {
                XElement x = this.GetElement(XName.Get("CommandUIDefinitions", "http://schemas.microsoft.com/sharepoint/"));
                return ((CommandUIDefinitionsType)(x));
            }
            set {
                this.SetElement(XName.Get("CommandUIDefinitions", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommandUIDefinitions?, CommandUIHandlers?)
        /// </para>
        /// </summary>
        public CommandUIHandlersType CommandUIHandlers {
            get {
                XElement x = this.GetElement(XName.Get("CommandUIHandlers", "http://schemas.microsoft.com/sharepoint/"));
                return ((CommandUIHandlersType)(x));
            }
            set {
                this.SetElement(XName.Get("CommandUIHandlers", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CommandUIExtensionType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommandUIExtensionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CommandUIDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(CommandUIDefinitionsType));
            localElementDictionary.Add(XName.Get("CommandUIHandlers", "http://schemas.microsoft.com/sharepoint/"), typeof(CommandUIHandlersType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CommandUIDefinition+)
    /// </para>
    /// </summary>
    public partial class CommandUIDefinitionsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CommandUIDefinitionType> CommandUIDefinitionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CommandUIDefinitionsType(XElement xe) { return XTypedServices.ToXTypedElement<CommandUIDefinitionsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CommandUIDefinitionsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CommandUIDefinition", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CommandUIDefinition+)
        /// </para>
        /// </summary>
        public CommandUIDefinitionsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CommandUIDefinition+)
        /// </para>
        /// </summary>
        public IList<CommandUIDefinitionType> CommandUIDefinition {
            get {
                if ((this.CommandUIDefinitionField == null)) {
                    this.CommandUIDefinitionField = new XTypedList<CommandUIDefinitionType>(this, LinqToXsdTypeManager.Instance, XName.Get("CommandUIDefinition", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.CommandUIDefinitionField;
            }
            set {
                if ((value == null)) {
                    this.CommandUIDefinitionField = null;
                }
                else {
                    if ((this.CommandUIDefinitionField == null)) {
                        this.CommandUIDefinitionField = XTypedList<CommandUIDefinitionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CommandUIDefinition", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CommandUIDefinitionType>(this.CommandUIDefinitionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CommandUIDefinitionsType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommandUIDefinitionsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CommandUIDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(CommandUIDefinitionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CommandUIHandler+)
    /// </para>
    /// </summary>
    public partial class CommandUIHandlersType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CommandUIHandlerType> CommandUIHandlerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CommandUIHandlersType(XElement xe) { return XTypedServices.ToXTypedElement<CommandUIHandlersType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CommandUIHandlersType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CommandUIHandler", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CommandUIHandler+)
        /// </para>
        /// </summary>
        public CommandUIHandlersType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CommandUIHandler+)
        /// </para>
        /// </summary>
        public IList<CommandUIHandlerType> CommandUIHandler {
            get {
                if ((this.CommandUIHandlerField == null)) {
                    this.CommandUIHandlerField = new XTypedList<CommandUIHandlerType>(this, LinqToXsdTypeManager.Instance, XName.Get("CommandUIHandler", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.CommandUIHandlerField;
            }
            set {
                if ((value == null)) {
                    this.CommandUIHandlerField = null;
                }
                else {
                    if ((this.CommandUIHandlerField == null)) {
                        this.CommandUIHandlerField = XTypedList<CommandUIHandlerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CommandUIHandler", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CommandUIHandlerType>(this.CommandUIHandlerField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CommandUIHandlersType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommandUIHandlersType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CommandUIHandler", "http://schemas.microsoft.com/sharepoint/"), typeof(CommandUIHandlerType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class CommandUIHandlerType : XTypedElement, IXMetaData {
        
         public static explicit operator CommandUIHandlerType(XElement xe) { return XTypedServices.ToXTypedElement<CommandUIHandlerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CommandUIHandlerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Command {
            get {
                XAttribute x = this.Attribute(XName.Get("Command", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Command", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string CommandAction {
            get {
                XAttribute x = this.Attribute(XName.Get("CommandAction", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CommandAction", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EnabledScript {
            get {
                XAttribute x = this.Attribute(XName.Get("EnabledScript", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EnabledScript", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CommandUIHandlerType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommandUIHandlerType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
    /// </para>
    /// </summary>
    public partial class CommandUIDefinitionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CommandUIDefinitionType(XElement xe) { return XTypedServices.ToXTypedElement<CommandUIDefinitionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CommandUIDefinitionType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("Button", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("CheckBox", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("ComboBox", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("ColorPicker", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("ContextualGroup", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("ContextualTabs", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("DropDown", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("FlyoutAnchor", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Gallery", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("GalleryButton", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("GroupTemplate", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Group", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Groups", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("InsertTable", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Label", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("MRUSplitButton", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("MaxSize", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("MenuSection", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("QAT", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Ribbon", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Scale", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Scaling", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Spinner", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("SplitButton", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("Tabs", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("TextBox", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("ToggleButton", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public CommandUIDefinitionType() {
        }
        
        public CommandUIDefinitionType(ButtonType Button) {
            this.Button = Button;
        }
        
        public CommandUIDefinitionType(CheckBoxType CheckBox) {
            this.CheckBox = CheckBox;
        }
        
        public CommandUIDefinitionType(ComboBoxType ComboBox) {
            this.ComboBox = ComboBox;
        }
        
        public CommandUIDefinitionType(ColorPickerType ColorPicker) {
            this.ColorPicker = ColorPicker;
        }
        
        public CommandUIDefinitionType(ContextualGroupType ContextualGroup) {
            this.ContextualGroup = ContextualGroup;
        }
        
        public CommandUIDefinitionType(ContextualTabsType ContextualTabs) {
            this.ContextualTabs = ContextualTabs;
        }
        
        public CommandUIDefinitionType(ControlsType Controls) {
            this.Controls = Controls;
        }
        
        public CommandUIDefinitionType(DropDownType DropDown) {
            this.DropDown = DropDown;
        }
        
        public CommandUIDefinitionType(FlyoutAnchorType FlyoutAnchor) {
            this.FlyoutAnchor = FlyoutAnchor;
        }
        
        public CommandUIDefinitionType(GalleryType Gallery) {
            this.Gallery = Gallery;
        }
        
        public CommandUIDefinitionType(GalleryButtonType GalleryButton) {
            this.GalleryButton = GalleryButton;
        }
        
        public CommandUIDefinitionType(GroupTemplateType GroupTemplate) {
            this.GroupTemplate = GroupTemplate;
        }
        
        public CommandUIDefinitionType(GroupType Group) {
            this.Group = Group;
        }
        
        public CommandUIDefinitionType(GroupsType Groups) {
            this.Groups = Groups;
        }
        
        public CommandUIDefinitionType(InsertTableType InsertTable) {
            this.InsertTable = InsertTable;
        }
        
        public CommandUIDefinitionType(LabelType Label) {
            this.Label = Label;
        }
        
        public CommandUIDefinitionType(MRUSplitButtonType MRUSplitButton) {
            this.MRUSplitButton = MRUSplitButton;
        }
        
        public CommandUIDefinitionType(MaxSizeType MaxSize) {
            this.MaxSize = MaxSize;
        }
        
        public CommandUIDefinitionType(MenuType Menu) {
            this.Menu = Menu;
        }
        
        public CommandUIDefinitionType(MenuSectionType MenuSection) {
            this.MenuSection = MenuSection;
        }
        
        public CommandUIDefinitionType(QATType QAT) {
            this.QAT = QAT;
        }
        
        public CommandUIDefinitionType(RibbonType Ribbon) {
            this.Ribbon = Ribbon;
        }
        
        public CommandUIDefinitionType(ScaleType Scale) {
            this.Scale = Scale;
        }
        
        public CommandUIDefinitionType(ScalingType Scaling) {
            this.Scaling = Scaling;
        }
        
        public CommandUIDefinitionType(SpinnerType Spinner) {
            this.Spinner = Spinner;
        }
        
        public CommandUIDefinitionType(SplitButtonType SplitButton) {
            this.SplitButton = SplitButton;
        }
        
        public CommandUIDefinitionType(TabType Tab) {
            this.Tab = Tab;
        }
        
        public CommandUIDefinitionType(TabsType Tabs) {
            this.Tabs = Tabs;
        }
        
        public CommandUIDefinitionType(TextBoxType TextBox) {
            this.TextBox = TextBox;
        }
        
        public CommandUIDefinitionType(ToggleButtonType ToggleButton) {
            this.ToggleButton = ToggleButton;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public ButtonType Button {
            get {
                XElement x = this.GetElement(XName.Get("Button", "http://schemas.microsoft.com/sharepoint/"));
                return ((ButtonType)(x));
            }
            set {
                this.SetElement(XName.Get("Button", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public CheckBoxType CheckBox {
            get {
                XElement x = this.GetElement(XName.Get("CheckBox", "http://schemas.microsoft.com/sharepoint/"));
                return ((CheckBoxType)(x));
            }
            set {
                this.SetElement(XName.Get("CheckBox", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public ComboBoxType ComboBox {
            get {
                XElement x = this.GetElement(XName.Get("ComboBox", "http://schemas.microsoft.com/sharepoint/"));
                return ((ComboBoxType)(x));
            }
            set {
                this.SetElement(XName.Get("ComboBox", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public ColorPickerType ColorPicker {
            get {
                XElement x = this.GetElement(XName.Get("ColorPicker", "http://schemas.microsoft.com/sharepoint/"));
                return ((ColorPickerType)(x));
            }
            set {
                this.SetElement(XName.Get("ColorPicker", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public ContextualGroupType ContextualGroup {
            get {
                XElement x = this.GetElement(XName.Get("ContextualGroup", "http://schemas.microsoft.com/sharepoint/"));
                return ((ContextualGroupType)(x));
            }
            set {
                this.SetElement(XName.Get("ContextualGroup", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public ContextualTabsType ContextualTabs {
            get {
                XElement x = this.GetElement(XName.Get("ContextualTabs", "http://schemas.microsoft.com/sharepoint/"));
                return ((ContextualTabsType)(x));
            }
            set {
                this.SetElement(XName.Get("ContextualTabs", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public ControlsType Controls {
            get {
                XElement x = this.GetElement(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/"));
                return ((ControlsType)(x));
            }
            set {
                this.SetElement(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public DropDownType DropDown {
            get {
                XElement x = this.GetElement(XName.Get("DropDown", "http://schemas.microsoft.com/sharepoint/"));
                return ((DropDownType)(x));
            }
            set {
                this.SetElement(XName.Get("DropDown", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public FlyoutAnchorType FlyoutAnchor {
            get {
                XElement x = this.GetElement(XName.Get("FlyoutAnchor", "http://schemas.microsoft.com/sharepoint/"));
                return ((FlyoutAnchorType)(x));
            }
            set {
                this.SetElement(XName.Get("FlyoutAnchor", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public GalleryType Gallery {
            get {
                XElement x = this.GetElement(XName.Get("Gallery", "http://schemas.microsoft.com/sharepoint/"));
                return ((GalleryType)(x));
            }
            set {
                this.SetElement(XName.Get("Gallery", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public GalleryButtonType GalleryButton {
            get {
                XElement x = this.GetElement(XName.Get("GalleryButton", "http://schemas.microsoft.com/sharepoint/"));
                return ((GalleryButtonType)(x));
            }
            set {
                this.SetElement(XName.Get("GalleryButton", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public GroupTemplateType GroupTemplate {
            get {
                XElement x = this.GetElement(XName.Get("GroupTemplate", "http://schemas.microsoft.com/sharepoint/"));
                return ((GroupTemplateType)(x));
            }
            set {
                this.SetElement(XName.Get("GroupTemplate", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public GroupType Group {
            get {
                XElement x = this.GetElement(XName.Get("Group", "http://schemas.microsoft.com/sharepoint/"));
                return ((GroupType)(x));
            }
            set {
                this.SetElement(XName.Get("Group", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public GroupsType Groups {
            get {
                XElement x = this.GetElement(XName.Get("Groups", "http://schemas.microsoft.com/sharepoint/"));
                return ((GroupsType)(x));
            }
            set {
                this.SetElement(XName.Get("Groups", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public InsertTableType InsertTable {
            get {
                XElement x = this.GetElement(XName.Get("InsertTable", "http://schemas.microsoft.com/sharepoint/"));
                return ((InsertTableType)(x));
            }
            set {
                this.SetElement(XName.Get("InsertTable", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public LabelType Label {
            get {
                XElement x = this.GetElement(XName.Get("Label", "http://schemas.microsoft.com/sharepoint/"));
                return ((LabelType)(x));
            }
            set {
                this.SetElement(XName.Get("Label", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public MRUSplitButtonType MRUSplitButton {
            get {
                XElement x = this.GetElement(XName.Get("MRUSplitButton", "http://schemas.microsoft.com/sharepoint/"));
                return ((MRUSplitButtonType)(x));
            }
            set {
                this.SetElement(XName.Get("MRUSplitButton", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public MaxSizeType MaxSize {
            get {
                XElement x = this.GetElement(XName.Get("MaxSize", "http://schemas.microsoft.com/sharepoint/"));
                return ((MaxSizeType)(x));
            }
            set {
                this.SetElement(XName.Get("MaxSize", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public MenuType Menu {
            get {
                XElement x = this.GetElement(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"));
                return ((MenuType)(x));
            }
            set {
                this.SetElement(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public MenuSectionType MenuSection {
            get {
                XElement x = this.GetElement(XName.Get("MenuSection", "http://schemas.microsoft.com/sharepoint/"));
                return ((MenuSectionType)(x));
            }
            set {
                this.SetElement(XName.Get("MenuSection", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public QATType QAT {
            get {
                XElement x = this.GetElement(XName.Get("QAT", "http://schemas.microsoft.com/sharepoint/"));
                return ((QATType)(x));
            }
            set {
                this.SetElement(XName.Get("QAT", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public RibbonType Ribbon {
            get {
                XElement x = this.GetElement(XName.Get("Ribbon", "http://schemas.microsoft.com/sharepoint/"));
                return ((RibbonType)(x));
            }
            set {
                this.SetElement(XName.Get("Ribbon", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public ScaleType Scale {
            get {
                XElement x = this.GetElement(XName.Get("Scale", "http://schemas.microsoft.com/sharepoint/"));
                return ((ScaleType)(x));
            }
            set {
                this.SetElement(XName.Get("Scale", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public ScalingType Scaling {
            get {
                XElement x = this.GetElement(XName.Get("Scaling", "http://schemas.microsoft.com/sharepoint/"));
                return ((ScalingType)(x));
            }
            set {
                this.SetElement(XName.Get("Scaling", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public SpinnerType Spinner {
            get {
                XElement x = this.GetElement(XName.Get("Spinner", "http://schemas.microsoft.com/sharepoint/"));
                return ((SpinnerType)(x));
            }
            set {
                this.SetElement(XName.Get("Spinner", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public SplitButtonType SplitButton {
            get {
                XElement x = this.GetElement(XName.Get("SplitButton", "http://schemas.microsoft.com/sharepoint/"));
                return ((SplitButtonType)(x));
            }
            set {
                this.SetElement(XName.Get("SplitButton", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public TabType Tab {
            get {
                XElement x = this.GetElement(XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/"));
                return ((TabType)(x));
            }
            set {
                this.SetElement(XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public TabsType Tabs {
            get {
                XElement x = this.GetElement(XName.Get("Tabs", "http://schemas.microsoft.com/sharepoint/"));
                return ((TabsType)(x));
            }
            set {
                this.SetElement(XName.Get("Tabs", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public TextBoxType TextBox {
            get {
                XElement x = this.GetElement(XName.Get("TextBox", "http://schemas.microsoft.com/sharepoint/"));
                return ((TextBoxType)(x));
            }
            set {
                this.SetElement(XName.Get("TextBox", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public ToggleButtonType ToggleButton {
            get {
                XElement x = this.GetElement(XName.Get("ToggleButton", "http://schemas.microsoft.com/sharepoint/"));
                return ((ToggleButtonType)(x));
            }
            set {
                this.SetElement(XName.Get("ToggleButton", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CommandUIDefinitionType", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommandUIDefinitionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Button", "http://schemas.microsoft.com/sharepoint/"), typeof(ButtonType));
            localElementDictionary.Add(XName.Get("CheckBox", "http://schemas.microsoft.com/sharepoint/"), typeof(CheckBoxType));
            localElementDictionary.Add(XName.Get("ComboBox", "http://schemas.microsoft.com/sharepoint/"), typeof(ComboBoxType));
            localElementDictionary.Add(XName.Get("ColorPicker", "http://schemas.microsoft.com/sharepoint/"), typeof(ColorPickerType));
            localElementDictionary.Add(XName.Get("ContextualGroup", "http://schemas.microsoft.com/sharepoint/"), typeof(ContextualGroupType));
            localElementDictionary.Add(XName.Get("ContextualTabs", "http://schemas.microsoft.com/sharepoint/"), typeof(ContextualTabsType));
            localElementDictionary.Add(XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/"), typeof(ControlsType));
            localElementDictionary.Add(XName.Get("DropDown", "http://schemas.microsoft.com/sharepoint/"), typeof(DropDownType));
            localElementDictionary.Add(XName.Get("FlyoutAnchor", "http://schemas.microsoft.com/sharepoint/"), typeof(FlyoutAnchorType));
            localElementDictionary.Add(XName.Get("Gallery", "http://schemas.microsoft.com/sharepoint/"), typeof(GalleryType));
            localElementDictionary.Add(XName.Get("GalleryButton", "http://schemas.microsoft.com/sharepoint/"), typeof(GalleryButtonType));
            localElementDictionary.Add(XName.Get("GroupTemplate", "http://schemas.microsoft.com/sharepoint/"), typeof(GroupTemplateType));
            localElementDictionary.Add(XName.Get("Group", "http://schemas.microsoft.com/sharepoint/"), typeof(GroupType));
            localElementDictionary.Add(XName.Get("Groups", "http://schemas.microsoft.com/sharepoint/"), typeof(GroupsType));
            localElementDictionary.Add(XName.Get("InsertTable", "http://schemas.microsoft.com/sharepoint/"), typeof(InsertTableType));
            localElementDictionary.Add(XName.Get("Label", "http://schemas.microsoft.com/sharepoint/"), typeof(LabelType));
            localElementDictionary.Add(XName.Get("MRUSplitButton", "http://schemas.microsoft.com/sharepoint/"), typeof(MRUSplitButtonType));
            localElementDictionary.Add(XName.Get("MaxSize", "http://schemas.microsoft.com/sharepoint/"), typeof(MaxSizeType));
            localElementDictionary.Add(XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/"), typeof(MenuType));
            localElementDictionary.Add(XName.Get("MenuSection", "http://schemas.microsoft.com/sharepoint/"), typeof(MenuSectionType));
            localElementDictionary.Add(XName.Get("QAT", "http://schemas.microsoft.com/sharepoint/"), typeof(QATType));
            localElementDictionary.Add(XName.Get("Ribbon", "http://schemas.microsoft.com/sharepoint/"), typeof(RibbonType));
            localElementDictionary.Add(XName.Get("Scale", "http://schemas.microsoft.com/sharepoint/"), typeof(ScaleType));
            localElementDictionary.Add(XName.Get("Scaling", "http://schemas.microsoft.com/sharepoint/"), typeof(ScalingType));
            localElementDictionary.Add(XName.Get("Spinner", "http://schemas.microsoft.com/sharepoint/"), typeof(SpinnerType));
            localElementDictionary.Add(XName.Get("SplitButton", "http://schemas.microsoft.com/sharepoint/"), typeof(SplitButtonType));
            localElementDictionary.Add(XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/"), typeof(TabType));
            localElementDictionary.Add(XName.Get("Tabs", "http://schemas.microsoft.com/sharepoint/"), typeof(TabsType));
            localElementDictionary.Add(XName.Get("TextBox", "http://schemas.microsoft.com/sharepoint/"), typeof(TextBoxType));
            localElementDictionary.Add(XName.Get("ToggleButton", "http://schemas.microsoft.com/sharepoint/"), typeof(ToggleButtonType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (UrlAction?, CommandUIExtension?)
    /// </para>
    /// </summary>
    public partial class CustomActionDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator CustomActionDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CustomActionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CustomActionDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (UrlAction?, CommandUIExtension?)
        /// </para>
        /// </summary>
        public CustomActionDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UrlAction?, CommandUIExtension?)
        /// </para>
        /// </summary>
        public UrlActionDefinition UrlAction {
            get {
                XElement x = this.GetElement(XName.Get("UrlAction", "http://schemas.microsoft.com/sharepoint/"));
                return ((UrlActionDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("UrlAction", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UrlAction?, CommandUIExtension?)
        /// </para>
        /// </summary>
        public CommandUIExtensionType CommandUIExtension {
            get {
                XElement x = this.GetElement(XName.Get("CommandUIExtension", "http://schemas.microsoft.com/sharepoint/"));
                return ((CommandUIExtensionType)(x));
            }
            set {
                this.SetElement(XName.Get("CommandUIExtension", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RequiredAdmin {
            get {
                XAttribute x = this.Attribute(XName.Get("RequiredAdmin", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RequiredAdmin", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ControlAssembly {
            get {
                XAttribute x = this.Attribute(XName.Get("ControlAssembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ControlAssembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ControlClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ControlClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ControlClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ControlSrc {
            get {
                XAttribute x = this.Attribute(XName.Get("ControlSrc", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ControlSrc", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string GroupId {
            get {
                XAttribute x = this.Attribute(XName.Get("GroupId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("GroupId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FeatureId {
            get {
                XAttribute x = this.Attribute(XName.Get("FeatureId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FeatureId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ScriptSrc {
            get {
                XAttribute x = this.Attribute(XName.Get("ScriptSrc", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ScriptSrc", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ScriptBlock {
            get {
                XAttribute x = this.Attribute(XName.Get("ScriptBlock", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ScriptBlock", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RegistrationType {
            get {
                XAttribute x = this.Attribute(XName.Get("RegistrationType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RegistrationType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RegistrationId {
            get {
                XAttribute x = this.Attribute(XName.Get("RegistrationId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RegistrationId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RequireSiteAdministrator {
            get {
                XAttribute x = this.Attribute(XName.Get("RequireSiteAdministrator", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RequireSiteAdministrator", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Rights {
            get {
                XAttribute x = this.Attribute(XName.Get("Rights", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Rights", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RootWebOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("RootWebOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RootWebOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInLists {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInLists", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInLists", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInReadOnlyContentTypes {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInReadOnlyContentTypes", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInReadOnlyContentTypes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInSealedContentTypes {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInSealedContentTypes", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInSealedContentTypes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UIVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("UIVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("UIVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CustomActionDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CustomActionDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("UrlAction", "http://schemas.microsoft.com/sharepoint/"), typeof(UrlActionDefinition));
            localElementDictionary.Add(XName.Get("CommandUIExtension", "http://schemas.microsoft.com/sharepoint/"), typeof(CommandUIExtensionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class HideCustomActionDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator HideCustomActionDefinition(XElement xe) { return XTypedServices.ToXTypedElement<HideCustomActionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public HideCustomActionDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HideActionId {
            get {
                XAttribute x = this.Attribute(XName.Get("HideActionId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HideActionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string GroupId {
            get {
                XAttribute x = this.Attribute(XName.Get("GroupId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("GroupId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("HideCustomActionDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HideCustomActionDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UrlActionDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator UrlActionDefinition(XElement xe) { return XTypedServices.ToXTypedElement<UrlActionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UrlActionDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UrlActionDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UrlActionDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class CustomActionRegistrationType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "List",
                        "ContentType",
                        "FileType",
                        "ProgId"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CustomActionRegistrationType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (UrlAction?)
    /// </para>
    /// </summary>
    public partial class CustomActionGroupDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CustomActionGroupDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CustomActionGroupDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CustomActionGroupDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("UrlAction", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (UrlAction?)
        /// </para>
        /// </summary>
        public CustomActionGroupDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UrlAction?)
        /// </para>
        /// </summary>
        public UrlActionDefinition UrlAction {
            get {
                XElement x = this.GetElement(XName.Get("UrlAction", "http://schemas.microsoft.com/sharepoint/"));
                return ((UrlActionDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("UrlAction", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("ImageUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ImageUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RequiredAdmin {
            get {
                XAttribute x = this.Attribute(XName.Get("RequiredAdmin", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RequiredAdmin", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CustomActionGroupDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CustomActionGroupDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("UrlAction", "http://schemas.microsoft.com/sharepoint/"), typeof(UrlActionDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CustomAction+)
    /// </para>
    /// </summary>
    public partial class CustomActionDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CustomActionDefinition> CustomActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CustomActionDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<CustomActionDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CustomActionDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CustomAction", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CustomAction+)
        /// </para>
        /// </summary>
        public CustomActionDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CustomAction+)
        /// </para>
        /// </summary>
        public IList<CustomActionDefinition> CustomAction {
            get {
                if ((this.CustomActionField == null)) {
                    this.CustomActionField = new XTypedList<CustomActionDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("CustomAction", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.CustomActionField;
            }
            set {
                if ((value == null)) {
                    this.CustomActionField = null;
                }
                else {
                    if ((this.CustomActionField == null)) {
                        this.CustomActionField = XTypedList<CustomActionDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CustomAction", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CustomActionDefinition>(this.CustomActionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CustomActionDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CustomActionDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CustomAction", "http://schemas.microsoft.com/sharepoint/"), typeof(CustomActionDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class FeatureActivationDependencyDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator FeatureActivationDependencyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FeatureActivationDependencyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FeatureActivationDependencyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string FeatureId {
            get {
                XAttribute x = this.Attribute(XName.Get("FeatureId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FeatureId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string MinimumVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("MinimumVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MinimumVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SolutionId {
            get {
                XAttribute x = this.Attribute(XName.Get("SolutionId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SolutionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SolutionTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("SolutionTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SolutionTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SolutionName {
            get {
                XAttribute x = this.Attribute(XName.Get("SolutionName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SolutionName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SolutionUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("SolutionUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SolutionUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FeatureTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("FeatureTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FeatureTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FeatureDescription {
            get {
                XAttribute x = this.Attribute(XName.Get("FeatureDescription", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FeatureDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FeatureActivationDependencyDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureActivationDependencyDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ActivationDependency*)
    /// </para>
    /// </summary>
    public partial class FeatureActivationDependencyDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FeatureActivationDependencyDefinition> ActivationDependencyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FeatureActivationDependencyDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<FeatureActivationDependencyDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeatureActivationDependencyDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ActivationDependency", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivationDependency*)
        /// </para>
        /// </summary>
        public FeatureActivationDependencyDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ActivationDependency*)
        /// </para>
        /// </summary>
        public IList<FeatureActivationDependencyDefinition> ActivationDependency {
            get {
                if ((this.ActivationDependencyField == null)) {
                    this.ActivationDependencyField = new XTypedList<FeatureActivationDependencyDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ActivationDependency", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ActivationDependencyField;
            }
            set {
                if ((value == null)) {
                    this.ActivationDependencyField = null;
                }
                else {
                    if ((this.ActivationDependencyField == null)) {
                        this.ActivationDependencyField = XTypedList<FeatureActivationDependencyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ActivationDependency", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FeatureActivationDependencyDefinition>(this.ActivationDependencyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FeatureActivationDependencyDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureActivationDependencyDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ActivationDependency", "http://schemas.microsoft.com/sharepoint/"), typeof(FeatureActivationDependencyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class RequiredAdminType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Delegated",
                        "Farm",
                        "Machine"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RequiredAdminType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
    /// </para>
    /// </summary>
    public partial class SharedFieldReference : global::Microsoft.Schemas.SharePoint.FieldDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SharedFieldReference(XElement xe) { return XTypedServices.ToXTypedElement<SharedFieldReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SharedFieldReference() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public SharedFieldReference() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SharedFieldReference", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SharedFieldReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FieldRefs", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldRefDefinitions));
            localElementDictionary.Add(XName.Get("DisplayPattern", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("DisplayBidiPattern", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("CHOICES", "http://schemas.microsoft.com/sharepoint/"), typeof(CHOICEDEFINITIONS));
            localElementDictionary.Add(XName.Get("MAPPINGS", "http://schemas.microsoft.com/sharepoint/"), typeof(MAPPINGDEFINITIONS));
            localElementDictionary.Add(XName.Get("Default", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("Formula", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("FormulaDisplayNames", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("DefaultFormula", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("Validation", "http://schemas.microsoft.com/sharepoint/"), typeof(ValidationDefinition));
            localElementDictionary.Add(XName.Get("Customization", "http://schemas.microsoft.com/sharepoint/"), typeof(CustomizationDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Properties?)
    /// </para>
    /// </summary>
    public partial class FeatureTemplateReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FeatureTemplateReference(XElement xe) { return XTypedServices.ToXTypedElement<FeatureTemplateReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeatureTemplateReference() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Properties", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Properties?)
        /// </para>
        /// </summary>
        public FeatureTemplateReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Properties?)
        /// </para>
        /// </summary>
        public FeaturePropertyDefinitions Properties {
            get {
                XElement x = this.GetElement(XName.Get("Properties", "http://schemas.microsoft.com/sharepoint/"));
                return ((FeaturePropertyDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("Properties", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SourceVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("SourceVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SourceVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FeatureTemplateReference", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureTemplateReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Properties", "http://schemas.microsoft.com/sharepoint/"), typeof(FeaturePropertyDefinitions));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class FeatureTemplateReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FeatureTemplateReference> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FeatureTemplateReferences(XElement xe) { return XTypedServices.ToXTypedElement<FeatureTemplateReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeatureTemplateReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Feature", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public FeatureTemplateReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public IList<FeatureTemplateReference> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<FeatureTemplateReference>(this, LinqToXsdTypeManager.Instance, XName.Get("Feature", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<FeatureTemplateReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Feature", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FeatureTemplateReference>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FeatureTemplateReferences", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureTemplateReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Feature", "http://schemas.microsoft.com/sharepoint/"), typeof(FeatureTemplateReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*))*
    /// </para>
    /// </summary>
    public partial class VersionRangeDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CustomUpgradeActionDefinition> CustomUpgradeActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ElementManifestReferences> ApplyElementManifestsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AddContentTypeFieldDefinition> AddContentTypeFieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MapFileDefinition> MapFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator VersionRangeDefinition(XElement xe) { return XTypedServices.ToXTypedElement<VersionRangeDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VersionRangeDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*))*
        /// </para>
        /// </summary>
        public VersionRangeDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*))*
        /// </para>
        /// </summary>
        public IList<CustomUpgradeActionDefinition> CustomUpgradeAction {
            get {
                if ((this.CustomUpgradeActionField == null)) {
                    this.CustomUpgradeActionField = new XTypedList<CustomUpgradeActionDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("CustomUpgradeAction", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.CustomUpgradeActionField;
            }
            set {
                if ((value == null)) {
                    this.CustomUpgradeActionField = null;
                }
                else {
                    if ((this.CustomUpgradeActionField == null)) {
                        this.CustomUpgradeActionField = XTypedList<CustomUpgradeActionDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CustomUpgradeAction", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CustomUpgradeActionDefinition>(this.CustomUpgradeActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*))*
        /// </para>
        /// </summary>
        public IList<ElementManifestReferences> ApplyElementManifests {
            get {
                if ((this.ApplyElementManifestsField == null)) {
                    this.ApplyElementManifestsField = new XTypedList<ElementManifestReferences>(this, LinqToXsdTypeManager.Instance, XName.Get("ApplyElementManifests", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ApplyElementManifestsField;
            }
            set {
                if ((value == null)) {
                    this.ApplyElementManifestsField = null;
                }
                else {
                    if ((this.ApplyElementManifestsField == null)) {
                        this.ApplyElementManifestsField = XTypedList<ElementManifestReferences>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ApplyElementManifests", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ElementManifestReferences>(this.ApplyElementManifestsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*))*
        /// </para>
        /// </summary>
        public IList<AddContentTypeFieldDefinition> AddContentTypeField {
            get {
                if ((this.AddContentTypeFieldField == null)) {
                    this.AddContentTypeFieldField = new XTypedList<AddContentTypeFieldDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("AddContentTypeField", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.AddContentTypeFieldField;
            }
            set {
                if ((value == null)) {
                    this.AddContentTypeFieldField = null;
                }
                else {
                    if ((this.AddContentTypeFieldField == null)) {
                        this.AddContentTypeFieldField = XTypedList<AddContentTypeFieldDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AddContentTypeField", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<AddContentTypeFieldDefinition>(this.AddContentTypeFieldField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*))*
        /// </para>
        /// </summary>
        public IList<MapFileDefinition> MapFile {
            get {
                if ((this.MapFileField == null)) {
                    this.MapFileField = new XTypedList<MapFileDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("MapFile", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MapFileField;
            }
            set {
                if ((value == null)) {
                    this.MapFileField = null;
                }
                else {
                    if ((this.MapFileField == null)) {
                        this.MapFileField = XTypedList<MapFileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MapFile", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<MapFileDefinition>(this.MapFileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string BeginVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("BeginVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BeginVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EndVersion {
            get {
                XAttribute x = this.Attribute(XName.Get("EndVersion", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EndVersion", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("VersionRangeDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VersionRangeDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("CustomUpgradeAction", "http://schemas.microsoft.com/sharepoint/"), typeof(CustomUpgradeActionDefinition));
            localElementDictionary.Add(XName.Get("ApplyElementManifests", "http://schemas.microsoft.com/sharepoint/"), typeof(ElementManifestReferences));
            localElementDictionary.Add(XName.Get("AddContentTypeField", "http://schemas.microsoft.com/sharepoint/"), typeof(AddContentTypeFieldDefinition));
            localElementDictionary.Add(XName.Get("MapFile", "http://schemas.microsoft.com/sharepoint/"), typeof(MapFileDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VersionRange* | CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*)*
    /// </para>
    /// </summary>
    public partial class UpgradeActionsDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VersionRangeDefinition> VersionRangeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CustomUpgradeActionDefinition> CustomUpgradeActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ElementManifestReferences> ApplyElementManifestsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AddContentTypeFieldDefinition> AddContentTypeFieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MapFileDefinition> MapFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator UpgradeActionsDefinition(XElement xe) { return XTypedServices.ToXTypedElement<UpgradeActionsDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UpgradeActionsDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VersionRange* | CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*)*
        /// </para>
        /// </summary>
        public UpgradeActionsDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (VersionRange* | CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*)*
        /// </para>
        /// </summary>
        public IList<VersionRangeDefinition> VersionRange {
            get {
                if ((this.VersionRangeField == null)) {
                    this.VersionRangeField = new XTypedList<VersionRangeDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("VersionRange", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.VersionRangeField;
            }
            set {
                if ((value == null)) {
                    this.VersionRangeField = null;
                }
                else {
                    if ((this.VersionRangeField == null)) {
                        this.VersionRangeField = XTypedList<VersionRangeDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("VersionRange", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<VersionRangeDefinition>(this.VersionRangeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (VersionRange* | CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*)*
        /// </para>
        /// </summary>
        public IList<CustomUpgradeActionDefinition> CustomUpgradeAction {
            get {
                if ((this.CustomUpgradeActionField == null)) {
                    this.CustomUpgradeActionField = new XTypedList<CustomUpgradeActionDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("CustomUpgradeAction", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.CustomUpgradeActionField;
            }
            set {
                if ((value == null)) {
                    this.CustomUpgradeActionField = null;
                }
                else {
                    if ((this.CustomUpgradeActionField == null)) {
                        this.CustomUpgradeActionField = XTypedList<CustomUpgradeActionDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CustomUpgradeAction", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CustomUpgradeActionDefinition>(this.CustomUpgradeActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (VersionRange* | CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*)*
        /// </para>
        /// </summary>
        public IList<ElementManifestReferences> ApplyElementManifests {
            get {
                if ((this.ApplyElementManifestsField == null)) {
                    this.ApplyElementManifestsField = new XTypedList<ElementManifestReferences>(this, LinqToXsdTypeManager.Instance, XName.Get("ApplyElementManifests", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ApplyElementManifestsField;
            }
            set {
                if ((value == null)) {
                    this.ApplyElementManifestsField = null;
                }
                else {
                    if ((this.ApplyElementManifestsField == null)) {
                        this.ApplyElementManifestsField = XTypedList<ElementManifestReferences>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ApplyElementManifests", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ElementManifestReferences>(this.ApplyElementManifestsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (VersionRange* | CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*)*
        /// </para>
        /// </summary>
        public IList<AddContentTypeFieldDefinition> AddContentTypeField {
            get {
                if ((this.AddContentTypeFieldField == null)) {
                    this.AddContentTypeFieldField = new XTypedList<AddContentTypeFieldDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("AddContentTypeField", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.AddContentTypeFieldField;
            }
            set {
                if ((value == null)) {
                    this.AddContentTypeFieldField = null;
                }
                else {
                    if ((this.AddContentTypeFieldField == null)) {
                        this.AddContentTypeFieldField = XTypedList<AddContentTypeFieldDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AddContentTypeField", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<AddContentTypeFieldDefinition>(this.AddContentTypeFieldField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (VersionRange* | CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*)*
        /// </para>
        /// </summary>
        public IList<MapFileDefinition> MapFile {
            get {
                if ((this.MapFileField == null)) {
                    this.MapFileField = new XTypedList<MapFileDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("MapFile", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.MapFileField;
            }
            set {
                if ((value == null)) {
                    this.MapFileField = null;
                }
                else {
                    if ((this.MapFileField == null)) {
                        this.MapFileField = XTypedList<MapFileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("MapFile", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<MapFileDefinition>(this.MapFileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReceiverAssembly {
            get {
                XAttribute x = this.Attribute(XName.Get("ReceiverAssembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReceiverAssembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReceiverClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ReceiverClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReceiverClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UpgradeActionsDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UpgradeActionsDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("VersionRange", "http://schemas.microsoft.com/sharepoint/"), typeof(VersionRangeDefinition));
            localElementDictionary.Add(XName.Get("CustomUpgradeAction", "http://schemas.microsoft.com/sharepoint/"), typeof(CustomUpgradeActionDefinition));
            localElementDictionary.Add(XName.Get("ApplyElementManifests", "http://schemas.microsoft.com/sharepoint/"), typeof(ElementManifestReferences));
            localElementDictionary.Add(XName.Get("AddContentTypeField", "http://schemas.microsoft.com/sharepoint/"), typeof(AddContentTypeFieldDefinition));
            localElementDictionary.Add(XName.Get("MapFile", "http://schemas.microsoft.com/sharepoint/"), typeof(MapFileDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Parameters?)
    /// </para>
    /// </summary>
    public partial class CustomUpgradeActionDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CustomUpgradeActionDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CustomUpgradeActionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CustomUpgradeActionDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Parameters", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Parameters?)
        /// </para>
        /// </summary>
        public CustomUpgradeActionDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?)
        /// </para>
        /// </summary>
        public ParametersDefinition Parameters {
            get {
                XElement x = this.GetElement(XName.Get("Parameters", "http://schemas.microsoft.com/sharepoint/"));
                return ((ParametersDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Parameters", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CustomUpgradeActionDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CustomUpgradeActionDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Parameters", "http://schemas.microsoft.com/sharepoint/"), typeof(ParametersDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Parameter+)
    /// </para>
    /// </summary>
    public partial class ParametersDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ParameterDefinition> ParameterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ParametersDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ParametersDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ParametersDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Parameter", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Parameter+)
        /// </para>
        /// </summary>
        public ParametersDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Parameter+)
        /// </para>
        /// </summary>
        public IList<ParameterDefinition> Parameter {
            get {
                if ((this.ParameterField == null)) {
                    this.ParameterField = new XTypedList<ParameterDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Parameter", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ParameterField;
            }
            set {
                if ((value == null)) {
                    this.ParameterField = null;
                }
                else {
                    if ((this.ParameterField == null)) {
                        this.ParameterField = XTypedList<ParameterDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Parameter", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ParameterDefinition>(this.ParameterField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ParametersDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ParametersDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Parameter", "http://schemas.microsoft.com/sharepoint/"), typeof(ParameterDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ParameterDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ParameterDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ParameterDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ParameterDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ParameterDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ParameterDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class AddContentTypeFieldDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator AddContentTypeFieldDefinition(XElement xe) { return XTypedServices.ToXTypedElement<AddContentTypeFieldDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AddContentTypeFieldDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ContentTypeId {
            get {
                XAttribute x = this.Attribute(XName.Get("ContentTypeId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ContentTypeId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FieldId {
            get {
                XAttribute x = this.Attribute(XName.Get("FieldId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FieldId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PushDown {
            get {
                XAttribute x = this.Attribute(XName.Get("PushDown", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PushDown", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AddContentTypeFieldDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AddContentTypeFieldDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class MapFileDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator MapFileDefinition(XElement xe) { return XTypedServices.ToXTypedElement<MapFileDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public MapFileDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FromPath {
            get {
                XAttribute x = this.Attribute(XName.Get("FromPath", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FromPath", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ToPath {
            get {
                XAttribute x = this.Attribute(XName.Get("ToPath", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ToPath", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("MapFileDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MapFileDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RenderPattern*)
    /// </para>
    /// </summary>
    public partial class FieldTypeDefinition : global::Microsoft.Schemas.SharePoint.SubFieldTypeDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RenderPatternDefinition> RenderPatternField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FieldTypeDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldTypeDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FieldTypeDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RenderPattern", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RenderPattern*)
        /// </para>
        /// </summary>
        public FieldTypeDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RenderPattern*)
        /// </para>
        /// </summary>
        public IList<RenderPatternDefinition> RenderPattern {
            get {
                if ((this.RenderPatternField == null)) {
                    this.RenderPatternField = new XTypedList<RenderPatternDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("RenderPattern", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.RenderPatternField;
            }
            set {
                if ((value == null)) {
                    this.RenderPatternField = null;
                }
                else {
                    if ((this.RenderPatternField == null)) {
                        this.RenderPatternField = XTypedList<RenderPatternDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RenderPattern", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<RenderPatternDefinition>(this.RenderPatternField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Assembly {
            get {
                XAttribute x = this.Attribute(XName.Get("Assembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Assembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Class {
            get {
                XAttribute x = this.Attribute(XName.Get("Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FieldTypeDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldTypeDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("RenderPattern", "http://schemas.microsoft.com/sharepoint/"), typeof(RenderPatternDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class RenderPatternName {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DisplayBidiPattern",
                        "DisplayPattern",
                        "EditBidiPattern",
                        "EditPattern",
                        "HeaderBidiPattern",
                        "HeaderPattern",
                        "NewBidiPattern",
                        "NewPattern",
                        "PreviewDisplayPattern",
                        "PreviewNewPattern",
                        "PreviewEditPattern"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RenderPatternName() {
        }
    }
    
    public sealed class RenderPatternType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Boolean",
                        "Choice",
                        "Counter",
                        "Currency",
                        "DateTime",
                        "Integer",
                        "Lookup",
                        "Note",
                        "Number",
                        "Text",
                        "Threading",
                        "URL"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RenderPatternType() {
        }
    }
    
    public partial class RenderPatternDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator RenderPatternDefinition(XElement xe) { return XTypedServices.ToXTypedElement<RenderPatternDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RenderPatternDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayName {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Tall {
            get {
                XAttribute x = this.Attribute(XName.Get("Tall", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Tall", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Implementation {
            get {
                XAttribute x = this.Attribute(XName.Get("Implementation", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Implementation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ControlClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ControlClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ControlClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RenderPatternDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RenderPatternDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SubFieldTypeDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator SubFieldTypeDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SubFieldTypeDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SubFieldTypeDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TypeName {
            get {
                XAttribute x = this.Attribute(XName.Get("TypeName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TypeName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SqlType {
            get {
                XAttribute x = this.Attribute(XName.Get("SqlType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SqlType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string InternalType {
            get {
                XAttribute x = this.Attribute(XName.Get("InternalType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("InternalType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Sortable {
            get {
                XAttribute x = this.Attribute(XName.Get("Sortable", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sortable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Filterable {
            get {
                XAttribute x = this.Attribute(XName.Get("Filterable", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Filterable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HasValidation {
            get {
                XAttribute x = this.Attribute(XName.Get("HasValidation", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HasValidation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SubFieldTypeDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubFieldTypeDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SafeControls?, ClassResources?, BindingRedirects?)
    /// </para>
    /// </summary>
    public partial class AssemblyFileReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator AssemblyFileReference(XElement xe) { return XTypedServices.ToXTypedElement<AssemblyFileReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AssemblyFileReference() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SafeControls?, ClassResources?, BindingRedirects?)
        /// </para>
        /// </summary>
        public AssemblyFileReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SafeControls?, ClassResources?, BindingRedirects?)
        /// </para>
        /// </summary>
        public SafeControlDefinitions SafeControls {
            get {
                XElement x = this.GetElement(XName.Get("SafeControls", "http://schemas.microsoft.com/sharepoint/"));
                return ((SafeControlDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("SafeControls", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SafeControls?, ClassResources?, BindingRedirects?)
        /// </para>
        /// </summary>
        public ClassResourceDefinitions ClassResources {
            get {
                XElement x = this.GetElement(XName.Get("ClassResources", "http://schemas.microsoft.com/sharepoint/"));
                return ((ClassResourceDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("ClassResources", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SafeControls?, ClassResources?, BindingRedirects?)
        /// </para>
        /// </summary>
        public BindingRedirectDefinitions BindingRedirects {
            get {
                XElement x = this.GetElement(XName.Get("BindingRedirects", "http://schemas.microsoft.com/sharepoint/"));
                return ((BindingRedirectDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("BindingRedirects", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DeploymentTarget {
            get {
                XAttribute x = this.Attribute(XName.Get("DeploymentTarget", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DeploymentTarget", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AssemblyFileReference", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AssemblyFileReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SafeControls", "http://schemas.microsoft.com/sharepoint/"), typeof(SafeControlDefinitions));
            localElementDictionary.Add(XName.Get("ClassResources", "http://schemas.microsoft.com/sharepoint/"), typeof(ClassResourceDefinitions));
            localElementDictionary.Add(XName.Get("BindingRedirects", "http://schemas.microsoft.com/sharepoint/"), typeof(BindingRedirectDefinitions));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Assembly+)
    /// </para>
    /// </summary>
    public partial class AssemblyFileReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AssemblyFileReference> AssemblyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator AssemblyFileReferences(XElement xe) { return XTypedServices.ToXTypedElement<AssemblyFileReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AssemblyFileReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Assembly", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Assembly+)
        /// </para>
        /// </summary>
        public AssemblyFileReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Assembly+)
        /// </para>
        /// </summary>
        public IList<AssemblyFileReference> Assembly {
            get {
                if ((this.AssemblyField == null)) {
                    this.AssemblyField = new XTypedList<AssemblyFileReference>(this, LinqToXsdTypeManager.Instance, XName.Get("Assembly", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.AssemblyField;
            }
            set {
                if ((value == null)) {
                    this.AssemblyField = null;
                }
                else {
                    if ((this.AssemblyField == null)) {
                        this.AssemblyField = XTypedList<AssemblyFileReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Assembly", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<AssemblyFileReference>(this.AssemblyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("AssemblyFileReferences", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AssemblyFileReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Assembly", "http://schemas.microsoft.com/sharepoint/"), typeof(AssemblyFileReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class RootFileReference : XTypedElement, IXMetaData {
        
         public static explicit operator RootFileReference(XElement xe) { return XTypedServices.ToXTypedElement<RootFileReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RootFileReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RootFileReference", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RootFileReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RootFile+)
    /// </para>
    /// </summary>
    public partial class RootFileReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RootFileReference> RootFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator RootFileReferences(XElement xe) { return XTypedServices.ToXTypedElement<RootFileReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RootFileReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RootFile", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RootFile+)
        /// </para>
        /// </summary>
        public RootFileReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RootFile+)
        /// </para>
        /// </summary>
        public IList<RootFileReference> RootFile {
            get {
                if ((this.RootFileField == null)) {
                    this.RootFileField = new XTypedList<RootFileReference>(this, LinqToXsdTypeManager.Instance, XName.Get("RootFile", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.RootFileField;
            }
            set {
                if ((value == null)) {
                    this.RootFileField = null;
                }
                else {
                    if ((this.RootFileField == null)) {
                        this.RootFileField = XTypedList<RootFileReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RootFile", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<RootFileReference>(this.RootFileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("RootFileReferences", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RootFileReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("RootFile", "http://schemas.microsoft.com/sharepoint/"), typeof(RootFileReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class TemplateFileReference : XTypedElement, IXMetaData {
        
         public static explicit operator TemplateFileReference(XElement xe) { return XTypedServices.ToXTypedElement<TemplateFileReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public TemplateFileReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TemplateFileReference", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TemplateFileReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TemplateFile+)
    /// </para>
    /// </summary>
    public partial class TemplateFileReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TemplateFileReference> TemplateFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TemplateFileReferences(XElement xe) { return XTypedServices.ToXTypedElement<TemplateFileReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TemplateFileReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TemplateFile", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TemplateFile+)
        /// </para>
        /// </summary>
        public TemplateFileReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TemplateFile+)
        /// </para>
        /// </summary>
        public IList<TemplateFileReference> TemplateFile {
            get {
                if ((this.TemplateFileField == null)) {
                    this.TemplateFileField = new XTypedList<TemplateFileReference>(this, LinqToXsdTypeManager.Instance, XName.Get("TemplateFile", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.TemplateFileField;
            }
            set {
                if ((value == null)) {
                    this.TemplateFileField = null;
                }
                else {
                    if ((this.TemplateFileField == null)) {
                        this.TemplateFileField = XTypedList<TemplateFileReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TemplateFile", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<TemplateFileReference>(this.TemplateFileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TemplateFileReferences", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TemplateFileReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("TemplateFile", "http://schemas.microsoft.com/sharepoint/"), typeof(TemplateFileReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PolicyItem*)
    /// </para>
    /// </summary>
    public partial class CodeAccessSecurityDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PolicyItemDefinition> PolicyItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CodeAccessSecurityDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CodeAccessSecurityDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodeAccessSecurityDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PolicyItem", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PolicyItem*)
        /// </para>
        /// </summary>
        public CodeAccessSecurityDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PolicyItem*)
        /// </para>
        /// </summary>
        public IList<PolicyItemDefinition> PolicyItem {
            get {
                if ((this.PolicyItemField == null)) {
                    this.PolicyItemField = new XTypedList<PolicyItemDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("PolicyItem", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.PolicyItemField;
            }
            set {
                if ((value == null)) {
                    this.PolicyItemField = null;
                }
                else {
                    if ((this.PolicyItemField == null)) {
                        this.PolicyItemField = XTypedList<PolicyItemDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PolicyItem", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<PolicyItemDefinition>(this.PolicyItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CodeAccessSecurityDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodeAccessSecurityDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PolicyItem", "http://schemas.microsoft.com/sharepoint/"), typeof(PolicyItemDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PermissionSet, Assemblies)
    /// </para>
    /// </summary>
    public partial class PolicyItemDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator PolicyItemDefinition(XElement xe) { return XTypedServices.ToXTypedElement<PolicyItemDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PolicyItemDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PermissionSet, Assemblies)
        /// </para>
        /// </summary>
        public PolicyItemDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PermissionSet, Assemblies)
        /// </para>
        /// </summary>
        public PermissionSetDefinition PermissionSet {
            get {
                XElement x = this.GetElement(XName.Get("PermissionSet", "http://schemas.microsoft.com/sharepoint/"));
                return ((PermissionSetDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("PermissionSet", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PermissionSet, Assemblies)
        /// </para>
        /// </summary>
        public PolicyAssembliesDefinition Assemblies {
            get {
                XElement x = this.GetElement(XName.Get("Assemblies", "http://schemas.microsoft.com/sharepoint/"));
                return ((PolicyAssembliesDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Assemblies", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PolicyItemDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PolicyItemDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("PermissionSet", "http://schemas.microsoft.com/sharepoint/"), typeof(PermissionSetDefinition));
            localElementDictionary.Add(XName.Get("Assemblies", "http://schemas.microsoft.com/sharepoint/"), typeof(PolicyAssembliesDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (IPermission+)
    /// </para>
    /// </summary>
    public partial class PermissionSetDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<XTypedElement> IPermissionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PermissionSetDefinition(XElement xe) { return XTypedServices.ToXTypedElement<PermissionSetDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PermissionSetDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("IPermission", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (IPermission+)
        /// </para>
        /// </summary>
        public PermissionSetDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (IPermission+)
        /// </para>
        /// </summary>
        public IList<XTypedElement> IPermission {
            get {
                if ((this.IPermissionField == null)) {
                    this.IPermissionField = new XTypedList<XTypedElement>(this, LinqToXsdTypeManager.Instance, XName.Get("IPermission", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.IPermissionField;
            }
            set {
                if ((value == null)) {
                    this.IPermissionField = null;
                }
                else {
                    if ((this.IPermissionField == null)) {
                        this.IPermissionField = XTypedList<XTypedElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("IPermission", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<XTypedElement>(this.IPermissionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @class {
            get {
                XAttribute x = this.Attribute(XName.Get("class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string version {
            get {
                XAttribute x = this.Attribute(XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PermissionSetDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PermissionSetDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("IPermission", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class PermssionSetClassAttr {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NamedPermissionSet"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PermssionSetClassAttr() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Assembly+)
    /// </para>
    /// </summary>
    public partial class PolicyAssembliesDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PolicyAssemblyDefinition> AssemblyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PolicyAssembliesDefinition(XElement xe) { return XTypedServices.ToXTypedElement<PolicyAssembliesDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PolicyAssembliesDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Assembly", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Assembly+)
        /// </para>
        /// </summary>
        public PolicyAssembliesDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Assembly+)
        /// </para>
        /// </summary>
        public IList<PolicyAssemblyDefinition> Assembly {
            get {
                if ((this.AssemblyField == null)) {
                    this.AssemblyField = new XTypedList<PolicyAssemblyDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Assembly", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.AssemblyField;
            }
            set {
                if ((value == null)) {
                    this.AssemblyField = null;
                }
                else {
                    if ((this.AssemblyField == null)) {
                        this.AssemblyField = XTypedList<PolicyAssemblyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Assembly", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<PolicyAssemblyDefinition>(this.AssemblyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PolicyAssembliesDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PolicyAssembliesDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Assembly", "http://schemas.microsoft.com/sharepoint/"), typeof(PolicyAssemblyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class PolicyAssemblyDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator PolicyAssemblyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<PolicyAssemblyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PolicyAssemblyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                XAttribute x = this.Attribute(XName.Get("Version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PublicKeyBlob {
            get {
                XAttribute x = this.Attribute(XName.Get("PublicKeyBlob", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PublicKeyBlob", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PolicyAssemblyDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PolicyAssemblyDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ContentTypeFilter | FieldChangedFilter | FieldExpressionFilter))
    /// </para>
    /// </summary>
    public partial class ItemEventDefinition : global::Microsoft.Schemas.SharePoint.EventDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ItemEventDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ItemEventDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ItemEventDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ContentTypeFilter | FieldChangedFilter | FieldExpressionFilter))
        /// </para>
        /// </summary>
        public ItemEventDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentTypeFilter | FieldChangedFilter | FieldExpressionFilter))
        /// </para>
        /// </summary>
        public ContentTypeFilterDefinition ContentTypeFilter {
            get {
                XElement x = this.GetElement(XName.Get("ContentTypeFilter", "http://schemas.microsoft.com/sharepoint/"));
                return ((ContentTypeFilterDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("ContentTypeFilter", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentTypeFilter | FieldChangedFilter | FieldExpressionFilter))
        /// </para>
        /// </summary>
        public FieldChangedFilterDefinition FieldChangedFilter {
            get {
                XElement x = this.GetElement(XName.Get("FieldChangedFilter", "http://schemas.microsoft.com/sharepoint/"));
                return ((FieldChangedFilterDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("FieldChangedFilter", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentTypeFilter | FieldChangedFilter | FieldExpressionFilter))
        /// </para>
        /// </summary>
        public FieldRefDefinition FieldExpressionFilter {
            get {
                XElement x = this.GetElement(XName.Get("FieldExpressionFilter", "http://schemas.microsoft.com/sharepoint/"));
                return ((FieldRefDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("FieldExpressionFilter", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Scope {
            get {
                XAttribute x = this.Attribute(XName.Get("Scope", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Scope", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EventType {
            get {
                XAttribute x = this.Attribute(XName.Get("EventType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EventType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ItemEventDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ItemEventDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ContentTypeFilter", "http://schemas.microsoft.com/sharepoint/"), typeof(ContentTypeFilterDefinition));
            localElementDictionary.Add(XName.Get("FieldChangedFilter", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldChangedFilterDefinition));
            localElementDictionary.Add(XName.Get("FieldExpressionFilter", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldRefDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class ItemEventScope {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Web",
                        "List",
                        "ContentType"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ItemEventScope() {
        }
    }
    
    public partial class EventDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator EventDefinition(XElement xe) { return XTypedServices.ToXTypedElement<EventDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public EventDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReceiverAssembly {
            get {
                XAttribute x = this.Attribute(XName.Get("ReceiverAssembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReceiverAssembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReceiverClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ReceiverClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReceiverClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReceiverData {
            get {
                XAttribute x = this.Attribute(XName.Get("ReceiverData", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReceiverData", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("EventDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EventDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class ItemEventType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ItemAdding",
                        "ItemAdded",
                        "ItemUpdating",
                        "ItemUpdated",
                        "ItemDeleting",
                        "ItemDeleted",
                        "ItemCheckingIn",
                        "ItemCheckedIn",
                        "ItemCheckingOut",
                        "ItemUncheckingIn",
                        "ItemUncheckingOut",
                        "ItemMoving",
                        "ItemMoved",
                        "ItemFileUpdating",
                        "ItemFileUpdated",
                        "ItemFileRenaming",
                        "ItemFileRenamed",
                        "ItemFileReceiving",
                        "ItemFileReceived",
                        "ItemAttachmentAdding",
                        "ItemAttachmentAdded",
                        "ItemAttachmentDeleting",
                        "ItemAttachmentDeleted"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ItemEventType() {
        }
    }
    
    public partial class ContentTypeFilterDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ContentTypeFilterDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeFilterDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ContentTypeFilterDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ContentTypeId {
            get {
                XAttribute x = this.Attribute(XName.Get("ContentTypeId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ContentTypeId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContentTypeFilterDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeFilterDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FieldChangedFilterDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator FieldChangedFilterDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldChangedFilterDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FieldChangedFilterDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FieldId {
            get {
                XAttribute x = this.Attribute(XName.Get("FieldId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FieldId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FieldChangedFilterDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldChangedFilterDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FieldExpressionFilterDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator FieldExpressionFilterDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldExpressionFilterDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FieldExpressionFilterDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FieldId {
            get {
                XAttribute x = this.Attribute(XName.Get("FieldId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FieldId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Expression {
            get {
                XAttribute x = this.Attribute(XName.Get("Expression", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Expression", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FieldValue {
            get {
                XAttribute x = this.Attribute(XName.Get("FieldValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FieldValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FieldExpressionFilterDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldExpressionFilterDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class FieldControlImplementationType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Caml",
                        "Control"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FieldControlImplementationType() {
        }
    }
    
    public sealed class TRUEFALSEorResource {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "TRUE",
                        "FALSE",
                        "true",
                        "false",
                        "$Resources:core,True_Unless_Jpn"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TRUEFALSEorResource() {
        }
    }
    
    public partial class CTFieldRefDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator CTFieldRefDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CTFieldRefDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CTFieldRefDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DefaultValue {
            get {
                XAttribute x = this.Attribute(XName.Get("DefaultValue", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DefaultValue", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisplayName {
            get {
                XAttribute x = this.Attribute(XName.Get("DisplayName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisplayName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Format {
            get {
                XAttribute x = this.Attribute(XName.Get("Format", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Format", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Filterable {
            get {
                XAttribute x = this.Attribute(XName.Get("Filterable", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Filterable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FilterableNoRecurrence {
            get {
                XAttribute x = this.Attribute(XName.Get("FilterableNoRecurrence", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FilterableNoRecurrence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FromBaseType {
            get {
                XAttribute x = this.Attribute(XName.Get("FromBaseType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FromBaseType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Hidden {
            get {
                XAttribute x = this.Attribute(XName.Get("Hidden", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Hidden", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Locked {
            get {
                XAttribute x = this.Attribute(XName.Get("Locked", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Locked", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Node {
            get {
                XAttribute x = this.Attribute(XName.Get("Node", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Node", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<long> NumLines {
            get {
                XAttribute x = this.Attribute(XName.Get("NumLines", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NumLines", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @ReadOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("ReadOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReadOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReadOnlyClient {
            get {
                XAttribute x = this.Attribute(XName.Get("ReadOnlyClient", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ReadOnlyClient", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Required {
            get {
                XAttribute x = this.Attribute(XName.Get("Required", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Required", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Sealed {
            get {
                XAttribute x = this.Attribute(XName.Get("Sealed", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sealed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInDisplayForm {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInDisplayForm", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInDisplayForm", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInEditForm {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInEditForm", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInEditForm", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInFileDlg {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInFileDlg", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInFileDlg", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInListSettings {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInListSettings", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInListSettings", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ShowInNewForm {
            get {
                XAttribute x = this.Attribute(XName.Get("ShowInNewForm", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ShowInNewForm", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Sortable {
            get {
                XAttribute x = this.Attribute(XName.Get("Sortable", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sortable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Customization {
            get {
                XAttribute x = this.Attribute(XName.Get("Customization", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Customization", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PIAttribute {
            get {
                XAttribute x = this.Attribute(XName.Get("PIAttribute", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PIAttribute", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PITarget {
            get {
                XAttribute x = this.Attribute(XName.Get("PITarget", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PITarget", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PrimaryPIAttribute {
            get {
                XAttribute x = this.Attribute(XName.Get("PrimaryPIAttribute", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PrimaryPIAttribute", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PrimaryPITarget {
            get {
                XAttribute x = this.Attribute(XName.Get("PrimaryPITarget", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PrimaryPITarget", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Aggregation {
            get {
                XAttribute x = this.Attribute(XName.Get("Aggregation", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Aggregation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CTFieldRefDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CTFieldRefDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldRef* | RemoveFieldRef* | DocumentTemplate)*)
    /// </para>
    /// </summary>
    public partial class CTFieldRefDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CTFieldRefDefinition> FieldRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CTFieldRefDefinition> RemoveFieldRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DocumentTemplateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator CTFieldRefDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<CTFieldRefDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CTFieldRefDefinitions() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldRef* | RemoveFieldRef* | DocumentTemplate)*)
        /// </para>
        /// </summary>
        public CTFieldRefDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef* | RemoveFieldRef* | DocumentTemplate)*)
        /// </para>
        /// </summary>
        public IList<CTFieldRefDefinition> FieldRef {
            get {
                if ((this.FieldRefField == null)) {
                    this.FieldRefField = new XTypedList<CTFieldRefDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldRefField;
            }
            set {
                if ((value == null)) {
                    this.FieldRefField = null;
                }
                else {
                    if ((this.FieldRefField == null)) {
                        this.FieldRefField = XTypedList<CTFieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CTFieldRefDefinition>(this.FieldRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef* | RemoveFieldRef* | DocumentTemplate)*)
        /// </para>
        /// </summary>
        public IList<CTFieldRefDefinition> RemoveFieldRef {
            get {
                if ((this.RemoveFieldRefField == null)) {
                    this.RemoveFieldRefField = new XTypedList<CTFieldRefDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("RemoveFieldRef", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.RemoveFieldRefField;
            }
            set {
                if ((value == null)) {
                    this.RemoveFieldRefField = null;
                }
                else {
                    if ((this.RemoveFieldRefField == null)) {
                        this.RemoveFieldRefField = XTypedList<CTFieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("RemoveFieldRef", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<CTFieldRefDefinition>(this.RemoveFieldRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef* | RemoveFieldRef* | DocumentTemplate)*)
        /// </para>
        /// </summary>
        public IList<string> DocumentTemplate {
            get {
                if ((this.DocumentTemplateField == null)) {
                    this.DocumentTemplateField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("DocumentTemplate", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.DocumentTemplateField;
            }
            set {
                if ((value == null)) {
                    this.DocumentTemplateField = null;
                }
                else {
                    if ((this.DocumentTemplateField == null)) {
                        this.DocumentTemplateField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("DocumentTemplate", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DocumentTemplateField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CTFieldRefDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CTFieldRefDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"), typeof(CTFieldRefDefinition));
            localElementDictionary.Add(XName.Get("RemoveFieldRef", "http://schemas.microsoft.com/sharepoint/"), typeof(CTFieldRefDefinition));
            localElementDictionary.Add(XName.Get("DocumentTemplate", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class ContentTypeItemStructure {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ListItem",
                        "Document",
                        "Folder"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ContentTypeItemStructure() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MetaData?)
    /// </para>
    /// </summary>
    public partial class ListDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ListDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ListDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MetaData?)
        /// </para>
        /// </summary>
        public ListDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MetaData?)
        /// </para>
        /// </summary>
        public ListMetaDataDefinition MetaData {
            get {
                XElement x = this.GetElement(XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/"));
                return ((ListMetaDataDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Default {
            get {
                XAttribute x = this.Attribute(XName.Get("Default", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Default", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<long> WebImageWidth {
            get {
                XAttribute x = this.Attribute(XName.Get("WebImageWidth", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("WebImageWidth", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EnableThumbnails {
            get {
                XAttribute x = this.Attribute(XName.Get("EnableThumbnails", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EnableThumbnails", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EnableContentTypes {
            get {
                XAttribute x = this.Attribute(XName.Get("EnableContentTypes", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EnableContentTypes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FolderCreation {
            get {
                XAttribute x = this.Attribute(XName.Get("FolderCreation", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FolderCreation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisableAttachments {
            get {
                XAttribute x = this.Attribute(XName.Get("DisableAttachments", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DisableAttachments", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EventSinkAssembly {
            get {
                XAttribute x = this.Attribute(XName.Get("EventSinkAssembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EventSinkAssembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EventSinkClass {
            get {
                XAttribute x = this.Attribute(XName.Get("EventSinkClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EventSinkClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EventSinkData {
            get {
                XAttribute x = this.Attribute(XName.Get("EventSinkData", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EventSinkData", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OrderedList {
            get {
                XAttribute x = this.Attribute(XName.Get("OrderedList", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OrderedList", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ForceDefaultContentType {
            get {
                XAttribute x = this.Attribute(XName.Get("ForceDefaultContentType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ForceDefaultContentType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PrivateList {
            get {
                XAttribute x = this.Attribute(XName.Get("PrivateList", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("PrivateList", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QuickLaunchUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("QuickLaunchUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QuickLaunchUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RootWebOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("RootWebOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RootWebOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ModeratedList {
            get {
                XAttribute x = this.Attribute(XName.Get("ModeratedList", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ModeratedList", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> DraftVersionVisibility {
            get {
                XAttribute x = this.Attribute(XName.Get("DraftVersionVisibility", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DraftVersionVisibility", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> ThumbnailSize {
            get {
                XAttribute x = this.Attribute(XName.Get("ThumbnailSize", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ThumbnailSize", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> DefaultItemOpen {
            get {
                XAttribute x = this.Attribute(XName.Get("DefaultItemOpen", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DefaultItemOpen", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string VersioningEnabled {
            get {
                XAttribute x = this.Attribute(XName.Get("VersioningEnabled", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("VersioningEnabled", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EnableMinorVersions {
            get {
                XAttribute x = this.Attribute(XName.Get("EnableMinorVersions", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EnableMinorVersions", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ModerationType {
            get {
                XAttribute x = this.Attribute(XName.Get("ModerationType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ModerationType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncode {
            get {
                XAttribute x = this.Attribute(XName.Get("URLEncode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("URLEncode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<long> WebImageHeight {
            get {
                XAttribute x = this.Attribute(XName.Get("WebImageHeight", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("WebImageHeight", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> BaseType {
            get {
                XAttribute x = this.Attribute(XName.Get("BaseType", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BaseType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Direction {
            get {
                XAttribute x = this.Attribute(XName.Get("Direction", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Direction", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ListDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/"), typeof(ListMetaDataDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ContentTypeLink : XTypedElement, IXMetaData {
        
         public static explicit operator ContentTypeLink(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeLink>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ContentTypeLink() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContentTypeLink", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeLink>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ContentTypeLink*)
    /// </para>
    /// </summary>
    public partial class ContentTypeLinks : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContentTypeLink> ContentTypeLinkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ContentTypeLinks(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeLinks>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContentTypeLinks() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ContentTypeLink", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ContentTypeLink*)
        /// </para>
        /// </summary>
        public ContentTypeLinks() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContentTypeLink*)
        /// </para>
        /// </summary>
        public IList<ContentTypeLink> ContentTypeLink {
            get {
                if ((this.ContentTypeLinkField == null)) {
                    this.ContentTypeLinkField = new XTypedList<ContentTypeLink>(this, LinqToXsdTypeManager.Instance, XName.Get("ContentTypeLink", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ContentTypeLinkField;
            }
            set {
                if ((value == null)) {
                    this.ContentTypeLinkField = null;
                }
                else {
                    if ((this.ContentTypeLinkField == null)) {
                        this.ContentTypeLinkField = XTypedList<ContentTypeLink>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ContentTypeLink", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ContentTypeLink>(this.ContentTypeLinkField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContentTypeLinks", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeLinks>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ContentTypeLink", "http://schemas.microsoft.com/sharepoint/"), typeof(ContentTypeLink));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class ViewRegistrationType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "List",
                        "ContentType"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ViewRegistrationType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*)
    /// </para>
    /// </summary>
    public partial class FeaturePropertyDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FeaturePropertyDefinition> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FeaturePropertyDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<FeaturePropertyDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeaturePropertyDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public FeaturePropertyDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public IList<FeaturePropertyDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<FeaturePropertyDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<FeaturePropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FeaturePropertyDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FeaturePropertyDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeaturePropertyDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(FeaturePropertyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class FeaturePropertyDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator FeaturePropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FeaturePropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FeaturePropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Key {
            get {
                XAttribute x = this.Attribute(XName.Get("Key", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Key", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Value {
            get {
                XAttribute x = this.Attribute(XName.Get("Value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FeaturePropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeaturePropertyDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Fields?, Forms?, @Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
    /// </para>
    /// </summary>
    public partial class ListMetaDataDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ListMetaDataDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ListMetaDataDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListMetaDataDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Fields?, Forms?, @Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public ListMetaDataDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, @Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public FieldDefinitions Fields {
            get {
                XElement x = this.GetElement(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"));
                return ((FieldDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, @Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public ListFormSet Forms {
            get {
                XElement x = this.GetElement(XName.Get("Forms", "http://schemas.microsoft.com/sharepoint/"));
                return ((ListFormSet)(x));
            }
            set {
                this.SetElement(XName.Get("Forms", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, @Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public ListMetaDataDefault @Default {
            get {
                XElement x = this.GetElement(XName.Get("Default", "http://schemas.microsoft.com/sharepoint/"));
                return ((ListMetaDataDefault)(x));
            }
            set {
                this.SetElement(XName.Get("Default", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, @Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public string DefaultDescription {
            get {
                XElement x = this.GetElement(XName.Get("DefaultDescription", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("DefaultDescription", "http://schemas.microsoft.com/sharepoint/"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, @Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public ViewDefinitions Views {
            get {
                XElement x = this.GetElement(XName.Get("Views", "http://schemas.microsoft.com/sharepoint/"));
                return ((ViewDefinitions)(x));
            }
            set {
                this.SetElement(XName.Get("Views", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, @Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public ToolbarDefinition Toolbar {
            get {
                XElement x = this.GetElement(XName.Get("Toolbar", "http://schemas.microsoft.com/sharepoint/"));
                return ((ToolbarDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Toolbar", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, @Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public ContentTypeReferences ContentTypes {
            get {
                XElement x = this.GetElement(XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"));
                return ((ContentTypeReferences)(x));
            }
            set {
                this.SetElement(XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, @Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public ValidationDefinition Validation {
            get {
                XElement x = this.GetElement(XName.Get("Validation", "http://schemas.microsoft.com/sharepoint/"));
                return ((ValidationDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Validation", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ListMetaDataDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListMetaDataDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldDefinitions));
            localElementDictionary.Add(XName.Get("Forms", "http://schemas.microsoft.com/sharepoint/"), typeof(ListFormSet));
            localElementDictionary.Add(XName.Get("Default", "http://schemas.microsoft.com/sharepoint/"), typeof(ListMetaDataDefault));
            localElementDictionary.Add(XName.Get("DefaultDescription", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("Views", "http://schemas.microsoft.com/sharepoint/"), typeof(ViewDefinitions));
            localElementDictionary.Add(XName.Get("Toolbar", "http://schemas.microsoft.com/sharepoint/"), typeof(ToolbarDefinition));
            localElementDictionary.Add(XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/"), typeof(ContentTypeReferences));
            localElementDictionary.Add(XName.Get("Validation", "http://schemas.microsoft.com/sharepoint/"), typeof(ValidationDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SafeControl+)
    /// </para>
    /// </summary>
    public partial class SafeControlDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SafeControlDefinition> SafeControlField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator SafeControlDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<SafeControlDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SafeControlDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SafeControl", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SafeControl+)
        /// </para>
        /// </summary>
        public SafeControlDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SafeControl+)
        /// </para>
        /// </summary>
        public IList<SafeControlDefinition> SafeControl {
            get {
                if ((this.SafeControlField == null)) {
                    this.SafeControlField = new XTypedList<SafeControlDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("SafeControl", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.SafeControlField;
            }
            set {
                if ((value == null)) {
                    this.SafeControlField = null;
                }
                else {
                    if ((this.SafeControlField == null)) {
                        this.SafeControlField = XTypedList<SafeControlDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SafeControl", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<SafeControlDefinition>(this.SafeControlField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SafeControlDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SafeControlDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("SafeControl", "http://schemas.microsoft.com/sharepoint/"), typeof(SafeControlDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class SafeControlDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator SafeControlDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SafeControlDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SafeControlDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Assembly {
            get {
                XAttribute x = this.Attribute(XName.Get("Assembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Assembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Namespace {
            get {
                XAttribute x = this.Attribute(XName.Get("Namespace", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TypeName {
            get {
                XAttribute x = this.Attribute(XName.Get("TypeName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TypeName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Safe {
            get {
                XAttribute x = this.Attribute(XName.Get("Safe", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Safe", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SafeAgainstScript {
            get {
                XAttribute x = this.Attribute(XName.Get("SafeAgainstScript", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SafeAgainstScript", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SafeControlDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SafeControlDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (XmlDocument+)
    /// </para>
    /// </summary>
    public partial class XmlDocumentDefinitionCollection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<XmlDocumentDefinition> XmlDocumentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator XmlDocumentDefinitionCollection(XElement xe) { return XTypedServices.ToXTypedElement<XmlDocumentDefinitionCollection>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static XmlDocumentDefinitionCollection() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("XmlDocument", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (XmlDocument+)
        /// </para>
        /// </summary>
        public XmlDocumentDefinitionCollection() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (XmlDocument+)
        /// </para>
        /// </summary>
        public IList<XmlDocumentDefinition> XmlDocument {
            get {
                if ((this.XmlDocumentField == null)) {
                    this.XmlDocumentField = new XTypedList<XmlDocumentDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("XmlDocument", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.XmlDocumentField;
            }
            set {
                if ((value == null)) {
                    this.XmlDocumentField = null;
                }
                else {
                    if ((this.XmlDocumentField == null)) {
                        this.XmlDocumentField = XTypedList<XmlDocumentDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("XmlDocument", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<XmlDocumentDefinition>(this.XmlDocumentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("XmlDocumentDefinitionCollection", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<XmlDocumentDefinitionCollection>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("XmlDocument", "http://schemas.microsoft.com/sharepoint/"), typeof(XmlDocumentDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class XmlDocumentDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
         public static explicit operator XmlDocumentDefinition(XElement xe) { return XTypedServices.ToXTypedElement<XmlDocumentDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static XmlDocumentDefinition() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public XmlDocumentDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string NamespaceURI {
            get {
                XAttribute x = this.Attribute(XName.Get("NamespaceURI", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("NamespaceURI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("XmlDocumentDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<XmlDocumentDefinition>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 2)));
            validationStates = new FSM(1, new Set<int>(2), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*)
    /// </para>
    /// </summary>
    public partial class DelegateControlDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SimplePropertyDefinition> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator DelegateControlDefinition(XElement xe) { return XTypedServices.ToXTypedElement<DelegateControlDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DelegateControlDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public DelegateControlDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public IList<SimplePropertyDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<SimplePropertyDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<SimplePropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<SimplePropertyDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Sequence {
            get {
                XAttribute x = this.Attribute(XName.Get("Sequence", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Sequence", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ControlAssembly {
            get {
                XAttribute x = this.Attribute(XName.Get("ControlAssembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ControlAssembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ControlClass {
            get {
                XAttribute x = this.Attribute(XName.Get("ControlClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ControlClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ControlSrc {
            get {
                XAttribute x = this.Attribute(XName.Get("ControlSrc", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ControlSrc", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DelegateControlDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DelegateControlDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(SimplePropertyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Receiver+)
    /// </para>
    /// </summary>
    public partial class ReceiverDefinitionCollection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReceiverDefinition> ReceiverField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ReceiverDefinitionCollection(XElement xe) { return XTypedServices.ToXTypedElement<ReceiverDefinitionCollection>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReceiverDefinitionCollection() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Receiver", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Receiver+)
        /// </para>
        /// </summary>
        public ReceiverDefinitionCollection() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Receiver+)
        /// </para>
        /// </summary>
        public IList<ReceiverDefinition> Receiver {
            get {
                if ((this.ReceiverField == null)) {
                    this.ReceiverField = new XTypedList<ReceiverDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Receiver", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ReceiverField;
            }
            set {
                if ((value == null)) {
                    this.ReceiverField = null;
                }
                else {
                    if ((this.ReceiverField == null)) {
                        this.ReceiverField = XTypedList<ReceiverDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Receiver", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ReceiverDefinition>(this.ReceiverField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> ListTemplateId {
            get {
                XAttribute x = this.Attribute(XName.Get("ListTemplateId", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ListTemplateId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ListUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("ListUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ListUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ListTemplateOwner {
            get {
                XAttribute x = this.Attribute(XName.Get("ListTemplateOwner", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ListTemplateOwner", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RootWebOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("RootWebOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RootWebOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Scope {
            get {
                XAttribute x = this.Attribute(XName.Get("Scope", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Scope", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReceiverDefinitionCollection", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReceiverDefinitionCollection>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Receiver", "http://schemas.microsoft.com/sharepoint/"), typeof(ReceiverDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, @Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
    /// </para>
    /// </summary>
    public partial class ReceiverDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ReceiverDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ReceiverDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReceiverDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, @Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public ReceiverDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, @Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public string Name {
            get {
                XElement x = this.GetElement(XName.Get("Name", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Name", "http://schemas.microsoft.com/sharepoint/"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, @Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public string Synchronization {
            get {
                XElement x = this.GetElement(XName.Get("Synchronization", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("Synchronization", "http://schemas.microsoft.com/sharepoint/"), value, "Synchronization", global::Microsoft.Schemas.SharePoint.EventReceiverSynchronization.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, @Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public string Type {
            get {
                XElement x = this.GetElement(XName.Get("Type", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("Type", "http://schemas.microsoft.com/sharepoint/"), value, "Type", global::Microsoft.Schemas.SharePoint.EventReceiverType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, @Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public string SequenceNumber {
            get {
                XElement x = this.GetElement(XName.Get("SequenceNumber", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("SequenceNumber", "http://schemas.microsoft.com/sharepoint/"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, @Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public string Assembly {
            get {
                XElement x = this.GetElement(XName.Get("Assembly", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Assembly", "http://schemas.microsoft.com/sharepoint/"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, @Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public string @Class {
            get {
                XElement x = this.GetElement(XName.Get("Class", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Class", "http://schemas.microsoft.com/sharepoint/"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, @Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public string Data {
            get {
                XElement x = this.GetElement(XName.Get("Data", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Data", "http://schemas.microsoft.com/sharepoint/"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, @Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public string Filter {
            get {
                XElement x = this.GetElement(XName.Get("Filter", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("Filter", "http://schemas.microsoft.com/sharepoint/"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, @Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public string SolutionId {
            get {
                XElement x = this.GetElement(XName.Get("SolutionId", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(XName.Get("SolutionId", "http://schemas.microsoft.com/sharepoint/"), value, "SolutionId", global::Microsoft.Schemas.SharePoint.UniqueIdentifier.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, @Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public string SourceId {
            get {
                XElement x = this.GetElement(XName.Get("SourceId", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("SourceId", "http://schemas.microsoft.com/sharepoint/"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, @Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public string SourceType {
            get {
                XElement x = this.GetElement(XName.Get("SourceType", "http://schemas.microsoft.com/sharepoint/"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("SourceType", "http://schemas.microsoft.com/sharepoint/"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ReceiverDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReceiverDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Name", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("Synchronization", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("Type", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("SequenceNumber", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("Assembly", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("Class", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("Data", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("Filter", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("SolutionId", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("SourceId", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("SourceType", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UserMigratorDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator UserMigratorDefinition(XElement xe) { return XTypedServices.ToXTypedElement<UserMigratorDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UserMigratorDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Assembly {
            get {
                XAttribute x = this.Attribute(XName.Get("Assembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Assembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Class {
            get {
                XAttribute x = this.Attribute(XName.Get("Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("UserMigratorDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserMigratorDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class GroupMigratorDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator GroupMigratorDefinition(XElement xe) { return XTypedServices.ToXTypedElement<GroupMigratorDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GroupMigratorDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Assembly {
            get {
                XAttribute x = this.Attribute(XName.Get("Assembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Assembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Class {
            get {
                XAttribute x = this.Attribute(XName.Get("Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("GroupMigratorDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroupMigratorDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SimplePropertyDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator SimplePropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SimplePropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SimplePropertyDefinition() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SimplePropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SimplePropertyDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class WebPartAdderExtensionDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator WebPartAdderExtensionDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WebPartAdderExtensionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WebPartAdderExtensionDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Assembly {
            get {
                XAttribute x = this.Attribute(XName.Get("Assembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Assembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string @Class {
            get {
                XAttribute x = this.Attribute(XName.Get("Class", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Class", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("WebPartAdderExtensionDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebPartAdderExtensionDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class PropertyBagType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "int",
                        "string",
                        "DateTime"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PropertyBagType() {
        }
    }
    
    public partial class PropertyValueAttributeDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator PropertyValueAttributeDefinition(XElement xe) { return XTypedServices.ToXTypedElement<PropertyValueAttributeDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PropertyValueAttributeDefinition() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Value {
            get {
                XAttribute x = this.Attribute(XName.Get("Value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PropertyValueAttributeDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PropertyValueAttributeDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ContentTypeDocumentTemplateDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ContentTypeDocumentTemplateDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeDocumentTemplateDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ContentTypeDocumentTemplateDefinition() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TargetName {
            get {
                XAttribute x = this.Attribute(XName.Get("TargetName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TargetName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContentTypeDocumentTemplateDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeDocumentTemplateDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Data? | DataSource?)
    /// </para>
    /// </summary>
    public partial class ListInstanceDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ListInstanceDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ListInstanceDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListInstanceDefinition() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(XName.Get("Data", "http://schemas.microsoft.com/sharepoint/")), new NamedContentModelEntity(XName.Get("DataSource", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Data? | DataSource?)
        /// </para>
        /// </summary>
        public ListInstanceDefinition() {
        }
        
        public ListInstanceDefinition(DataDefinition Data) {
            this.Data = Data;
        }
        
        public ListInstanceDefinition(ListDataSourceDefinition DataSource) {
            this.DataSource = DataSource;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Data? | DataSource?)
        /// </para>
        /// </summary>
        public DataDefinition Data {
            get {
                XElement x = this.GetElement(XName.Get("Data", "http://schemas.microsoft.com/sharepoint/"));
                return ((DataDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("Data", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Data? | DataSource?)
        /// </para>
        /// </summary>
        public ListDataSourceDefinition DataSource {
            get {
                XElement x = this.GetElement(XName.Get("DataSource", "http://schemas.microsoft.com/sharepoint/"));
                return ((ListDataSourceDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("DataSource", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FeatureId {
            get {
                XAttribute x = this.Attribute(XName.Get("FeatureId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("FeatureId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OnQuickLaunch {
            get {
                XAttribute x = this.Attribute(XName.Get("OnQuickLaunch", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OnQuickLaunch", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RootWebOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("RootWebOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RootWebOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QuickLaunchUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("QuickLaunchUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("QuickLaunchUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DocumentTemplate {
            get {
                XAttribute x = this.Attribute(XName.Get("DocumentTemplate", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("DocumentTemplate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> TemplateType {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateType", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CustomSchema {
            get {
                XAttribute x = this.Attribute(XName.Get("CustomSchema", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CustomSchema", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HyperlinkBaseUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("HyperlinkBaseUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HyperlinkBaseUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string VersioningEnabled {
            get {
                XAttribute x = this.Attribute(XName.Get("VersioningEnabled", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("VersioningEnabled", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Hidden {
            get {
                XAttribute x = this.Attribute(XName.Get("Hidden", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Hidden", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ListInstanceDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListInstanceDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Data", "http://schemas.microsoft.com/sharepoint/"), typeof(DataDefinition));
            localElementDictionary.Add(XName.Get("DataSource", "http://schemas.microsoft.com/sharepoint/"), typeof(ListDataSourceDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class ListTemplateCategoryType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Libraries",
                        "Communications",
                        "Tracking",
                        "Custom Lists"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ListTemplateCategoryType() {
        }
    }
    
    public sealed class SolutionDeploymentTargetType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "GlobalAssemblyCache",
                        "WebApplication"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SolutionDeploymentTargetType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class WorkflowMetadata : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
         public static explicit operator WorkflowMetadata(XElement xe) { return XTypedServices.ToXTypedElement<WorkflowMetadata>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WorkflowMetadata() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public WorkflowMetadata() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("WorkflowMetadata", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WorkflowMetadata>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AssociationData?, MetaData?, Categories?)
    /// </para>
    /// </summary>
    public partial class WorkflowDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator WorkflowDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WorkflowDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WorkflowDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AssociationData?, MetaData?, Categories?)
        /// </para>
        /// </summary>
        public WorkflowDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AssociationData?, MetaData?, Categories?)
        /// </para>
        /// </summary>
        public XTypedElement AssociationData {
            get {
                XElement x = this.GetElement(XName.Get("AssociationData", "http://schemas.microsoft.com/sharepoint/"));
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(XName.Get("AssociationData", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AssociationData?, MetaData?, Categories?)
        /// </para>
        /// </summary>
        public WorkflowMetadata MetaData {
            get {
                XElement x = this.GetElement(XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/"));
                return ((WorkflowMetadata)(x));
            }
            set {
                this.SetElement(XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AssociationData?, MetaData?, Categories?)
        /// </para>
        /// </summary>
        public XTypedElement Categories {
            get {
                XElement x = this.GetElement(XName.Get("Categories", "http://schemas.microsoft.com/sharepoint/"));
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(XName.Get("Categories", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                XAttribute x = this.Attribute(XName.Get("Title", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Title", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CodeBesideAssembly {
            get {
                XAttribute x = this.Attribute(XName.Get("CodeBesideAssembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CodeBesideAssembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CodeBesideClass {
            get {
                XAttribute x = this.Attribute(XName.Get("CodeBesideClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CodeBesideClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EngineClass {
            get {
                XAttribute x = this.Attribute(XName.Get("EngineClass", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EngineClass", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EngineAssembly {
            get {
                XAttribute x = this.Attribute(XName.Get("EngineAssembly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("EngineAssembly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AssociationUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("AssociationUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AssociationUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string InstantiationUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("InstantiationUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("InstantiationUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ModificationUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("ModificationUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ModificationUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string StatusUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("StatusUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("StatusUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TaskListContentTypeId {
            get {
                XAttribute x = this.Attribute(XName.Get("TaskListContentTypeId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TaskListContentTypeId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("WorkflowDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WorkflowDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("AssociationData", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
            localElementDictionary.Add(XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/"), typeof(WorkflowMetadata));
            localElementDictionary.Add(XName.Get("Categories", "http://schemas.microsoft.com/sharepoint/"), typeof(XTypedElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class WebTempFileDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator WebTempFileDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WebTempFileDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WebTempFileDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("WebTempFileDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebTempFileDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ApplicationResourceFile | App_GlobalResourceFile)+)
    /// </para>
    /// </summary>
    public partial class ApplicationResourceFileDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ApplicationResourceFileDefinition> ApplicationResourceFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<App_GlobalResourceFileDefinition> App_GlobalResourceFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ApplicationResourceFileDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ApplicationResourceFileDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ApplicationResourceFileDefinitions() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ApplicationResourceFile | App_GlobalResourceFile)+)
        /// </para>
        /// </summary>
        public ApplicationResourceFileDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ApplicationResourceFile | App_GlobalResourceFile)+)
        /// </para>
        /// </summary>
        public IList<ApplicationResourceFileDefinition> ApplicationResourceFile {
            get {
                if ((this.ApplicationResourceFileField == null)) {
                    this.ApplicationResourceFileField = new XTypedList<ApplicationResourceFileDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ApplicationResourceFile", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ApplicationResourceFileField;
            }
            set {
                if ((value == null)) {
                    this.ApplicationResourceFileField = null;
                }
                else {
                    if ((this.ApplicationResourceFileField == null)) {
                        this.ApplicationResourceFileField = XTypedList<ApplicationResourceFileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ApplicationResourceFile", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ApplicationResourceFileDefinition>(this.ApplicationResourceFileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ApplicationResourceFile | App_GlobalResourceFile)+)
        /// </para>
        /// </summary>
        public IList<App_GlobalResourceFileDefinition> App_GlobalResourceFile {
            get {
                if ((this.App_GlobalResourceFileField == null)) {
                    this.App_GlobalResourceFileField = new XTypedList<App_GlobalResourceFileDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("App_GlobalResourceFile", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.App_GlobalResourceFileField;
            }
            set {
                if ((value == null)) {
                    this.App_GlobalResourceFileField = null;
                }
                else {
                    if ((this.App_GlobalResourceFileField == null)) {
                        this.App_GlobalResourceFileField = XTypedList<App_GlobalResourceFileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("App_GlobalResourceFile", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<App_GlobalResourceFileDefinition>(this.App_GlobalResourceFileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ApplicationResourceFileDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ApplicationResourceFileDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ApplicationResourceFile", "http://schemas.microsoft.com/sharepoint/"), typeof(ApplicationResourceFileDefinition));
            localElementDictionary.Add(XName.Get("App_GlobalResourceFile", "http://schemas.microsoft.com/sharepoint/"), typeof(App_GlobalResourceFileDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ApplicationResourceFileDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ApplicationResourceFileDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ApplicationResourceFileDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ApplicationResourceFileDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ApplicationResourceFileDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ApplicationResourceFileDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class App_GlobalResourceFileDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator App_GlobalResourceFileDefinition(XElement xe) { return XTypedServices.ToXTypedElement<App_GlobalResourceFileDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public App_GlobalResourceFileDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("App_GlobalResourceFileDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<App_GlobalResourceFileDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ResourceDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ResourceDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ResourceDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ResourceDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Location {
            get {
                XAttribute x = this.Attribute(XName.Get("Location", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Location", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Resource+)
    /// </para>
    /// </summary>
    public partial class ResourceDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceDefinition> ResourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ResourceDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ResourceDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResourceDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Resource", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Resource+)
        /// </para>
        /// </summary>
        public ResourceDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Resource+)
        /// </para>
        /// </summary>
        public IList<ResourceDefinition> Resource {
            get {
                if ((this.ResourceField == null)) {
                    this.ResourceField = new XTypedList<ResourceDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Resource", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ResourceField;
            }
            set {
                if ((value == null)) {
                    this.ResourceField = null;
                }
                else {
                    if ((this.ResourceField == null)) {
                        this.ResourceField = XTypedList<ResourceDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Resource", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ResourceDefinition>(this.ResourceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ResourceDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Resource", "http://schemas.microsoft.com/sharepoint/"), typeof(ResourceDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class DocumentConverterDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator DocumentConverterDefinition(XElement xe) { return XTypedServices.ToXTypedElement<DocumentConverterDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public DocumentConverterDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string App {
            get {
                XAttribute x = this.Attribute(XName.Get("App", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("App", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string From {
            get {
                XAttribute x = this.Attribute(XName.Get("From", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("From", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string To {
            get {
                XAttribute x = this.Attribute(XName.Get("To", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("To", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ConverterUIPage {
            get {
                XAttribute x = this.Attribute(XName.Get("ConverterUIPage", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ConverterUIPage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ConverterSpecificSettingsUI {
            get {
                XAttribute x = this.Attribute(XName.Get("ConverterSpecificSettingsUI", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ConverterSpecificSettingsUI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ConverterSettingsForContentType {
            get {
                XAttribute x = this.Attribute(XName.Get("ConverterSettingsForContentType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ConverterSettingsForContentType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("DocumentConverterDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DocumentConverterDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*)
    /// </para>
    /// </summary>
    public partial class FeatureSiteTemplateAssociationDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FeaturePropertyDefinition> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator FeatureSiteTemplateAssociationDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FeatureSiteTemplateAssociationDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeatureSiteTemplateAssociationDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public FeatureSiteTemplateAssociationDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public IList<FeaturePropertyDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<FeaturePropertyDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<FeaturePropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<FeaturePropertyDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TemplateName {
            get {
                XAttribute x = this.Attribute(XName.Get("TemplateName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TemplateName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FeatureSiteTemplateAssociationDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureSiteTemplateAssociationDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(FeaturePropertyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ContentTypeBindingDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ContentTypeBindingDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeBindingDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ContentTypeBindingDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ContentTypeId {
            get {
                XAttribute x = this.Attribute(XName.Get("ContentTypeId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ContentTypeId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ListUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("ListUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ListUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RootWebOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("RootWebOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RootWebOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContentTypeBindingDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeBindingDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class ContentTypeId {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private ContentTypeId() {
        }
    }
    
    public partial class ServerEmailFooterDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ServerEmailFooterDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ServerEmailFooterDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ServerEmailFooterDefinition() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ServerEmailFooterDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ServerEmailFooterDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ContentTypeRef | ContentType)*)
    /// </para>
    /// </summary>
    public partial class ContentTypeReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContentTypeReference> ContentTypeRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContentTypeDefinition> ContentTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ContentTypeReferences(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContentTypeReferences() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ContentTypeRef | ContentType)*)
        /// </para>
        /// </summary>
        public ContentTypeReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentTypeRef | ContentType)*)
        /// </para>
        /// </summary>
        public IList<ContentTypeReference> ContentTypeRef {
            get {
                if ((this.ContentTypeRefField == null)) {
                    this.ContentTypeRefField = new XTypedList<ContentTypeReference>(this, LinqToXsdTypeManager.Instance, XName.Get("ContentTypeRef", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ContentTypeRefField;
            }
            set {
                if ((value == null)) {
                    this.ContentTypeRefField = null;
                }
                else {
                    if ((this.ContentTypeRefField == null)) {
                        this.ContentTypeRefField = XTypedList<ContentTypeReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ContentTypeRef", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ContentTypeReference>(this.ContentTypeRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentTypeRef | ContentType)*)
        /// </para>
        /// </summary>
        public IList<ContentTypeDefinition> ContentType {
            get {
                if ((this.ContentTypeField == null)) {
                    this.ContentTypeField = new XTypedList<ContentTypeDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ContentTypeField;
            }
            set {
                if ((value == null)) {
                    this.ContentTypeField = null;
                }
                else {
                    if ((this.ContentTypeField == null)) {
                        this.ContentTypeField = XTypedList<ContentTypeDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ContentTypeDefinition>(this.ContentTypeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContentTypeReferences", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ContentTypeRef", "http://schemas.microsoft.com/sharepoint/"), typeof(ContentTypeReference));
            localElementDictionary.Add(XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/"), typeof(ContentTypeDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Folder?)
    /// </para>
    /// </summary>
    public partial class ContentTypeReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ContentTypeReference(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContentTypeReference() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Folder", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Folder?)
        /// </para>
        /// </summary>
        public ContentTypeReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder?)
        /// </para>
        /// </summary>
        public FolderReference Folder {
            get {
                XElement x = this.GetElement(XName.Get("Folder", "http://schemas.microsoft.com/sharepoint/"));
                return ((FolderReference)(x));
            }
            set {
                this.SetElement(XName.Get("Folder", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ContentTypeReference", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Folder", "http://schemas.microsoft.com/sharepoint/"), typeof(FolderReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class FolderReference : XTypedElement, IXMetaData {
        
         public static explicit operator FolderReference(XElement xe) { return XTypedServices.ToXTypedElement<FolderReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FolderReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TargetName {
            get {
                XAttribute x = this.Attribute(XName.Get("TargetName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TargetName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FolderReference", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FolderReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
    /// </para>
    /// </summary>
    public partial class SharedFieldDefinition : global::Microsoft.Schemas.SharePoint.FieldDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator SharedFieldDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SharedFieldDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SharedFieldDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, @Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public SharedFieldDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public new string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public new string Group {
            get {
                XAttribute x = this.Attribute(XName.Get("Group", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Group", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public new System.Nullable<int> MaxLength {
            get {
                XAttribute x = this.Attribute(XName.Get("MaxLength", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("MaxLength", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public new string SourceID {
            get {
                XAttribute x = this.Attribute(XName.Get("SourceID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("SourceID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public new string StaticName {
            get {
                XAttribute x = this.Attribute(XName.Get("StaticName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("StaticName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Overwrite {
            get {
                XAttribute x = this.Attribute(XName.Get("Overwrite", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Overwrite", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OverwriteInChildScopes {
            get {
                XAttribute x = this.Attribute(XName.Get("OverwriteInChildScopes", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("OverwriteInChildScopes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("SharedFieldDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SharedFieldDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FieldRefs", "http://schemas.microsoft.com/sharepoint/"), typeof(FieldRefDefinitions));
            localElementDictionary.Add(XName.Get("DisplayPattern", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("DisplayBidiPattern", "http://schemas.microsoft.com/sharepoint/"), typeof(CamlViewRoot));
            localElementDictionary.Add(XName.Get("CHOICES", "http://schemas.microsoft.com/sharepoint/"), typeof(CHOICEDEFINITIONS));
            localElementDictionary.Add(XName.Get("MAPPINGS", "http://schemas.microsoft.com/sharepoint/"), typeof(MAPPINGDEFINITIONS));
            localElementDictionary.Add(XName.Get("Default", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("Formula", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("FormulaDisplayNames", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("DefaultFormula", "http://schemas.microsoft.com/sharepoint/"), typeof(string));
            localElementDictionary.Add(XName.Get("Validation", "http://schemas.microsoft.com/sharepoint/"), typeof(ValidationDefinition));
            localElementDictionary.Add(XName.Get("Customization", "http://schemas.microsoft.com/sharepoint/"), typeof(CustomizationDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ExecuteUrlDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ExecuteUrlDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ExecuteUrlDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ExecuteUrlDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ExecuteUrlDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExecuteUrlDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FileDialogPostProcessorDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator FileDialogPostProcessorDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FileDialogPostProcessorDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FileDialogPostProcessorDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("FileDialogPostProcessorDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FileDialogPostProcessorDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ExternalSecurityProviderDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ExternalSecurityProviderDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ExternalSecurityProviderDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ExternalSecurityProviderDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ID {
            get {
                XAttribute x = this.Attribute(XName.Get("ID", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ID", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ExternalSecurityProviderDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExternalSecurityProviderDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ExternalSecurityProvider?, FileDialogPostProcessor?)
    /// </para>
    /// </summary>
    public partial class ComponentsDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator ComponentsDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ComponentsDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ComponentsDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ExternalSecurityProvider?, FileDialogPostProcessor?)
        /// </para>
        /// </summary>
        public ComponentsDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExternalSecurityProvider?, FileDialogPostProcessor?)
        /// </para>
        /// </summary>
        public ExternalSecurityProviderDefinition ExternalSecurityProvider {
            get {
                XElement x = this.GetElement(XName.Get("ExternalSecurityProvider", "http://schemas.microsoft.com/sharepoint/"));
                return ((ExternalSecurityProviderDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("ExternalSecurityProvider", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExternalSecurityProvider?, FileDialogPostProcessor?)
        /// </para>
        /// </summary>
        public FileDialogPostProcessorDefinition FileDialogPostProcessor {
            get {
                XElement x = this.GetElement(XName.Get("FileDialogPostProcessor", "http://schemas.microsoft.com/sharepoint/"));
                return ((FileDialogPostProcessorDefinition)(x));
            }
            set {
                this.SetElement(XName.Get("FileDialogPostProcessor", "http://schemas.microsoft.com/sharepoint/"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ComponentsDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ComponentsDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ExternalSecurityProvider", "http://schemas.microsoft.com/sharepoint/"), typeof(ExternalSecurityProviderDefinition));
            localElementDictionary.Add(XName.Get("FileDialogPostProcessor", "http://schemas.microsoft.com/sharepoint/"), typeof(FileDialogPostProcessorDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class CTFolderDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator CTFolderDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CTFolderDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CTFolderDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TargetName {
            get {
                XAttribute x = this.Attribute(XName.Get("TargetName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TargetName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CTFolderDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CTFolderDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ViewDataFieldRefDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ViewDataFieldRefDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ViewDataFieldRefDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ViewDataFieldRefDefinition() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Type {
            get {
                XAttribute x = this.Attribute(XName.Get("Type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ViewDataFieldRefDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ViewDataFieldRefDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldRef*)
    /// </para>
    /// </summary>
    public partial class ViewDataFieldRefDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ViewDataFieldRefDefinition> FieldRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ViewDataFieldRefDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ViewDataFieldRefDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ViewDataFieldRefDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldRef*)
        /// </para>
        /// </summary>
        public ViewDataFieldRefDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FieldRef*)
        /// </para>
        /// </summary>
        public IList<ViewDataFieldRefDefinition> FieldRef {
            get {
                if ((this.FieldRefField == null)) {
                    this.FieldRefField = new XTypedList<ViewDataFieldRefDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.FieldRefField;
            }
            set {
                if ((value == null)) {
                    this.FieldRefField = null;
                }
                else {
                    if ((this.FieldRefField == null)) {
                        this.FieldRefField = XTypedList<ViewDataFieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ViewDataFieldRefDefinition>(this.FieldRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ViewDataFieldRefDefinitions", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ViewDataFieldRefDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/"), typeof(ViewDataFieldRefDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ValidationDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator ValidationDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ValidationDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ValidationDefinition() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Message {
            get {
                XAttribute x = this.Attribute(XName.Get("Message", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Message", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Script {
            get {
                XAttribute x = this.Attribute(XName.Get("Script", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Script", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ValidationDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValidationDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class WorkflowAssociationDefinition : XTypedElement, IXMetaData {
        
         public static explicit operator WorkflowAssociationDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WorkflowAssociationDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WorkflowAssociationDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                XAttribute x = this.Attribute(XName.Get("Description", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string BaseTemplateId {
            get {
                XAttribute x = this.Attribute(XName.Get("BaseTemplateId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("BaseTemplateId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ParentContentType {
            get {
                XAttribute x = this.Attribute(XName.Get("ParentContentType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ParentContentType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ParentList {
            get {
                XAttribute x = this.Attribute(XName.Get("ParentList", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ParentList", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ParentWeb {
            get {
                XAttribute x = this.Attribute(XName.Get("ParentWeb", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ParentWeb", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RootWebOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("RootWebOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RootWebOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TaskList {
            get {
                XAttribute x = this.Attribute(XName.Get("TaskList", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TaskList", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string TaskListTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("TaskListTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("TaskListTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HistoryList {
            get {
                XAttribute x = this.Attribute(XName.Get("HistoryList", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HistoryList", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HistoryListTitle {
            get {
                XAttribute x = this.Attribute(XName.Get("HistoryListTitle", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HistoryListTitle", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string StatusColumnShown {
            get {
                XAttribute x = this.Attribute(XName.Get("StatusColumnShown", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("StatusColumnShown", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string InternalNameStatusField {
            get {
                XAttribute x = this.Attribute(XName.Get("InternalNameStatusField", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("InternalNameStatusField", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RequireManagePermission {
            get {
                XAttribute x = this.Attribute(XName.Get("RequireManagePermission", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RequireManagePermission", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Configuration {
            get {
                XAttribute x = this.Attribute(XName.Get("Configuration", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Configuration", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AssociationData {
            get {
                XAttribute x = this.Attribute(XName.Get("AssociationData", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("AssociationData", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CategoryName {
            get {
                XAttribute x = this.Attribute(XName.Get("CategoryName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("CategoryName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ContentTypeName {
            get {
                XAttribute x = this.Attribute(XName.Get("ContentTypeName", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ContentTypeName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ContentTypeId {
            get {
                XAttribute x = this.Attribute(XName.Get("ContentTypeId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ContentTypeId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("WorkflowAssociationDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WorkflowAssociationDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*)
    /// </para>
    /// </summary>
    public partial class PropertyBagDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyValueAttributeDefinition> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator PropertyBagDefinition(XElement xe) { return XTypedServices.ToXTypedElement<PropertyBagDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PropertyBagDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public PropertyBagDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public IList<PropertyValueAttributeDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyValueAttributeDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyValueAttributeDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<PropertyValueAttributeDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ItemIndex {
            get {
                XAttribute x = this.Attribute(XName.Get("ItemIndex", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ItemIndex", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                XAttribute x = this.Attribute(XName.Get("Url", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Url", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string ParentType {
            get {
                XAttribute x = this.Attribute(XName.Get("ParentType", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("ParentType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RootWebOnly {
            get {
                XAttribute x = this.Attribute(XName.Get("RootWebOnly", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("RootWebOnly", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string HyperlinkBaseUrl {
            get {
                XAttribute x = this.Attribute(XName.Get("HyperlinkBaseUrl", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("HyperlinkBaseUrl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PropertyBagDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PropertyBagDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(PropertyValueAttributeDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class PropertyBagParentTypeDefinition {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Web",
                        "Folder",
                        "ListItem",
                        "File"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PropertyBagParentTypeDefinition() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Action*)
    /// </para>
    /// </summary>
    public partial class WorkflowActionsDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<actionType> ActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator WorkflowActionsDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WorkflowActionsDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WorkflowActionsDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Action", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Action*)
        /// </para>
        /// </summary>
        public WorkflowActionsDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Action*)
        /// </para>
        /// </summary>
        public IList<actionType> Action {
            get {
                if ((this.ActionField == null)) {
                    this.ActionField = new XTypedList<actionType>(this, LinqToXsdTypeManager.Instance, XName.Get("Action", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ActionField;
            }
            set {
                if ((value == null)) {
                    this.ActionField = null;
                }
                else {
                    if ((this.ActionField == null)) {
                        this.ActionField = XTypedList<actionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Action", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<actionType>(this.ActionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("WorkflowActionsDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WorkflowActionsDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Action", "http://schemas.microsoft.com/sharepoint/"), typeof(actionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class UIVersion {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private UIVersion() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ArrayOfProperty+)
    /// </para>
    /// </summary>
    public partial class CustomizationDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ArrayOfPropertyDefinition> ArrayOfPropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator CustomizationDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CustomizationDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CustomizationDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ArrayOfProperty", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ArrayOfProperty+)
        /// </para>
        /// </summary>
        public CustomizationDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ArrayOfProperty+)
        /// </para>
        /// </summary>
        public IList<ArrayOfPropertyDefinition> ArrayOfProperty {
            get {
                if ((this.ArrayOfPropertyField == null)) {
                    this.ArrayOfPropertyField = new XTypedList<ArrayOfPropertyDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("ArrayOfProperty", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.ArrayOfPropertyField;
            }
            set {
                if ((value == null)) {
                    this.ArrayOfPropertyField = null;
                }
                else {
                    if ((this.ArrayOfPropertyField == null)) {
                        this.ArrayOfPropertyField = XTypedList<ArrayOfPropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ArrayOfProperty", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<ArrayOfPropertyDefinition>(this.ArrayOfPropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CustomizationDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CustomizationDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("ArrayOfProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(ArrayOfPropertyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property+)
    /// </para>
    /// </summary>
    public partial class ArrayOfPropertyDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyDefinition> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator ArrayOfPropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ArrayOfPropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ArrayOfPropertyDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property+)
        /// </para>
        /// </summary>
        public ArrayOfPropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+)
        /// </para>
        /// </summary>
        public IList<PropertyDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyDefinition>(this, LinqToXsdTypeManager.Instance, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"));
                    }
                    else {
                        XTypedServices.SetList<PropertyDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("ArrayOfPropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ArrayOfPropertyDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Property", "http://schemas.microsoft.com/sharepoint/"), typeof(PropertyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class PropertyDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
         public static explicit operator PropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<PropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PropertyDefinition() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public PropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("PropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PropertyDefinition>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 2)));
            transitions.Add(2, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 2)));
            validationStates = new FSM(1, new Set<int>(2), transitions);
        }
    }
    
    public partial class CommandUI : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CommandUIType ContentField;
        
         public static explicit operator CommandUI(XElement xe) { return XTypedServices.ToXTypedElement<CommandUI, CommandUIType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CommandUI() {
            SetInnerType(new CommandUIType());
        }
        
        public CommandUI(CommandUIType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public CommandUIType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public IList<RibbonType> Ribbon {
            get {
                return this.ContentField.Ribbon;
            }
            set {
                this.ContentField.Ribbon = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public IList<QATType> QAT {
            get {
                return this.ContentField.QAT;
            }
            set {
                this.ContentField.QAT = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public IList<JewelType> Jewel {
            get {
                return this.ContentField.Jewel;
            }
            set {
                this.ContentField.Jewel = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public IList<TemplatesType> Templates {
            get {
                return this.ContentField.Templates;
            }
            set {
                this.ContentField.Templates = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("CommandUI", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CommandUI Load(string xmlFile) {
            return XTypedServices.Load<CommandUI, CommandUIType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static CommandUI Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CommandUI, CommandUIType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static CommandUI Parse(string xml) {
            return XTypedServices.Parse<CommandUI, CommandUIType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new CommandUI(((CommandUIType)(this.Content.Clone())));
        }
        
        private void SetInnerType(CommandUIType ContentField) {
            this.ContentField = ((CommandUIType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Feature : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FeatureDefinition ContentField;
        
         public static explicit operator Feature(XElement xe) { return XTypedServices.ToXTypedElement<Feature, FeatureDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Feature() {
            SetInnerType(new FeatureDefinition());
        }
        
        public Feature(FeatureDefinition content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public FeatureDefinition Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public ElementManifestReferences ElementManifests {
            get {
                return this.ContentField.ElementManifests;
            }
            set {
                this.ContentField.ElementManifests = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public FeaturePropertyDefinitions Properties {
            get {
                return this.ContentField.Properties;
            }
            set {
                this.ContentField.Properties = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public FeatureActivationDependencyDefinitions ActivationDependencies {
            get {
                return this.ContentField.ActivationDependencies;
            }
            set {
                this.ContentField.ActivationDependencies = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public UpgradeActionsDefinition UpgradeActions {
            get {
                return this.ContentField.UpgradeActions;
            }
            set {
                this.ContentField.UpgradeActions = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Id {
            get {
                return this.ContentField.Id;
            }
            set {
                this.ContentField.Id = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                return this.ContentField.Title;
            }
            set {
                this.ContentField.Title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                return this.ContentField.Description;
            }
            set {
                this.ContentField.Description = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Version {
            get {
                return this.ContentField.Version;
            }
            set {
                this.ContentField.Version = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string Scope {
            get {
                return this.ContentField.Scope;
            }
            set {
                this.ContentField.Scope = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReceiverAssembly {
            get {
                return this.ContentField.ReceiverAssembly;
            }
            set {
                this.ContentField.ReceiverAssembly = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ReceiverClass {
            get {
                return this.ContentField.ReceiverClass;
            }
            set {
                this.ContentField.ReceiverClass = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Creator {
            get {
                return this.ContentField.Creator;
            }
            set {
                this.ContentField.Creator = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DefaultResourceFile {
            get {
                return this.ContentField.DefaultResourceFile;
            }
            set {
                this.ContentField.DefaultResourceFile = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Hidden {
            get {
                return this.ContentField.Hidden;
            }
            set {
                this.ContentField.Hidden = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SolutionId {
            get {
                return this.ContentField.SolutionId;
            }
            set {
                this.ContentField.SolutionId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ActivateOnDefault {
            get {
                return this.ContentField.ActivateOnDefault;
            }
            set {
                this.ContentField.ActivateOnDefault = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AutoActivateInCentralAdmin {
            get {
                return this.ContentField.AutoActivateInCentralAdmin;
            }
            set {
                this.ContentField.AutoActivateInCentralAdmin = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AlwaysForceInstall {
            get {
                return this.ContentField.AlwaysForceInstall;
            }
            set {
                this.ContentField.AlwaysForceInstall = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RequireResources {
            get {
                return this.ContentField.RequireResources;
            }
            set {
                this.ContentField.RequireResources = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUrl {
            get {
                return this.ContentField.ImageUrl;
            }
            set {
                this.ContentField.ImageUrl = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ImageUrlAltText {
            get {
                return this.ContentField.ImageUrlAltText;
            }
            set {
                this.ContentField.ImageUrlAltText = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string UIVersion {
            get {
                return this.ContentField.UIVersion;
            }
            set {
                this.ContentField.UIVersion = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Feature", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Feature Load(string xmlFile) {
            return XTypedServices.Load<Feature, FeatureDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Feature Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Feature, FeatureDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Feature Parse(string xml) {
            return XTypedServices.Parse<Feature, FeatureDefinition>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Feature(((FeatureDefinition)(this.Content.Clone())));
        }
        
        private void SetInnerType(FeatureDefinition ContentField) {
            this.ContentField = ((FeatureDefinition)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Elements : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ElementDefinitionCollection ContentField;
        
         public static explicit operator Elements(XElement xe) { return XTypedServices.ToXTypedElement<Elements, ElementDefinitionCollection>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Elements() {
            SetInnerType(new ElementDefinitionCollection());
        }
        
        public Elements(ElementDefinitionCollection content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ElementDefinitionCollection Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<ContentTypeDefinition> ContentType {
            get {
                return this.ContentField.ContentType;
            }
            set {
                this.ContentField.ContentType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<ContentTypeBindingDefinition> ContentTypeBinding {
            get {
                return this.ContentField.ContentTypeBinding;
            }
            set {
                this.ContentField.ContentTypeBinding = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<DocumentConverterDefinition> DocumentConverter {
            get {
                return this.ContentField.DocumentConverter;
            }
            set {
                this.ContentField.DocumentConverter = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<FeatureSiteTemplateAssociationDefinition> FeatureSiteTemplateAssociation {
            get {
                return this.ContentField.FeatureSiteTemplateAssociation;
            }
            set {
                this.ContentField.FeatureSiteTemplateAssociation = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<SharedFieldDefinition> Field {
            get {
                return this.ContentField.Field;
            }
            set {
                this.ContentField.Field = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<CustomActionDefinition> CustomAction {
            get {
                return this.ContentField.CustomAction;
            }
            set {
                this.ContentField.CustomAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<CustomActionGroupDefinition> CustomActionGroup {
            get {
                return this.ContentField.CustomActionGroup;
            }
            set {
                this.ContentField.CustomActionGroup = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<HideCustomActionDefinition> HideCustomAction {
            get {
                return this.ContentField.HideCustomAction;
            }
            set {
                this.ContentField.HideCustomAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<ModuleDefinition> Module {
            get {
                return this.ContentField.Module;
            }
            set {
                this.ContentField.Module = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<ListInstanceDefinition> ListInstance {
            get {
                return this.ContentField.ListInstance;
            }
            set {
                this.ContentField.ListInstance = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<ListTemplateDefinition> ListTemplate {
            get {
                return this.ContentField.ListTemplate;
            }
            set {
                this.ContentField.ListTemplate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<DelegateControlDefinition> Control {
            get {
                return this.ContentField.Control;
            }
            set {
                this.ContentField.Control = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<ReceiverDefinitionCollection> Receivers {
            get {
                return this.ContentField.Receivers;
            }
            set {
                this.ContentField.Receivers = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<WorkflowDefinition> Workflow {
            get {
                return this.ContentField.Workflow;
            }
            set {
                this.ContentField.Workflow = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<UserMigratorDefinition> UserMigrator {
            get {
                return this.ContentField.UserMigrator;
            }
            set {
                this.ContentField.UserMigrator = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<GroupMigratorDefinition> GroupMigrator {
            get {
                return this.ContentField.GroupMigrator;
            }
            set {
                this.ContentField.GroupMigrator = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<WebPartAdderExtensionDefinition> WebPartAdderExtension {
            get {
                return this.ContentField.WebPartAdderExtension;
            }
            set {
                this.ContentField.WebPartAdderExtension = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<WebTemplateDefinition> WebTemplate {
            get {
                return this.ContentField.WebTemplate;
            }
            set {
                this.ContentField.WebTemplate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<WorkflowAssociationDefinition> WorkflowAssociation {
            get {
                return this.ContentField.WorkflowAssociation;
            }
            set {
                this.ContentField.WorkflowAssociation = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<PropertyBagDefinition> PropertyBag {
            get {
                return this.ContentField.PropertyBag;
            }
            set {
                this.ContentField.PropertyBag = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public IList<WorkflowActionsDefinition> WorkflowActions {
            get {
                return this.ContentField.WorkflowActions;
            }
            set {
                this.ContentField.WorkflowActions = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                return this.ContentField.Id;
            }
            set {
                this.ContentField.Id = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Elements", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Elements Load(string xmlFile) {
            return XTypedServices.Load<Elements, ElementDefinitionCollection>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Elements Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Elements, ElementDefinitionCollection>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Elements Parse(string xml) {
            return XTypedServices.Parse<Elements, ElementDefinitionCollection>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Elements(((ElementDefinitionCollection)(this.Content.Clone())));
        }
        
        private void SetInnerType(ElementDefinitionCollection ContentField) {
            this.ContentField = ((ElementDefinitionCollection)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Solution : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SolutionDefinition ContentField;
        
         public static explicit operator Solution(XElement xe) { return XTypedServices.ToXTypedElement<Solution, SolutionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Solution() {
            SetInnerType(new SolutionDefinition());
        }
        
        public Solution(SolutionDefinition content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public SolutionDefinition Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public FeatureFileReferences FeatureManifests {
            get {
                return this.ContentField.FeatureManifests;
            }
            set {
                this.ContentField.FeatureManifests = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public SiteDefinitionManifestReferences SiteDefinitionManifests {
            get {
                return this.ContentField.SiteDefinitionManifests;
            }
            set {
                this.ContentField.SiteDefinitionManifests = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public AssemblyFileReferences Assemblies {
            get {
                return this.ContentField.Assemblies;
            }
            set {
                this.ContentField.Assemblies = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public TemplateFileReferences TemplateFiles {
            get {
                return this.ContentField.TemplateFiles;
            }
            set {
                this.ContentField.TemplateFiles = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public RootFileReferences RootFiles {
            get {
                return this.ContentField.RootFiles;
            }
            set {
                this.ContentField.RootFiles = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public ApplicationResourceFileDefinitions ApplicationResourceFiles {
            get {
                return this.ContentField.ApplicationResourceFiles;
            }
            set {
                this.ContentField.ApplicationResourceFiles = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public ResourceDefinitions Resources {
            get {
                return this.ContentField.Resources;
            }
            set {
                this.ContentField.Resources = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public DwpFileDefinitions DwpFiles {
            get {
                return this.ContentField.DwpFiles;
            }
            set {
                this.ContentField.DwpFiles = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public CodeAccessSecurityDefinition CodeAccessSecurity {
            get {
                return this.ContentField.CodeAccessSecurity;
            }
            set {
                this.ContentField.CodeAccessSecurity = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public SolutionDependencyReferences ActivationDependencies {
            get {
                return this.ContentField.ActivationDependencies;
            }
            set {
                this.ContentField.ActivationDependencies = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SolutionId {
            get {
                return this.ContentField.SolutionId;
            }
            set {
                this.ContentField.SolutionId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SharePointProductVersion {
            get {
                return this.ContentField.SharePointProductVersion;
            }
            set {
                this.ContentField.SharePointProductVersion = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                return this.ContentField.Title;
            }
            set {
                this.ContentField.Title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Description {
            get {
                return this.ContentField.Description;
            }
            set {
                this.ContentField.Description = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DeploymentServerType {
            get {
                return this.ContentField.DeploymentServerType;
            }
            set {
                this.ContentField.DeploymentServerType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ResetWebServer {
            get {
                return this.ContentField.ResetWebServer;
            }
            set {
                this.ContentField.ResetWebServer = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ResetWebServerModeOnUpgrade {
            get {
                return this.ContentField.ResetWebServerModeOnUpgrade;
            }
            set {
                this.ContentField.ResetWebServerModeOnUpgrade = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Solution", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Solution Load(string xmlFile) {
            return XTypedServices.Load<Solution, SolutionDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Solution Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Solution, SolutionDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Solution Parse(string xml) {
            return XTypedServices.Parse<Solution, SolutionDefinition>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Solution(((SolutionDefinition)(this.Content.Clone())));
        }
        
        private void SetInnerType(SolutionDefinition ContentField) {
            this.ContentField = ((SolutionDefinition)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Project : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SiteDefinition ContentField;
        
         public static explicit operator Project(XElement xe) { return XTypedServices.ToXTypedElement<Project, SiteDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Project() {
            SetInnerType(new SiteDefinition());
        }
        
        public Project(SiteDefinition content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public SiteDefinition Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public NavBarDefinitions NavBars {
            get {
                return this.ContentField.NavBars;
            }
            set {
                this.ContentField.NavBars = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public ListTemplateDefinitions ListTemplates {
            get {
                return this.ContentField.ListTemplates;
            }
            set {
                this.ContentField.ListTemplates = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public DocumentTemplateDefinitions DocumentTemplates {
            get {
                return this.ContentField.DocumentTemplates;
            }
            set {
                this.ContentField.DocumentTemplates = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public BaseTypeDefinitions BaseTypes {
            get {
                return this.ContentField.BaseTypes;
            }
            set {
                this.ContentField.BaseTypes = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public ConfigurationDefinitions Configurations {
            get {
                return this.ContentField.Configurations;
            }
            set {
                this.ContentField.Configurations = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public ModuleDefinitions Modules {
            get {
                return this.ContentField.Modules;
            }
            set {
                this.ContentField.Modules = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public ComponentsDefinition Components {
            get {
                return this.ContentField.Components;
            }
            set {
                this.ContentField.Components = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public ServerEmailFooterDefinition ServerEmailFooter {
            get {
                return this.ContentField.ServerEmailFooter;
            }
            set {
                this.ContentField.ServerEmailFooter = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                return this.ContentField.Title;
            }
            set {
                this.ContentField.Title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ListDir {
            get {
                return this.ContentField.ListDir;
            }
            set {
                this.ContentField.ListDir = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AlternateURL {
            get {
                return this.ContentField.AlternateURL;
            }
            set {
                this.ContentField.AlternateURL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AlternateCSS {
            get {
                return this.ContentField.AlternateCSS;
            }
            set {
                this.ContentField.AlternateCSS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Revision {
            get {
                return this.ContentField.Revision;
            }
            set {
                this.ContentField.Revision = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SiteLogoUrl {
            get {
                return this.ContentField.SiteLogoUrl;
            }
            set {
                this.ContentField.SiteLogoUrl = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SiteLogoDescription {
            get {
                return this.ContentField.SiteLogoDescription;
            }
            set {
                this.ContentField.SiteLogoDescription = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisableWebDesignFeatures {
            get {
                return this.ContentField.DisableWebDesignFeatures;
            }
            set {
                this.ContentField.DisableWebDesignFeatures = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Project", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Project Load(string xmlFile) {
            return XTypedServices.Load<Project, SiteDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Project Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Project, SiteDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Project Parse(string xml) {
            return XTypedServices.Parse<Project, SiteDefinition>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Project(((SiteDefinition)(this.Content.Clone())));
        }
        
        private void SetInnerType(SiteDefinition ContentField) {
            this.ContentField = ((SiteDefinition)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class List : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ListDefinition ContentField;
        
         public static explicit operator List(XElement xe) { return XTypedServices.ToXTypedElement<List, ListDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public List() {
            SetInnerType(new ListDefinition());
        }
        
        public List(ListDefinition content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public ListDefinition Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MetaData?)
        /// </para>
        /// </summary>
        public ListMetaDataDefinition MetaData {
            get {
                return this.ContentField.MetaData;
            }
            set {
                this.ContentField.MetaData = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                return this.ContentField.Id;
            }
            set {
                this.ContentField.Id = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name {
            get {
                return this.ContentField.Name;
            }
            set {
                this.ContentField.Name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Title {
            get {
                return this.ContentField.Title;
            }
            set {
                this.ContentField.Title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Url {
            get {
                return this.ContentField.Url;
            }
            set {
                this.ContentField.Url = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Default {
            get {
                return this.ContentField.@Default;
            }
            set {
                this.ContentField.@Default = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<long> WebImageWidth {
            get {
                return this.ContentField.WebImageWidth;
            }
            set {
                this.ContentField.WebImageWidth = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EnableThumbnails {
            get {
                return this.ContentField.EnableThumbnails;
            }
            set {
                this.ContentField.EnableThumbnails = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EnableContentTypes {
            get {
                return this.ContentField.EnableContentTypes;
            }
            set {
                this.ContentField.EnableContentTypes = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string FolderCreation {
            get {
                return this.ContentField.FolderCreation;
            }
            set {
                this.ContentField.FolderCreation = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DisableAttachments {
            get {
                return this.ContentField.DisableAttachments;
            }
            set {
                this.ContentField.DisableAttachments = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EventSinkAssembly {
            get {
                return this.ContentField.EventSinkAssembly;
            }
            set {
                this.ContentField.EventSinkAssembly = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EventSinkClass {
            get {
                return this.ContentField.EventSinkClass;
            }
            set {
                this.ContentField.EventSinkClass = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EventSinkData {
            get {
                return this.ContentField.EventSinkData;
            }
            set {
                this.ContentField.EventSinkData = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OrderedList {
            get {
                return this.ContentField.OrderedList;
            }
            set {
                this.ContentField.OrderedList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ForceDefaultContentType {
            get {
                return this.ContentField.ForceDefaultContentType;
            }
            set {
                this.ContentField.ForceDefaultContentType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string PrivateList {
            get {
                return this.ContentField.PrivateList;
            }
            set {
                this.ContentField.PrivateList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string QuickLaunchUrl {
            get {
                return this.ContentField.QuickLaunchUrl;
            }
            set {
                this.ContentField.QuickLaunchUrl = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string RootWebOnly {
            get {
                return this.ContentField.RootWebOnly;
            }
            set {
                this.ContentField.RootWebOnly = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ModeratedList {
            get {
                return this.ContentField.ModeratedList;
            }
            set {
                this.ContentField.ModeratedList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> DraftVersionVisibility {
            get {
                return this.ContentField.DraftVersionVisibility;
            }
            set {
                this.ContentField.DraftVersionVisibility = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> ThumbnailSize {
            get {
                return this.ContentField.ThumbnailSize;
            }
            set {
                this.ContentField.ThumbnailSize = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> DefaultItemOpen {
            get {
                return this.ContentField.DefaultItemOpen;
            }
            set {
                this.ContentField.DefaultItemOpen = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string VersioningEnabled {
            get {
                return this.ContentField.VersioningEnabled;
            }
            set {
                this.ContentField.VersioningEnabled = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string EnableMinorVersions {
            get {
                return this.ContentField.EnableMinorVersions;
            }
            set {
                this.ContentField.EnableMinorVersions = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string ModerationType {
            get {
                return this.ContentField.ModerationType;
            }
            set {
                this.ContentField.ModerationType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> Type {
            get {
                return this.ContentField.Type;
            }
            set {
                this.ContentField.Type = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string URLEncode {
            get {
                return this.ContentField.URLEncode;
            }
            set {
                this.ContentField.URLEncode = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<long> WebImageHeight {
            get {
                return this.ContentField.WebImageHeight;
            }
            set {
                this.ContentField.WebImageHeight = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> BaseType {
            get {
                return this.ContentField.BaseType;
            }
            set {
                this.ContentField.BaseType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Direction {
            get {
                return this.ContentField.Direction;
            }
            set {
                this.ContentField.Direction = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("List", "http://schemas.microsoft.com/sharepoint/");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static List Load(string xmlFile) {
            return XTypedServices.Load<List, ListDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static List Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<List, ListDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static List Parse(string xml) {
            return XTypedServices.Parse<List, ListDefinition>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new List(((ListDefinition)(this.Content.Clone())));
        }
        
        private void SetInnerType(ListDefinition ContentField) {
            this.ContentField = ((ListDefinition)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("CamlQueryRoot", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CamlQueryRoot));
            typeDictionary.Add(XName.Get("LogicalTestDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LogicalTestDefinition));
            typeDictionary.Add(XName.Get("LogicalMultiTestDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LogicalMultiTestDefinition));
            typeDictionary.Add(XName.Get("LogicalJoinDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LogicalJoinDefinition));
            typeDictionary.Add(XName.Get("FieldRefDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldRefDefinition));
            typeDictionary.Add(XName.Get("ValueDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ValueDefinitions));
            typeDictionary.Add(XName.Get("ValueDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ValueDefinition));
            typeDictionary.Add(XName.Get("LogicalNullDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LogicalNullDefinition));
            typeDictionary.Add(XName.Get("ExtendedLogicalJoinDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ExtendedLogicalJoinDefinition));
            typeDictionary.Add(XName.Get("FieldRefDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldRefDefinitions));
            typeDictionary.Add(XName.Get("OrderByDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.OrderByDefinition));
            typeDictionary.Add(XName.Get("RowDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RowDefinition));
            typeDictionary.Add(XName.Get("FieldDataDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldDataDefinition));
            typeDictionary.Add(XName.Get("RowDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RowDefinitions));
            typeDictionary.Add(XName.Get("EmptyQueryDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.EmptyQueryDefinition));
            typeDictionary.Add(XName.Get("SimpleFieldRef", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SimpleFieldRef));
            typeDictionary.Add(XName.Get("LookupColumnDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LookupColumnDefinition));
            typeDictionary.Add(XName.Get("QueryColumnDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.QueryColumnDefinition));
            typeDictionary.Add(XName.Get("QueryGetVarDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.QueryGetVarDefinition));
            typeDictionary.Add(XName.Get("QueryListProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.QueryListProperty));
            typeDictionary.Add(XName.Get("MembershipDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MembershipDefinition));
            typeDictionary.Add(XName.Get("GroupByDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GroupByDefinition));
            typeDictionary.Add(XName.Get("UnlimitedLogicalTestDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UnlimitedLogicalTestDefinition));
            typeDictionary.Add(XName.Get("CamlViewRoot", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CamlViewRoot));
            typeDictionary.Add(XName.Get("HtmlRenderingElement", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.HtmlRenderingElement));
            typeDictionary.Add(XName.Get("HtmlDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.HtmlDefinition));
            typeDictionary.Add(XName.Get("HtmlContentDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.HtmlContentDefinition));
            typeDictionary.Add(XName.Get("FieldRefViewDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldRefViewDefinition));
            typeDictionary.Add(XName.Get("BatchDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BatchDefinition));
            typeDictionary.Add(XName.Get("MethodDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MethodDefinition));
            typeDictionary.Add(XName.Get("SetListDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SetListDefinition));
            typeDictionary.Add(XName.Get("SetVarDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SetVarDefinition));
            typeDictionary.Add(XName.Get("CamlViewElement", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CamlViewElement));
            typeDictionary.Add(XName.Get("GetVarDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GetVarDefinition));
            typeDictionary.Add(XName.Get("SwitchDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SwitchDefinition));
            typeDictionary.Add(XName.Get("ExprDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ExprDefinition));
            typeDictionary.Add(XName.Get("CaseDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CaseDefinition));
            typeDictionary.Add(XName.Get("DefaultDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DefaultDefinition));
            typeDictionary.Add(XName.Get("ListPropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListPropertyDefinition));
            typeDictionary.Add(XName.Get("FieldPropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldPropertyDefinition));
            typeDictionary.Add(XName.Get("FieldViewReferenceDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldViewReferenceDefinition));
            typeDictionary.Add(XName.Get("EmptyElement", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.EmptyElement));
            typeDictionary.Add(XName.Get("ScriptQuoteDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ScriptQuoteDefinition));
            typeDictionary.Add(XName.Get("ThreadStampDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ThreadStampDefinition));
            typeDictionary.Add(XName.Get("SelectOptionsDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SelectOptionsDefinition));
            typeDictionary.Add(XName.Get("CounterDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CounterDefinition));
            typeDictionary.Add(XName.Get("IfEqualDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.IfEqualDefinition));
            typeDictionary.Add(XName.Get("IfNegDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.IfNegDefinition));
            typeDictionary.Add(XName.Get("IfSubStringDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.IfSubStringDefinition));
            typeDictionary.Add(XName.Get("LimitDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LimitDefinition));
            typeDictionary.Add(XName.Get("ColumnDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ColumnDefinition));
            typeDictionary.Add(XName.Get("URLDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.URLDefinition));
            typeDictionary.Add(XName.Get("UrlBaseNameDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UrlBaseNameDefinition));
            typeDictionary.Add(XName.Get("HttpHostDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.HttpHostDefinition));
            typeDictionary.Add(XName.Get("ServerPropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ServerPropertyDefinition));
            typeDictionary.Add(XName.Get("CamlBdcMethod", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CamlBdcMethod));
            typeDictionary.Add(XName.Get("CamlBdcFilter", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CamlBdcFilter));
            typeDictionary.Add(XName.Get("FilterLinkDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FilterLinkDefinition));
            typeDictionary.Add(XName.Get("IfNewDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.IfNewDefinition));
            typeDictionary.Add(XName.Get("MeetingPropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MeetingPropertyDefinition));
            typeDictionary.Add(XName.Get("ProjectPropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ProjectPropertyDefinition));
            typeDictionary.Add(XName.Get("UserIDDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UserIDDefinition));
            typeDictionary.Add(XName.Get("HttpPathDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.HttpPathDefinition));
            typeDictionary.Add(XName.Get("HttpVDirDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.HttpVDirDefinition));
            typeDictionary.Add(XName.Get("IfHasRightsDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.IfHasRightsDefinition));
            typeDictionary.Add(XName.Get("RightsChoiceDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RightsChoiceDefinitions));
            typeDictionary.Add(XName.Get("RightsGroupDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RightsGroupDefinition));
            typeDictionary.Add(XName.Get("ForEachElement", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ForEachElement));
            typeDictionary.Add(XName.Get("ButtonType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ButtonType));
            typeDictionary.Add(XName.Get("CheckBoxType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CheckBoxType));
            typeDictionary.Add(XName.Get("ColorPickerType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ColorPickerType));
            typeDictionary.Add(XName.Get("ColorStylesType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ColorStylesType));
            typeDictionary.Add(XName.Get("ColorStyleType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ColorStyleType));
            typeDictionary.Add(XName.Get("ComboBoxType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ComboBoxType));
            typeDictionary.Add(XName.Get("CommandUIType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CommandUIType));
            typeDictionary.Add(XName.Get("ContextualGroupType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContextualGroupType));
            typeDictionary.Add(XName.Get("ContextualTabsType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContextualTabsType));
            typeDictionary.Add(XName.Get("ControlRefType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ControlRefType));
            typeDictionary.Add(XName.Get("ControlsType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ControlsType));
            typeDictionary.Add(XName.Get("DropDownType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DropDownType));
            typeDictionary.Add(XName.Get("FlyoutAnchorType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FlyoutAnchorType));
            typeDictionary.Add(XName.Get("GalleryType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GalleryType));
            typeDictionary.Add(XName.Get("GalleryButtonType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GalleryButtonType));
            typeDictionary.Add(XName.Get("GroupTemplateType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GroupTemplateType));
            typeDictionary.Add(XName.Get("GroupsType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GroupsType));
            typeDictionary.Add(XName.Get("GroupType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GroupType));
            typeDictionary.Add(XName.Get("InsertTableType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.InsertTableType));
            typeDictionary.Add(XName.Get("JewelType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.JewelType));
            typeDictionary.Add(XName.Get("LabelType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LabelType));
            typeDictionary.Add(XName.Get("LayoutType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LayoutType));
            typeDictionary.Add(XName.Get("MaxSizeType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MaxSizeType));
            typeDictionary.Add(XName.Get("MenuType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MenuType));
            typeDictionary.Add(XName.Get("MenuSectionType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MenuSectionType));
            typeDictionary.Add(XName.Get("MenuSectionControlsType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MenuSectionControlsType));
            typeDictionary.Add(XName.Get("MRUSplitButtonType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MRUSplitButtonType));
            typeDictionary.Add(XName.Get("LowScaleWarningType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LowScaleWarningType));
            typeDictionary.Add(XName.Get("OverflowAreaType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.OverflowAreaType));
            typeDictionary.Add(XName.Get("OverflowSectionType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.OverflowSectionType));
            typeDictionary.Add(XName.Get("QATType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.QATType));
            typeDictionary.Add(XName.Get("RibbonTemplatesType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RibbonTemplatesType));
            typeDictionary.Add(XName.Get("RibbonType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RibbonType));
            typeDictionary.Add(XName.Get("RowType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RowType));
            typeDictionary.Add(XName.Get("ScaleType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ScaleType));
            typeDictionary.Add(XName.Get("ScalingType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ScalingType));
            typeDictionary.Add(XName.Get("SectionType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SectionType));
            typeDictionary.Add(XName.Get("SpinnerType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SpinnerType));
            typeDictionary.Add(XName.Get("SplitButtonType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SplitButtonType));
            typeDictionary.Add(XName.Get("StripType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.StripType));
            typeDictionary.Add(XName.Get("TabType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.TabType));
            typeDictionary.Add(XName.Get("TabsType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.TabsType));
            typeDictionary.Add(XName.Get("TemplatesType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.TemplatesType));
            typeDictionary.Add(XName.Get("TextBoxType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.TextBoxType));
            typeDictionary.Add(XName.Get("ToggleButtonType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ToggleButtonType));
            typeDictionary.Add(XName.Get("UnitType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UnitType));
            typeDictionary.Add(XName.Get("UnitAbbreviationType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UnitAbbreviationType));
            typeDictionary.Add(XName.Get("ruleDesignerType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ruleDesignerType));
            typeDictionary.Add(XName.Get("defaultElementType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.defaultElementType));
            typeDictionary.Add(XName.Get("parametersType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.parametersType));
            typeDictionary.Add(XName.Get("dataSourcesType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.dataSourcesType));
            typeDictionary.Add(XName.Get("dataSourceType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.dataSourceType));
            typeDictionary.Add(XName.Get("actionType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.actionType));
            typeDictionary.Add(XName.Get("SiteDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SiteDefinition));
            typeDictionary.Add(XName.Get("NavBarDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.NavBarDefinition));
            typeDictionary.Add(XName.Get("NavBarLinkDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.NavBarLinkDefinition));
            typeDictionary.Add(XName.Get("NavBarDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.NavBarDefinitions));
            typeDictionary.Add(XName.Get("FieldDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldDefinition));
            typeDictionary.Add(XName.Get("BaseListDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BaseListDefinition));
            typeDictionary.Add(XName.Get("FieldDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldDefinitions));
            typeDictionary.Add(XName.Get("FormDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FormDefinition));
            typeDictionary.Add(XName.Get("ListFormSet", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListFormSet));
            typeDictionary.Add(XName.Get("ToolbarDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ToolbarDefinition));
            typeDictionary.Add(XName.Get("ViewDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ViewDefinition));
            typeDictionary.Add(XName.Get("ListDataSourceDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListDataSourceDefinition));
            typeDictionary.Add(XName.Get("ListTemplateDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListTemplateDefinition));
            typeDictionary.Add(XName.Get("WebTemplateDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WebTemplateDefinition));
            typeDictionary.Add(XName.Get("ListTemplateDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListTemplateDefinitions));
            typeDictionary.Add(XName.Get("DocumentTemplateDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DocumentTemplateDefinition));
            typeDictionary.Add(XName.Get("DocumentTemplateDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DocumentTemplateDefinitions));
            typeDictionary.Add(XName.Get("DocumentTemplateFileDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DocumentTemplateFileDefinition));
            typeDictionary.Add(XName.Get("DocumentTemplateFileDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DocumentTemplateFileDefinitions));
            typeDictionary.Add(XName.Get("BaseTypeDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BaseTypeDefinition));
            typeDictionary.Add(XName.Get("BaseTypeDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BaseTypeDefinitions));
            typeDictionary.Add(XName.Get("ConfigurationDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ConfigurationDefinition));
            typeDictionary.Add(XName.Get("DataDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DataDefinition));
            typeDictionary.Add(XName.Get("ListDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListDefinitions));
            typeDictionary.Add(XName.Get("ModuleDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ModuleDefinition));
            typeDictionary.Add(XName.Get("FileDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FileDefinition));
            typeDictionary.Add(XName.Get("WebPartDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WebPartDefinition));
            typeDictionary.Add(XName.Get("ViewWebPartDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ViewWebPartDefinition));
            typeDictionary.Add(XName.Get("BinarySerializedWebPartDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BinarySerializedWebPartDefinition));
            typeDictionary.Add(XName.Get("GUIDMapDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GUIDMapDefinition));
            typeDictionary.Add(XName.Get("BinarySerializedWebPartBodyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BinarySerializedWebPartBodyDefinition));
            typeDictionary.Add(XName.Get("GUIDMapItemDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GUIDMapItemDefinition));
            typeDictionary.Add(XName.Get("NavBarPageDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.NavBarPageDefinition));
            typeDictionary.Add(XName.Get("WebPartConnectionDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WebPartConnectionDefinition));
            typeDictionary.Add(XName.Get("WebPartTransformerDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WebPartTransformerDefinition));
            typeDictionary.Add(XName.Get("ConfigurationDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ConfigurationDefinitions));
            typeDictionary.Add(XName.Get("ModuleDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ModuleDefinitions));
            typeDictionary.Add(XName.Get("ModuleReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ModuleReference));
            typeDictionary.Add(XName.Get("ModuleReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ModuleReferences));
            typeDictionary.Add(XName.Get("CHOICEDEFINITIONS", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CHOICEDEFINITIONS));
            typeDictionary.Add(XName.Get("CHOICEDEFINITION", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CHOICEDEFINITION));
            typeDictionary.Add(XName.Get("MAPPINGDEFINITIONS", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MAPPINGDEFINITIONS));
            typeDictionary.Add(XName.Get("MAPPINGDEFINITION", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MAPPINGDEFINITION));
            typeDictionary.Add(XName.Get("ListInstance", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListInstance));
            typeDictionary.Add(XName.Get("ListInstances", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListInstances));
            typeDictionary.Add(XName.Get("FormDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FormDefinitions));
            typeDictionary.Add(XName.Get("ListMetaDataDefault", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListMetaDataDefault));
            typeDictionary.Add(XName.Get("ViewDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ViewDefinitions));
            typeDictionary.Add(XName.Get("DwpFileDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DwpFileDefinition));
            typeDictionary.Add(XName.Get("DwpFileDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DwpFileDefinitions));
            typeDictionary.Add(XName.Get("ClassResourceDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ClassResourceDefinition));
            typeDictionary.Add(XName.Get("ClassResourceDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ClassResourceDefinitions));
            typeDictionary.Add(XName.Get("BindingRedirectDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BindingRedirectDefinition));
            typeDictionary.Add(XName.Get("BindingRedirectDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BindingRedirectDefinitions));
            typeDictionary.Add(XName.Get("RowLimitDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RowLimitDefinition));
            typeDictionary.Add(XName.Get("ViewStyleReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ViewStyleReference));
            typeDictionary.Add(XName.Get("FeatureDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureDefinition));
            typeDictionary.Add(XName.Get("ElementManifestReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ElementManifestReference));
            typeDictionary.Add(XName.Get("ElementManifestReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ElementManifestReferences));
            typeDictionary.Add(XName.Get("ElementDefinitionCollection", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ElementDefinitionCollection));
            typeDictionary.Add(XName.Get("ContentTypeDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeDefinition));
            typeDictionary.Add(XName.Get("FeatureManifestReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureManifestReference));
            typeDictionary.Add(XName.Get("SolutionDependencyManifestReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SolutionDependencyManifestReference));
            typeDictionary.Add(XName.Get("SolutionDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SolutionDefinition));
            typeDictionary.Add(XName.Get("FeatureFileReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureFileReferences));
            typeDictionary.Add(XName.Get("SolutionDependencyReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SolutionDependencyReferences));
            typeDictionary.Add(XName.Get("SiteDefinitionManifestReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SiteDefinitionManifestReferences));
            typeDictionary.Add(XName.Get("SiteDefinitionManifestFileReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SiteDefinitionManifestFileReference));
            typeDictionary.Add(XName.Get("SharedFieldSetDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SharedFieldSetDefinition));
            typeDictionary.Add(XName.Get("SharedFieldDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SharedFieldDefinitions));
            typeDictionary.Add(XName.Get("CommandUIExtensionType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CommandUIExtensionType));
            typeDictionary.Add(XName.Get("CommandUIDefinitionsType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CommandUIDefinitionsType));
            typeDictionary.Add(XName.Get("CommandUIHandlersType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CommandUIHandlersType));
            typeDictionary.Add(XName.Get("CommandUIHandlerType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CommandUIHandlerType));
            typeDictionary.Add(XName.Get("CommandUIDefinitionType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CommandUIDefinitionType));
            typeDictionary.Add(XName.Get("CustomActionDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CustomActionDefinition));
            typeDictionary.Add(XName.Get("HideCustomActionDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.HideCustomActionDefinition));
            typeDictionary.Add(XName.Get("UrlActionDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UrlActionDefinition));
            typeDictionary.Add(XName.Get("CustomActionGroupDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CustomActionGroupDefinition));
            typeDictionary.Add(XName.Get("CustomActionDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CustomActionDefinitions));
            typeDictionary.Add(XName.Get("FeatureActivationDependencyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureActivationDependencyDefinition));
            typeDictionary.Add(XName.Get("FeatureActivationDependencyDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureActivationDependencyDefinitions));
            typeDictionary.Add(XName.Get("SharedFieldReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SharedFieldReference));
            typeDictionary.Add(XName.Get("FeatureTemplateReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureTemplateReference));
            typeDictionary.Add(XName.Get("FeatureTemplateReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureTemplateReferences));
            typeDictionary.Add(XName.Get("VersionRangeDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.VersionRangeDefinition));
            typeDictionary.Add(XName.Get("UpgradeActionsDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UpgradeActionsDefinition));
            typeDictionary.Add(XName.Get("CustomUpgradeActionDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CustomUpgradeActionDefinition));
            typeDictionary.Add(XName.Get("ParametersDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ParametersDefinition));
            typeDictionary.Add(XName.Get("ParameterDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ParameterDefinition));
            typeDictionary.Add(XName.Get("AddContentTypeFieldDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.AddContentTypeFieldDefinition));
            typeDictionary.Add(XName.Get("MapFileDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MapFileDefinition));
            typeDictionary.Add(XName.Get("FieldTypeDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldTypeDefinition));
            typeDictionary.Add(XName.Get("RenderPatternDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RenderPatternDefinition));
            typeDictionary.Add(XName.Get("SubFieldTypeDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SubFieldTypeDefinition));
            typeDictionary.Add(XName.Get("AssemblyFileReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.AssemblyFileReference));
            typeDictionary.Add(XName.Get("AssemblyFileReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.AssemblyFileReferences));
            typeDictionary.Add(XName.Get("RootFileReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RootFileReference));
            typeDictionary.Add(XName.Get("RootFileReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RootFileReferences));
            typeDictionary.Add(XName.Get("TemplateFileReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.TemplateFileReference));
            typeDictionary.Add(XName.Get("TemplateFileReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.TemplateFileReferences));
            typeDictionary.Add(XName.Get("CodeAccessSecurityDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CodeAccessSecurityDefinition));
            typeDictionary.Add(XName.Get("PolicyItemDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.PolicyItemDefinition));
            typeDictionary.Add(XName.Get("PermissionSetDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.PermissionSetDefinition));
            typeDictionary.Add(XName.Get("PolicyAssembliesDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.PolicyAssembliesDefinition));
            typeDictionary.Add(XName.Get("PolicyAssemblyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.PolicyAssemblyDefinition));
            typeDictionary.Add(XName.Get("ItemEventDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ItemEventDefinition));
            typeDictionary.Add(XName.Get("EventDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.EventDefinition));
            typeDictionary.Add(XName.Get("ContentTypeFilterDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeFilterDefinition));
            typeDictionary.Add(XName.Get("FieldChangedFilterDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldChangedFilterDefinition));
            typeDictionary.Add(XName.Get("FieldExpressionFilterDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldExpressionFilterDefinition));
            typeDictionary.Add(XName.Get("CTFieldRefDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CTFieldRefDefinition));
            typeDictionary.Add(XName.Get("CTFieldRefDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CTFieldRefDefinitions));
            typeDictionary.Add(XName.Get("ListDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListDefinition));
            typeDictionary.Add(XName.Get("ContentTypeLink", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeLink));
            typeDictionary.Add(XName.Get("ContentTypeLinks", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeLinks));
            typeDictionary.Add(XName.Get("FeaturePropertyDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeaturePropertyDefinitions));
            typeDictionary.Add(XName.Get("FeaturePropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeaturePropertyDefinition));
            typeDictionary.Add(XName.Get("ListMetaDataDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListMetaDataDefinition));
            typeDictionary.Add(XName.Get("SafeControlDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SafeControlDefinitions));
            typeDictionary.Add(XName.Get("SafeControlDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SafeControlDefinition));
            typeDictionary.Add(XName.Get("XmlDocumentDefinitionCollection", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.XmlDocumentDefinitionCollection));
            typeDictionary.Add(XName.Get("XmlDocumentDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.XmlDocumentDefinition));
            typeDictionary.Add(XName.Get("DelegateControlDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DelegateControlDefinition));
            typeDictionary.Add(XName.Get("ReceiverDefinitionCollection", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ReceiverDefinitionCollection));
            typeDictionary.Add(XName.Get("ReceiverDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ReceiverDefinition));
            typeDictionary.Add(XName.Get("UserMigratorDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UserMigratorDefinition));
            typeDictionary.Add(XName.Get("GroupMigratorDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GroupMigratorDefinition));
            typeDictionary.Add(XName.Get("SimplePropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SimplePropertyDefinition));
            typeDictionary.Add(XName.Get("WebPartAdderExtensionDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WebPartAdderExtensionDefinition));
            typeDictionary.Add(XName.Get("PropertyValueAttributeDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.PropertyValueAttributeDefinition));
            typeDictionary.Add(XName.Get("ContentTypeDocumentTemplateDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeDocumentTemplateDefinition));
            typeDictionary.Add(XName.Get("ListInstanceDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListInstanceDefinition));
            typeDictionary.Add(XName.Get("WorkflowMetadata", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WorkflowMetadata));
            typeDictionary.Add(XName.Get("WorkflowDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WorkflowDefinition));
            typeDictionary.Add(XName.Get("WebTempFileDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WebTempFileDefinition));
            typeDictionary.Add(XName.Get("ApplicationResourceFileDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ApplicationResourceFileDefinitions));
            typeDictionary.Add(XName.Get("ApplicationResourceFileDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ApplicationResourceFileDefinition));
            typeDictionary.Add(XName.Get("App_GlobalResourceFileDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.App_GlobalResourceFileDefinition));
            typeDictionary.Add(XName.Get("ResourceDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ResourceDefinition));
            typeDictionary.Add(XName.Get("ResourceDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ResourceDefinitions));
            typeDictionary.Add(XName.Get("DocumentConverterDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DocumentConverterDefinition));
            typeDictionary.Add(XName.Get("FeatureSiteTemplateAssociationDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureSiteTemplateAssociationDefinition));
            typeDictionary.Add(XName.Get("ContentTypeBindingDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeBindingDefinition));
            typeDictionary.Add(XName.Get("ServerEmailFooterDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ServerEmailFooterDefinition));
            typeDictionary.Add(XName.Get("ContentTypeReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeReferences));
            typeDictionary.Add(XName.Get("ContentTypeReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeReference));
            typeDictionary.Add(XName.Get("FolderReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FolderReference));
            typeDictionary.Add(XName.Get("SharedFieldDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SharedFieldDefinition));
            typeDictionary.Add(XName.Get("ExecuteUrlDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ExecuteUrlDefinition));
            typeDictionary.Add(XName.Get("FileDialogPostProcessorDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FileDialogPostProcessorDefinition));
            typeDictionary.Add(XName.Get("ExternalSecurityProviderDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ExternalSecurityProviderDefinition));
            typeDictionary.Add(XName.Get("ComponentsDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ComponentsDefinition));
            typeDictionary.Add(XName.Get("CTFolderDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CTFolderDefinition));
            typeDictionary.Add(XName.Get("ViewDataFieldRefDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ViewDataFieldRefDefinition));
            typeDictionary.Add(XName.Get("ViewDataFieldRefDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ViewDataFieldRefDefinitions));
            typeDictionary.Add(XName.Get("ValidationDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ValidationDefinition));
            typeDictionary.Add(XName.Get("WorkflowAssociationDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WorkflowAssociationDefinition));
            typeDictionary.Add(XName.Get("PropertyBagDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.PropertyBagDefinition));
            typeDictionary.Add(XName.Get("WorkflowActionsDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WorkflowActionsDefinition));
            typeDictionary.Add(XName.Get("CustomizationDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CustomizationDefinition));
            typeDictionary.Add(XName.Get("ArrayOfPropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ArrayOfPropertyDefinition));
            typeDictionary.Add(XName.Get("PropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.PropertyDefinition));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("CommandUI", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CommandUI));
            elementDictionary.Add(XName.Get("Feature", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.Feature));
            elementDictionary.Add(XName.Get("Elements", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.Elements));
            elementDictionary.Add(XName.Get("Solution", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.Solution));
            elementDictionary.Add(XName.Get("Project", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.Project));
            elementDictionary.Add(XName.Get("List", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.List));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(Microsoft.Schemas.SharePoint.CommandUI), typeof(global::Microsoft.Schemas.SharePoint.CommandUIType));
            wrapperDictionary.Add(typeof(Microsoft.Schemas.SharePoint.Feature), typeof(global::Microsoft.Schemas.SharePoint.FeatureDefinition));
            wrapperDictionary.Add(typeof(Microsoft.Schemas.SharePoint.Elements), typeof(global::Microsoft.Schemas.SharePoint.ElementDefinitionCollection));
            wrapperDictionary.Add(typeof(Microsoft.Schemas.SharePoint.Solution), typeof(global::Microsoft.Schemas.SharePoint.SolutionDefinition));
            wrapperDictionary.Add(typeof(Microsoft.Schemas.SharePoint.Project), typeof(global::Microsoft.Schemas.SharePoint.SiteDefinition));
            wrapperDictionary.Add(typeof(Microsoft.Schemas.SharePoint.List), typeof(global::Microsoft.Schemas.SharePoint.ListDefinition));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("CommandUI", "http://schemas.microsoft.com/sharepoint/")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public CommandUI CommandUI {  get {return rootObject as CommandUI; } }

    public Feature Feature {  get {return rootObject as Feature; } }

    public Elements Elements {  get {return rootObject as Elements; } }

    public Solution Solution {  get {return rootObject as Solution; } }

    public Project Project {  get {return rootObject as Project; } }

    public List List {  get {return rootObject as List; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(CommandUI root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Feature root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Elements root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Solution root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Project root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(List root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::Microsoft.Schemas.SharePoint.CommandUI CommandUI {  get {return rootObject as global::Microsoft.Schemas.SharePoint.CommandUI; } }

    public global::Microsoft.Schemas.SharePoint.Feature Feature {  get {return rootObject as global::Microsoft.Schemas.SharePoint.Feature; } }

    public global::Microsoft.Schemas.SharePoint.Elements Elements {  get {return rootObject as global::Microsoft.Schemas.SharePoint.Elements; } }

    public global::Microsoft.Schemas.SharePoint.Solution Solution {  get {return rootObject as global::Microsoft.Schemas.SharePoint.Solution; } }

    public global::Microsoft.Schemas.SharePoint.Project Project {  get {return rootObject as global::Microsoft.Schemas.SharePoint.Project; } }

    public global::Microsoft.Schemas.SharePoint.List List {  get {return rootObject as global::Microsoft.Schemas.SharePoint.List; } }
        
        private XRoot() {
        }
        
        public XRoot(global::Microsoft.Schemas.SharePoint.CommandUI root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.Schemas.SharePoint.Feature root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.Schemas.SharePoint.Elements root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.Schemas.SharePoint.Solution root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.Schemas.SharePoint.Project root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.Schemas.SharePoint.List root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
