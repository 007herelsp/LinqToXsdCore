<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XObjectsCore</name>
    </assembly>
    <members>
        <member name="T:Xml.Schema.Linq.Configuration">
            <summary>
            <para>
            Regular expression: (Namespaces, Validation?, Transformation?)
            </para>
            </summary>
        </member>
        <member name="M:Xml.Schema.Linq.Configuration.SaveNoOverwrite(System.String)">
            <summary>
            Saves the current instance without overwriting an existing file. Adds a number to the end of the file name.
            </summary>
            <param name="fileNameOrFullPath"></param>
        </member>
        <member name="M:Xml.Schema.Linq.Configuration.MergeNamespaces(Xml.Schema.Linq.Configuration)">
            <summary>
            Merges the namespaces present in another <see cref="T:Xml.Schema.Linq.Configuration"/> instance.
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Xml.Schema.Linq.Configuration.ToLinqToXsdSettings">
            <summary>
            Converts this instance to a legacy <see cref="T:Xml.Schema.Linq.LinqToXsdSettings"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xml.Schema.Linq.Configuration.Load(System.IO.DirectoryInfo,System.IProgress{System.String})">
            <summary>
            Load configuration files (.xml, .config) from a <see cref="T:System.IO.DirectoryInfo"/> and merge all the configuration instances
            into one and return it as a <see cref="T:Xml.Schema.Linq.LinqToXsdSettings"/> instance.
            </summary>
            <param name="directory"></param>
            <param name="progress"></param>
            <returns><c>null</c> if not configs are present in the <paramref name="directory"/>.</returns>
        </member>
        <member name="M:Xml.Schema.Linq.Configuration.LoadForSchema(System.Xml.Linq.XDocument)">
            <summary>
            Loads a new <see cref="T:Xml.Schema.Linq.Configuration"/> instance by reading an existing XSD schema and creating default values.
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
            <exception cref="T:Xml.Schema.Linq.LinqToXsdException">Invalid XSD file; or it has no namespace declaration for W3C XML Schema.</exception>
        </member>
        <member name="P:Xml.Schema.Linq.Configuration.ExampleConfigurationInstance">
            <summary>
            Returns a new, default <see cref="T:Xml.Schema.Linq.Configuration"/> instance with no <see cref="P:Xml.Schema.Linq.Configuration.Namespaces"/> present.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xml.Schema.Linq.Configuration.#ctor">
            <summary>
            <para>
            Regular expression: (Namespaces, Validation?, Transformation?)
            </para>
            </summary>
        </member>
        <member name="P:Xml.Schema.Linq.Configuration.Namespaces">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (Namespaces, Validation?, Transformation?)
            </para>
            </summary>
        </member>
        <member name="P:Xml.Schema.Linq.Configuration.Validation">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (Namespaces, Validation?, Transformation?)
            </para>
            </summary>
        </member>
        <member name="P:Xml.Schema.Linq.Configuration.Transformation">
            <summary>
            <para>
            Occurrence: optional
            </para>
            <para>
            Regular expression: (Namespaces, Validation?, Transformation?)
            </para>
            </summary>
        </member>
        <member name="T:Xml.Schema.Linq.Namespaces">
            <summary>
            <para>
            Regular expression: (@Namespace+)
            </para>
            </summary>
        </member>
        <member name="M:Xml.Schema.Linq.Namespaces.#ctor">
            <summary>
            <para>
            Regular expression: (@Namespace+)
            </para>
            </summary>
        </member>
        <member name="P:Xml.Schema.Linq.Namespaces.Namespace">
            <summary>
            <para>
            Occurrence: required, repeating
            </para>
            <para>
            Regular expression: (@Namespace+)
            </para>
            </summary>
        </member>
        <member name="P:Xml.Schema.Linq.Namespace.Clr">
            <summary>
            <para>
            Occurrence: required
            </para>
            </summary>
        </member>
        <member name="P:Xml.Schema.Linq.Namespace.Schema">
            <summary>
            <para>
            Occurrence: required
            </para>
            </summary>
        </member>
        <member name="T:Xml.Schema.Linq.Validation">
            <summary>
            <para>
            Regular expression: (VerifyRequired)
            </para>
            </summary>
        </member>
        <member name="M:Xml.Schema.Linq.Validation.#ctor">
            <summary>
            <para>
            Regular expression: (VerifyRequired)
            </para>
            </summary>
        </member>
        <member name="P:Xml.Schema.Linq.Validation.VerifyRequired">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (VerifyRequired)
            </para>
            </summary>
        </member>
        <member name="T:Xml.Schema.Linq.Transformation">
            <summary>
            <para>
            Regular expression: (Deanonymize)
            </para>
            </summary>
        </member>
        <member name="M:Xml.Schema.Linq.Transformation.#ctor">
            <summary>
            <para>
            Regular expression: (Deanonymize)
            </para>
            </summary>
        </member>
        <member name="P:Xml.Schema.Linq.Transformation.Deanonymize">
            <summary>
            <para>
            Occurrence: required
            </para>
            <para>
            Regular expression: (Deanonymize)
            </para>
            </summary>
        </member>
        <member name="P:Xml.Schema.Linq.Deanonymize.strict">
            <summary>
            <para>
            Occurrence: optional
            </para>
            </summary>
        </member>
        <member name="T:Xml.Schema.Linq.NamespaceEqualityValueComparer">
            <summary>
            Compares <see cref="T:Xml.Schema.Linq.Namespace"/> objects (from <see cref="T:Xml.Schema.Linq.Configuration"/> instances).
            </summary>
        </member>
        <member name="M:Xml.Schema.Linq.Extensions.GeneralExtensionMethods.ToXmlSchemaSet(System.Xml.XmlReader,System.Xml.XmlResolver)">
            <summary>
            Converts an <see cref="T:System.Xml.XmlReader"/>s to an <see cref="T:System.Xml.Schema.XmlSchemaSet"/>, assuming the reader points to an XML Schema file.
            </summary>
            <param name="reader">The current <see cref="T:System.Xml.XmlReader"/>.</param>
            <param name="resolver">Add a custom <see cref="T:System.Xml.XmlResolver"/>. Defaults to using an <see cref="T:System.Xml.XmlUrlResolver"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Xml.Schema.Linq.Extensions.GeneralExtensionMethods.ToString``1(``0,System.Func{``0,System.String})">
            <summary>
            Generic ToString method that will execute a given <see cref="T:System.Func`1"/> that accepts the current object as a sole parameter and
            returns a string.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="object"></param>
            <param name="functor"></param>
            <returns></returns>
        </member>
        <member name="M:Xml.Schema.Linq.Extensions.GeneralExtensionMethods.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
            Converts the current <paramref name="sequence"/> into a delimited string.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="sequence"></param>
            <param name="delimiter"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Xml.Schema.Linq.Extensions.GeneralExtensionMethods.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Char)">
            <summary>
            Converts the current <paramref name="sequence"/> into a delimited string.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="sequence"></param>
            <param name="functor">A <see cref="T:System.Func`1"/> to execute on each element in the <paramref name="sequence"/> which itself wraps the call to <c>ToString()</c>.</param>
            <param name="delimiter"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sequence"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Xml.Schema.Linq.Extensions.StreamExtensionMethods.ReadAsString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads the current <see cref="T:System.IO.Stream"/> as a <see cref="T:System.String"/>, optionally using a given <paramref name="encoding"/>.
            <para>Will also reset the Stream's internal position to 0 so it can be re-read again.</para>
            </summary>
            <param name="stream"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Xml.Schema.Linq.Extensions.StringExtensionMethods.IsEmpty(System.String)">
            <summary>
            Determines if a string is <c>null</c>, empty or all whitespace.
            </summary>
            <param name="theString"></param>
            <returns></returns>
        </member>
        <member name="M:Xml.Schema.Linq.Extensions.StringExtensionMethods.IsNotEmpty(System.String)">
            <summary>
            Determines if a string is NOT <c>null</c>, empty or all whitespace. The inverse of <see cref="M:Xml.Schema.Linq.Extensions.StringExtensionMethods.IsEmpty(System.String)"/>.
            </summary>
            <remarks>Because I hate using <c>!</c></remarks>
            <param name="theString"></param>
            <returns></returns>
        </member>
        <member name="M:Xml.Schema.Linq.Extensions.StringExtensionMethods.AppendNumberToString(System.String,System.Char)">
            <summary>
            Adds a number to the end of a string.
            </summary>
            <param name="theString"></param>
            <param name="delimiter">A spacing character. Defaults to underscore.</param>
            <returns></returns>
        </member>
        <member name="M:Xml.Schema.Linq.Extensions.StringExtensionMethods.ParseInt(System.String)">
            <summary>
            Attempts to parse an <see cref="T:System.Int32"/> from a string or returns null if it couldn't successfully parse.
            </summary>
            <param name="theString"></param>
            <returns></returns>
        </member>
        <member name="M:Xml.Schema.Linq.Extensions.StringExtensionMethods.AppendIfNotPresent(System.String,System.String)">
            <summary>
            Append a string to the end of the current string if it isn't already there.
            </summary>
            <param name="theString"></param>
            <param name="appendage"></param>
        </member>
        <member name="M:Xml.Schema.Linq.Extensions.StringExtensionMethods.Except(System.String,System.String)">
            <summary>
            Returns the current string without the given <paramref name="exception"/> string if it is present in the current string.
            </summary>
            <param name="theString"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Xml.Schema.Linq.Extensions.XDocumentExtensions.IsAnXmlSchema(System.Xml.Linq.XDocument)">
            <summary>
            Determines if the current <see cref="T:System.Xml.Linq.XDocument"/> is a W3C Xml Schema by checking for the presence of the
            W3C namespace URI in the root element.
            </summary>
            <param name="xDoc"></param>
            <returns></returns>
        </member>
        <member name="M:Xml.Schema.Linq.Extensions.XDocumentExtensions.FilterOutSchemasThatAreIncludedOrImported(System.Collections.Generic.Dictionary{System.String,System.Xml.Linq.XDocument})">
            <summary>
            From an existing collection of <see cref="T:System.Xml.Linq.XDocument"/>s, filter out the ones that are themselves referenced in xs:include or xs:import
            directives from within other XML documents in the same collection. This ensures that they are not referenced twice.
            </summary>
            <remarks>This extension operates on a dictionary collection to ensure that the file name remains associated with it's relevant XDocument
            instance, as XDocuments do not contain any information about the file name or where the XML document was/is stored.</remarks>
            <param name="xDocs"></param>
            <returns></returns>
        </member>
        <member name="T:Xml.Schema.Linq.XAttributeNamespaceValueEqualityComparer">
            <inheritdoc />
            <summary>
            Used to filter down <see cref="T:System.Xml.Linq.XAttribute"/>s that have the same namespace value.
            </summary>
        </member>
        <member name="T:Xml.Schema.Linq.XAttributeNameValueEqualityComparer">
            <summary>
            Determines if multiple <see cref="T:System.Xml.Linq.XAttribute"/>s have the same value for the namespace and local name.
            </summary>
        </member>
        <member name="T:Xml.Schema.Linq.XAttributeValueEqualityComparer">
            <inheritdoc />
            <summary>
            Used to filter down <see cref="T:System.Xml.Linq.XAttribute"/>s that have the same attribute value (<see cref="P:System.Xml.Linq.XAttribute.Value"/>).
            </summary>
        </member>
        <member name="T:Xml.Schema.Linq.XObjectsCoreGenerator">
            <summary>
            Static methods to support multiple ways of generating code.
            </summary>
        </member>
        <member name="M:Xml.Schema.Linq.XObjectsCoreGenerator.LoadLinqToXsdSettings(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Xml.Schema.Linq.LinqToXsdSettings"/>, optionally by loading from an XML file.
            </summary>
            <param name="fromXmlFile">Null or empty value will simply return a default instance.</param>
            <returns></returns>
        </member>
        <member name="M:Xml.Schema.Linq.XObjectsCoreGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},Xml.Schema.Linq.LinqToXsdSettings)">
            <summary>
            Generates code for a sequence of file paths and an instance of a <see cref="T:Xml.Schema.Linq.LinqToXsdSettings"/>.
            </summary>
            <param name="xsdFilePaths"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Xml.Schema.Linq.XObjectsCoreGenerator.Generate(System.String,System.String)">
            <summary>
            Generates code using a given <see cref="!:xsdFilePath"/>, and an optionally, the file path to a configuration file.
            </summary>
            <param name="xsdFilePath"></param>
            <param name="linqToXsdSettingsFilePath"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="xsdFilePath"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Xml.Schema.Linq.XObjectsCoreGenerator.Generate(System.String,Xml.Schema.Linq.LinqToXsdSettings)">
            <summary>
            Generates code using a given <see cref="!:xsdFilePath"/> for a single file, and an optional <see cref="T:Xml.Schema.Linq.LinqToXsdSettings"/> instance. 
            </summary>
            <param name="xsdFilePath"></param>
            <param name="settings">If null, uses default or </param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="xsdFilePath"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Xml.Schema.Linq.XObjectsCoreGenerator.Generate(System.Xml.Schema.XmlSchemaSet,Xml.Schema.Linq.LinqToXsdSettings)">
            <summary>
            Generates code using a given <paramref name="schemaSet"/> of XSD's and a <see cref="T:Xml.Schema.Linq.LinqToXsdSettings"/> instance.
            </summary>
            <param name="schemaSet"></param>
            <param name="settings"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="schemaSet"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Xml.Schema.Linq.XObjectsCoreGenerator.GenerateCodeCompileUnit(System.Xml.Schema.XmlSchemaSet,Xml.Schema.Linq.LinqToXsdSettings)">
            <summary>
            Creates a <see cref="T:System.CodeDom.CodeCompileUnit"/> from a given <see cref="T:System.Xml.Schema.XmlSchemaSet"/> and <see cref="T:Xml.Schema.Linq.LinqToXsdSettings"/>.
            </summary>
            <param name="schemaSet"></param>
            <param name="settings"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="schemaSet"/> is <see langword="null"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="settings"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Xml.Schema.Linq.XObjectsCoreGenerator.Generate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates code by searching for an accompanying configuration file, whereby each configuration file is named the same as the XSD file, but with an
            .config extension (i.e. schemaFileName.xsd.config). Will skip over XSDs that have no accompanying .config file.
            </summary>
            <param name="schemaFiles"></param>
            <returns></returns>
        </member>
        <member name="T:Xml.Schema.Linq.XTypedElementAnnotation">
            <summary>
            Using separate annotationType object that will be added to XElement annotation
            Since XElement does not support looking up annotations by Super Type
            </summary>
        </member>
    </members>
</doc>
